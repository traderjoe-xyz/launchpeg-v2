{
  "address": "0xb6479908D5C8E3B6aCA01935dD4E864d715e70A3",
  "abi": [
    {
      "inputs": [],
      "name": "LaunchpegFactory__InvalidBatchReveal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegFactory__InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidJoeFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NoPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__PendingOwnerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flatLaunchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPerAddressDuringMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForDevs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForAllowlist",
          "type": "uint256"
        }
      ],
      "name": "FlatLaunchpegCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "launchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPerAddressDuringMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForAuction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForAllowlist",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForDevs",
          "type": "uint256"
        }
      ],
      "name": "LaunchpegCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "batchReveal",
          "type": "address"
        }
      ],
      "name": "SetBatchReveal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "SetDefaultJoeFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "joeFeePercent",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultJoeFeePercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flatLaunchpegImplementation",
          "type": "address"
        }
      ],
      "name": "SetFlatLaunchpegImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "launchpegImplementation",
          "type": "address"
        }
      ],
      "name": "SetLaunchpegImplementation",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAUNCHPEG_PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pauser",
          "type": "address"
        }
      ],
      "name": "addLaunchpegPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allLaunchpegs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "becomeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPerAddressDuringMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_enableBatchReveal",
          "type": "bool"
        }
      ],
      "name": "createFlatLaunchpeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPerAddressDuringMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAuction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForAllowlist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountForDevs",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_enableBatchReveal",
          "type": "bool"
        }
      ],
      "name": "createLaunchpeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flatLaunchpegImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpegImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_flatLaunchpegImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLaunchpeg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_launchpegType",
          "type": "uint256"
        }
      ],
      "name": "numLaunchpegs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpeg",
          "type": "address"
        }
      ],
      "name": "pauseLaunchpeg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pauser",
          "type": "address"
        }
      ],
      "name": "removeLaunchpegPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokePendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "name": "setBatchReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_joeFeeCollector",
          "type": "address"
        }
      ],
      "name": "setDefaultJoeFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_joeFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setDefaultJoeFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flatLaunchpegImplementation",
          "type": "address"
        }
      ],
      "name": "setFlatLaunchpegImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpegImplementation",
          "type": "address"
        }
      ],
      "name": "setLaunchpegImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a6c1c9de25194f95d6e3f2355ef99f3c4a92daa02f99ec57e24a733c836b72d",
  "receipt": {
    "to": null,
    "from": "0x6C7150B6FbCf2a758a6b7f585365fC3ffE2dE055",
    "contractAddress": "0xb6479908D5C8E3B6aCA01935dD4E864d715e70A3",
    "transactionIndex": 0,
    "gasUsed": "1777689",
    "logsBloom": "0x
    "blockHash": "0x8eb7847edff73f9c40cc38536979d7670308ce07cf953eb602d06c74992323ce",
    "transactionHash": "0x0a6c1c9de25194f95d6e3f2355ef99f3c4a92daa02f99ec57e24a733c836b72d",
    "logs": [],
    "blockNumber": 22236961,
    "cumulativeGasUsed": "1777689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "60af1768f903d522223c469d6fc49210",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LaunchpegFactory__InvalidBatchReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegFactory__InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidJoeFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NoPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__PendingOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flatLaunchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"}],\"name\":\"FlatLaunchpegCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"}],\"name\":\"LaunchpegCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"batchReveal\",\"type\":\"address\"}],\"name\":\"SetBatchReveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"joeFeeCollector\",\"type\":\"address\"}],\"name\":\"SetDefaultJoeFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joeFeePercent\",\"type\":\"uint256\"}],\"name\":\"SetDefaultJoeFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flatLaunchpegImplementation\",\"type\":\"address\"}],\"name\":\"SetFlatLaunchpegImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchpegImplementation\",\"type\":\"address\"}],\"name\":\"SetLaunchpegImplementation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCHPEG_PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"addLaunchpegPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLaunchpegs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableBatchReveal\",\"type\":\"bool\"}],\"name\":\"createFlatLaunchpeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enableBatchReveal\",\"type\":\"bool\"}],\"name\":\"createLaunchpeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatLaunchpegImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpegImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flatLaunchpegImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLaunchpeg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchpegType\",\"type\":\"uint256\"}],\"name\":\"numLaunchpegs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpeg\",\"type\":\"address\"}],\"name\":\"pauseLaunchpeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"removeLaunchpegPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"name\":\"setBatchReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_joeFeeCollector\",\"type\":\"address\"}],\"name\":\"setDefaultJoeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joeFeePercent\",\"type\":\"uint256\"}],\"name\":\"setDefaultJoeFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flatLaunchpegImplementation\",\"type\":\"address\"}],\"name\":\"setFlatLaunchpegImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpegImplementation\",\"type\":\"address\"}],\"name\":\"setLaunchpegImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"addLaunchpegPauser(address)\":{\"params\":{\"_pauser\":\"Pauser address\"}},\"createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,bool)\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_enableBatchReveal\":\"Flag to enable batch reveal for the collection\",\"_maxPerAddressDuringMint\":\"Max amount of NFTs an address can mint in public phases\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"},\"returns\":{\"_0\":\"flatLaunchpeg New FlatLaunchpeg address\"}},\"createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,bool)\":{\"params\":{\"_amountForAllowlist\":\"Amount of NFTs available for the allowlist mint (e.g 1000)\",\"_amountForAuction\":\"Amount of NFTs available for the auction (e.g 8000)\",\"_amountForDevs\":\"Amount of NFTs reserved for `projectOwner` (e.g 200)\",\"_collectionSize\":\"The collection size (e.g 10000)\",\"_enableBatchReveal\":\"Flag to enable batch reveal for the collection\",\"_maxPerAddressDuringMint\":\"Max amount of NFTs an address can mint in public phases\",\"_name\":\"ERC721 name\",\"_projectOwner\":\"The project owner\",\"_royaltyReceiver\":\"Royalty fee collector\",\"_symbol\":\"ERC721 symbol\"},\"returns\":{\"_0\":\"launchpeg New Launchpeg address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to grant\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,uint256,address)\":{\"details\":\"Uses clone factory pattern to save space\",\"params\":{\"_batchReveal\":\"Batch reveal address\",\"_flatLaunchpegImplementation\":\"FlatLaunchpeg contract to be cloned\",\"_joeFeeCollector\":\"Default fee collector\",\"_joeFeePercent\":\"Default fee percentage\",\"_launchpegImplementation\":\"Launchpeg contract to be cloned\"}},\"numLaunchpegs(uint256)\":{\"params\":{\"_launchpegType\":\"Type of Launchpeg to consider\"},\"returns\":{\"_0\":\"LaunchpegNumber The number of Launchpegs ever created\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the current owner\"}},\"pauseLaunchpeg(address)\":{\"params\":{\"_launchpeg\":\"Launchpeg address\"}},\"pendingOwner()\":{\"returns\":{\"_0\":\"The address of the current pending owner\"}},\"removeLaunchpegPauser(address)\":{\"params\":{\"_pauser\":\"Pauser address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to renounce\"}},\"revokeRole(bytes32,address)\":{\"details\":\"If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to revoke\"}},\"setBatchReveal(address)\":{\"params\":{\"_batchReveal\":\"New batch reveal\"}},\"setDefaultJoeFeeCollector(address)\":{\"params\":{\"_joeFeeCollector\":\"New collector address\"}},\"setDefaultJoeFeePercent(uint256)\":{\"params\":{\"_joeFeePercent\":\"New joeFeePercent\"}},\"setFlatLaunchpegImplementation(address)\":{\"params\":{\"_flatLaunchpegImplementation\":\"New flatLaunchpegImplementation\"}},\"setLaunchpegImplementation(address)\":{\"params\":{\"_launchpegImplementation\":\"New launchpegImplementation\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"stateVariables\":{\"joeFeePercent\":{\"details\":\"In basis points e.g 100 for 1%\"}},\"title\":\"Launchpeg Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLaunchpegPauser(address)\":{\"notice\":\"Grants LAUNCHPEG_PAUSER_ROLE to an address. The address will be able to pause any Launchpeg collection\"},\"allLaunchpegs(uint256,uint256)\":{\"notice\":\"Launchpegs address list by type of Launchpeg\"},\"batchReveal()\":{\"notice\":\"Batch reveal address\"},\"becomeOwner()\":{\"notice\":\"Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner\"},\"createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,bool)\":{\"notice\":\"FlatLaunchpeg creation\"},\"createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,bool)\":{\"notice\":\"Launchpeg creation\"},\"flatLaunchpegImplementation()\":{\"notice\":\"FlatLaunchpeg contract to be cloned\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants `role` to `account`.\"},\"initialize(address,address,address,uint256,address)\":{\"notice\":\"Initializes the Launchpeg factory\"},\"isLaunchpeg(uint256,address)\":{\"notice\":\"Checks if an address is stored as a Launchpeg, by type of Launchpeg\"},\"joeFeeCollector()\":{\"notice\":\"Default fee collector\"},\"joeFeePercent()\":{\"notice\":\"Default fee percentage\"},\"launchpegImplementation()\":{\"notice\":\"Launchpeg contract to be cloned\"},\"numLaunchpegs(uint256)\":{\"notice\":\"Returns the number of Launchpegs\"},\"owner()\":{\"notice\":\"Returns the address of the current owner\"},\"pauseLaunchpeg(address)\":{\"notice\":\"Pause specified Launchpeg\"},\"pendingOwner()\":{\"notice\":\"Returns the address of the current pending owner\"},\"removeLaunchpegPauser(address)\":{\"notice\":\"Revokes LAUNCHPEG_PAUSER_ROLE from an address. The address will not be able to pause any Launchpeg collection\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account.\"},\"revokePendingOwner()\":{\"notice\":\"Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes `role` from `account`.\"},\"setBatchReveal(address)\":{\"notice\":\"Set batch reveal address\"},\"setDefaultJoeFeeCollector(address)\":{\"notice\":\"Set default address to collect protocol fees\"},\"setDefaultJoeFeePercent(uint256)\":{\"notice\":\"Set percentage of protocol fees\"},\"setFlatLaunchpegImplementation(address)\":{\"notice\":\"Set address for flatLaunchpegImplementation\"},\"setLaunchpegImplementation(address)\":{\"notice\":\"Set address for launchpegImplementation\"},\"setPendingOwner(address)\":{\"notice\":\"Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}\"}},\"notice\":\"Factory that creates Launchpeg contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpegFactory.sol\":\"LaunchpegFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// LaunchpegFactory\\nerror LaunchpegFactory__InvalidBatchReveal();\\nerror LaunchpegFactory__InvalidImplementation();\\n\\n// Launchpeg\\nerror Launchpeg__AllowlistBeforePreMint();\\nerror Launchpeg__BatchRevealAlreadyInitialized();\\nerror Launchpeg__BatchRevealDisabled();\\nerror Launchpeg__BatchRevealNotInitialized();\\nerror Launchpeg__BatchRevealStarted();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__EndPriceGreaterThanStartPrice();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidBatchReveal();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidClaim();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxPerAddressDuringMint();\\nerror Launchpeg__InvalidOwner();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidQuantity();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__InvalidStartTime();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__NotInitialized();\\nerror Launchpeg__PreMintBeforeAuction();\\nerror Launchpeg__PublicSaleBeforeAllowlist();\\nerror Launchpeg__PublicSaleEndBeforePublicSaleStart();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WithdrawAVAXNotAvailable();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__AddressZero();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafePausableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\",\"keccak256\":\"0x4084055020c52307c521ff514e089d1ee73564308b0898aa347e72454a2b0f3a\",\"license\":\"MIT\"},\"contracts/LaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpegFactory.sol\\\";\\nimport \\\"./interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ISafePausableUpgradeable.sol\\\";\\nimport \\\"./utils/SafeAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./LaunchpegErrors.sol\\\";\\n\\n/// @title Launchpeg Factory\\n/// @author Trader Joe\\n/// @notice Factory that creates Launchpeg contracts\\ncontract LaunchpegFactory is\\n    ILaunchpegFactory,\\n    Initializable,\\n    SafeAccessControlEnumerableUpgradeable\\n{\\n    event LaunchpegCreated(\\n        address indexed launchpeg,\\n        string name,\\n        string symbol,\\n        address indexed projectOwner,\\n        address indexed royaltyReceiver,\\n        uint256 maxPerAddressDuringMint,\\n        uint256 collectionSize,\\n        uint256 amountForAuction,\\n        uint256 amountForAllowlist,\\n        uint256 amountForDevs\\n    );\\n\\n    event FlatLaunchpegCreated(\\n        address indexed flatLaunchpeg,\\n        string name,\\n        string symbol,\\n        address indexed projectOwner,\\n        address indexed royaltyReceiver,\\n        uint256 maxPerAddressDuringMint,\\n        uint256 collectionSize,\\n        uint256 amountForDevs,\\n        uint256 amountForAllowlist\\n    );\\n\\n    event SetLaunchpegImplementation(address indexed launchpegImplementation);\\n    event SetFlatLaunchpegImplementation(\\n        address indexed flatLaunchpegImplementation\\n    );\\n    event SetBatchReveal(address indexed batchReveal);\\n    event SetDefaultJoeFeePercent(uint256 joeFeePercent);\\n    event SetDefaultJoeFeeCollector(address indexed joeFeeCollector);\\n\\n    bytes32 public constant override LAUNCHPEG_PAUSER_ROLE =\\n        keccak256(\\\"LAUNCHPEG_PAUSER_ROLE\\\");\\n\\n    /// @notice Launchpeg contract to be cloned\\n    address public override launchpegImplementation;\\n    /// @notice FlatLaunchpeg contract to be cloned\\n    address public override flatLaunchpegImplementation;\\n\\n    /// @notice Default fee percentage\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public override joeFeePercent;\\n    /// @notice Default fee collector\\n    address public override joeFeeCollector;\\n\\n    /// @notice Checks if an address is stored as a Launchpeg, by type of Launchpeg\\n    mapping(uint256 => mapping(address => bool)) public override isLaunchpeg;\\n    /// @notice Launchpegs address list by type of Launchpeg\\n    mapping(uint256 => address[]) public override allLaunchpegs;\\n\\n    /// @notice Batch reveal address\\n    address public override batchReveal;\\n\\n    /// @notice Initializes the Launchpeg factory\\n    /// @dev Uses clone factory pattern to save space\\n    /// @param _launchpegImplementation Launchpeg contract to be cloned\\n    /// @param _flatLaunchpegImplementation FlatLaunchpeg contract to be cloned\\n    /// @param _batchReveal Batch reveal address\\n    /// @param _joeFeePercent Default fee percentage\\n    /// @param _joeFeeCollector Default fee collector\\n    function initialize(\\n        address _launchpegImplementation,\\n        address _flatLaunchpegImplementation,\\n        address _batchReveal,\\n        uint256 _joeFeePercent,\\n        address _joeFeeCollector\\n    ) public initializer {\\n        __SafeAccessControlEnumerable_init();\\n\\n        if (_launchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n        if (_flatLaunchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n        if (_batchReveal == address(0)) {\\n            revert LaunchpegFactory__InvalidBatchReveal();\\n        }\\n        if (_joeFeePercent > 10_000) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n\\n        launchpegImplementation = _launchpegImplementation;\\n        flatLaunchpegImplementation = _flatLaunchpegImplementation;\\n        batchReveal = _batchReveal;\\n        joeFeePercent = _joeFeePercent;\\n        joeFeeCollector = _joeFeeCollector;\\n    }\\n\\n    /// @notice Returns the number of Launchpegs\\n    /// @param _launchpegType Type of Launchpeg to consider\\n    /// @return LaunchpegNumber The number of Launchpegs ever created\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allLaunchpegs[_launchpegType].length;\\n    }\\n\\n    /// @notice Launchpeg creation\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _enableBatchReveal Flag to enable batch reveal for the collection\\n    /// @return launchpeg New Launchpeg address\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        bool _enableBatchReveal\\n    ) external override onlyOwner returns (address) {\\n        address launchpeg = Clones.clone(launchpegImplementation);\\n\\n        isLaunchpeg[0][launchpeg] = true;\\n        allLaunchpegs[0].push(launchpeg);\\n\\n        {\\n            IBaseLaunchpeg.CollectionData memory collectionData = IBaseLaunchpeg\\n                .CollectionData({\\n                    name: _name,\\n                    symbol: _symbol,\\n                    batchReveal: _enableBatchReveal ? batchReveal : address(0),\\n                    maxPerAddressDuringMint: _maxPerAddressDuringMint,\\n                    collectionSize: _collectionSize,\\n                    amountForDevs: _amountForDevs,\\n                    amountForAuction: _amountForAuction,\\n                    amountForAllowlist: _amountForAllowlist\\n                });\\n            IBaseLaunchpeg.CollectionOwnerData memory ownerData = IBaseLaunchpeg\\n                .CollectionOwnerData({\\n                    owner: msg.sender,\\n                    projectOwner: _projectOwner,\\n                    royaltyReceiver: _royaltyReceiver,\\n                    joeFeeCollector: joeFeeCollector,\\n                    joeFeePercent: joeFeePercent\\n                });\\n            ILaunchpeg(launchpeg).initialize(collectionData, ownerData);\\n        }\\n\\n        emit LaunchpegCreated(\\n            launchpeg,\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxPerAddressDuringMint,\\n            _collectionSize,\\n            _amountForAuction,\\n            _amountForAllowlist,\\n            _amountForDevs\\n        );\\n\\n        return launchpeg;\\n    }\\n\\n    /// @notice FlatLaunchpeg creation\\n    /// @param _name ERC721 name\\n    /// @param _symbol ERC721 symbol\\n    /// @param _projectOwner The project owner\\n    /// @param _royaltyReceiver Royalty fee collector\\n    /// @param _maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param _collectionSize The collection size (e.g 10000)\\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    /// @param _enableBatchReveal Flag to enable batch reveal for the collection\\n    /// @return flatLaunchpeg New FlatLaunchpeg address\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        bool _enableBatchReveal\\n    ) external override onlyOwner returns (address) {\\n        address flatLaunchpeg = Clones.clone(flatLaunchpegImplementation);\\n\\n        isLaunchpeg[1][flatLaunchpeg] = true;\\n        allLaunchpegs[1].push(flatLaunchpeg);\\n\\n        {\\n            IBaseLaunchpeg.CollectionData memory collectionData = IBaseLaunchpeg\\n                .CollectionData({\\n                    name: _name,\\n                    symbol: _symbol,\\n                    batchReveal: _enableBatchReveal ? batchReveal : address(0),\\n                    maxPerAddressDuringMint: _maxPerAddressDuringMint,\\n                    collectionSize: _collectionSize,\\n                    amountForDevs: _amountForDevs,\\n                    // set 0 auction amount for FlatLaunchpeg\\n                    amountForAuction: 0,\\n                    amountForAllowlist: _amountForAllowlist\\n                });\\n            IBaseLaunchpeg.CollectionOwnerData memory ownerData = IBaseLaunchpeg\\n                .CollectionOwnerData({\\n                    owner: msg.sender,\\n                    projectOwner: _projectOwner,\\n                    royaltyReceiver: _royaltyReceiver,\\n                    joeFeeCollector: joeFeeCollector,\\n                    joeFeePercent: joeFeePercent\\n                });\\n            IFlatLaunchpeg(flatLaunchpeg).initialize(collectionData, ownerData);\\n        }\\n\\n        emit FlatLaunchpegCreated(\\n            flatLaunchpeg,\\n            _name,\\n            _symbol,\\n            _projectOwner,\\n            _royaltyReceiver,\\n            _maxPerAddressDuringMint,\\n            _collectionSize,\\n            _amountForDevs,\\n            _amountForAllowlist\\n        );\\n\\n        return flatLaunchpeg;\\n    }\\n\\n    /// @notice Set address for launchpegImplementation\\n    /// @param _launchpegImplementation New launchpegImplementation\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_launchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n\\n        launchpegImplementation = _launchpegImplementation;\\n        emit SetLaunchpegImplementation(_launchpegImplementation);\\n    }\\n\\n    /// @notice Set address for flatLaunchpegImplementation\\n    /// @param _flatLaunchpegImplementation New flatLaunchpegImplementation\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external override onlyOwner {\\n        if (_flatLaunchpegImplementation == address(0)) {\\n            revert LaunchpegFactory__InvalidImplementation();\\n        }\\n\\n        flatLaunchpegImplementation = _flatLaunchpegImplementation;\\n        emit SetFlatLaunchpegImplementation(_flatLaunchpegImplementation);\\n    }\\n\\n    /// @notice Set batch reveal address\\n    /// @param _batchReveal New batch reveal\\n    function setBatchReveal(address _batchReveal) external override onlyOwner {\\n        if (_batchReveal == address(0)) {\\n            revert LaunchpegFactory__InvalidBatchReveal();\\n        }\\n\\n        batchReveal = _batchReveal;\\n        emit SetBatchReveal(_batchReveal);\\n    }\\n\\n    /// @notice Set percentage of protocol fees\\n    /// @param _joeFeePercent New joeFeePercent\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_joeFeePercent > 10_000) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n\\n        joeFeePercent = _joeFeePercent;\\n        emit SetDefaultJoeFeePercent(_joeFeePercent);\\n    }\\n\\n    /// @notice Set default address to collect protocol fees\\n    /// @param _joeFeeCollector New collector address\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_joeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n\\n        joeFeeCollector = _joeFeeCollector;\\n        emit SetDefaultJoeFeeCollector(_joeFeeCollector);\\n    }\\n\\n    /// @notice Grants LAUNCHPEG_PAUSER_ROLE to an address. The\\n    /// address will be able to pause any Launchpeg collection\\n    /// @param _pauser Pauser address\\n    function addLaunchpegPauser(address _pauser) external override {\\n        grantRole(LAUNCHPEG_PAUSER_ROLE, _pauser);\\n    }\\n\\n    /// @notice Revokes LAUNCHPEG_PAUSER_ROLE from an address. The\\n    /// address will not be able to pause any Launchpeg collection\\n    /// @param _pauser Pauser address\\n    function removeLaunchpegPauser(address _pauser)\\n        external\\n        override\\n    {\\n        revokeRole(LAUNCHPEG_PAUSER_ROLE, _pauser);\\n    }\\n\\n    /// @notice Pause specified Launchpeg\\n    /// @param _launchpeg Launchpeg address\\n    function pauseLaunchpeg(address _launchpeg)\\n        external\\n        override\\n        onlyOwnerOrRole(LAUNCHPEG_PAUSER_ROLE)\\n    {\\n        ISafePausableUpgradeable(_launchpeg).pause();\\n    }\\n}\\n\",\"keccak256\":\"0x63eb44012c4352a6e3da3eb3ff58e0d7eb424b36bd82fbd32ce3d419ad515033\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    /// @notice Collection data to initialize Launchpeg\\n    /// @param name ERC721 name\\n    /// @param symbol ERC721 symbol\\n    /// @param maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param collectionSize The collection size (e.g 10000)\\n    /// @param amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        address batchReveal;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 collectionSize;\\n        uint256 amountForDevs;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n    }\\n\\n    /// @notice Collection owner data to initialize Launchpeg\\n    /// @param owner The contract owner\\n    /// @param projectOwner The project owner\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param joeFeeCollector The address to which the fees on the sale will be sent\\n    /// @param joeFeePercent The fees collected by the fee collector on the sale benefits\\n    struct CollectionOwnerData {\\n        address owner;\\n        address projectOwner;\\n        address royaltyReceiver;\\n        address joeFeeCollector;\\n        uint256 joeFeePercent;\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external pure returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeBatchReveal(address _batchReveal) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 _quantity) external payable;\\n\\n    function claimPreMint() external;\\n\\n    function batchClaimPreMint(uint96 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userPendingPreMints(address owner) external view returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function numberMintedWithPreMint(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xd3b885fbd7c31bb5d12487bef4b34a08652ecfbfb0fe0ab2bb87b6a3fe80c289\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4f38566f1d19abf8482e5c1af31672449567c2b74fc7d7d4ee99c9c5134fa75e\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0xb8f6dd352d238910507700f03b2e8f3f843fb3267fcb369876af1f272a356332\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ILaunchpegFactory\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of LaunchpegFactory\\ninterface ILaunchpegFactory {\\n    function LAUNCHPEG_PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function launchpegImplementation() external view returns (address);\\n\\n    function flatLaunchpegImplementation() external view returns (address);\\n\\n    function batchReveal() external view returns (address);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function isLaunchpeg(uint256 _type, address _contract)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\\n        external\\n        view\\n        returns (address);\\n\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external;\\n\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\\n\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\\n\\n    function addLaunchpegPauser(address _pauser) external;\\n\\n    function removeLaunchpegPauser(address _pauser) external;\\n\\n    function pauseLaunchpeg(address _launchpeg) external;\\n}\\n\",\"keccak256\":\"0xc41cda9f99e4d8a562de2d7f6e7626eac17d5fbb11fd0c8deb3dae9b85298f94\",\"license\":\"MIT\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IPendingOwnableUpgradeable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0x4a8abc7df1039d8119c2f75e656bc1398bea4609199cb0a7e1d70eaa49e68733\",\"license\":\"MIT\"},\"contracts/interfaces/ISafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\ninterface ISafePausableUpgradeable is\\n    IAccessControlEnumerableUpgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    function PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ROLE() external pure returns (bytes32);\\n\\n    function PAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x81b77fc513e18d58e3f4a4dfb52b73d1ff47d60b2e16cbc04e2499a53213976d\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"../LaunchpegErrors.sol\\\";\\n\\n/**\\n * @title Pending Ownable\\n * @author Trader Joe\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions. The ownership of this contract is transferred using the\\n * push and pull pattern, the current owner set a `pendingOwner` using\\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\\n * Ownable contract.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {setPendingOwner} and {becomeOwner}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner\\n */\\nabstract contract PendingOwnableUpgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert PendingOwnableUpgradeable__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the pending owner.\\n     */\\n    modifier onlyPendingOwner() {\\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\\n            revert PendingOwnableUpgradeable__NotPendingOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\\n     */\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __ERC165_init();\\n        __PendingOwnable_init_unchained();\\n    }\\n\\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @return The address of the current owner\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current pending owner\\n     * @return The address of the current pending owner\\n     */\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets the pending owner address. This address will be able to become\\n     * the owner of this contract by calling {becomeOwner}\\n     */\\n    function setPendingOwner(address pendingOwner_)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (pendingOwner_ == address(0))\\n            revert PendingOwnableUpgradeable__AddressZero();\\n        if (_pendingOwner != address(0))\\n            revert PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    /**\\n     * @notice Revoke the pending owner address. This address will not be able to\\n     * call {becomeOwner} to become the owner anymore.\\n     * Can only be called by the owner\\n     */\\n    function revokePendingOwner() public virtual override onlyOwner {\\n        if (_pendingOwner == address(0))\\n            revert PendingOwnableUpgradeable__NoPendingOwner();\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * Can only be called by the pending owner\\n     */\\n    function becomeOwner() public virtual override onlyPendingOwner {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Push the new owner, it needs to be pulled to be effective.\\n     * Internal function without access restriction.\\n     * @param pendingOwner_ The address of the new pending owner\\n     */\\n    function _setPendingOwner(address pendingOwner_) internal virtual {\\n        _pendingOwner = pendingOwner_;\\n        emit PendingOwnerSet(pendingOwner_);\\n    }\\n}\\n\",\"keccak256\":\"0xc00538b6e845aa8c71e0b1b2c79d49f29520f0a3fab9469b328d1d5c67f12af7\",\"license\":\"MIT\"},\"contracts/utils/SafeAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"./PendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract SafeAccessControlEnumerableUpgradeable is\\n    PendingOwnableUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    /**\\n     * @dev Modifier that checks that the role is not the `DEFAULT_ADMIN_ROLE`\\n     */\\n    modifier roleIsNotDefaultAdmin(bytes32 role) {\\n        if (role == DEFAULT_ADMIN_ROLE)\\n            revert SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account is the `owner` or has a specific role\\n     */\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        if (msg.sender != owner() && !hasRole(role, msg.sender))\\n            revert SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n                role,\\n                msg.sender\\n            );\\n        _;\\n    }\\n\\n    function __SafeAccessControlEnumerable_init() internal onlyInitializing {\\n        __PendingOwnable_init();\\n        __AccessControlEnumerable_init();\\n\\n        __SafeAccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __SafeAccessControlEnumerable_init_unchained()\\n        internal\\n        onlyInitializing\\n    {}\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(PendingOwnableUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            PendingOwnableUpgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role granted can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to grant\\n     * @param account The address of the account\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     * @dev If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role revoked can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to revoke\\n     * @param account The address of the account\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     * @dev Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     * - the role renounced can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to renounce\\n     * @param account The address of the account\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        roleIsNotDefaultAdmin(role)\\n    {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @dev This also transfer the `DEFAULT_ADMIN` role to the new owner\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        if (_newOwner != address(0)) _grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\n\\n        super._transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x96a0962b07ed4ea2c7e2578755444e1c31cf4d698e2ae8c636f68ff2150edf3e\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f32806100206000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80637dd71ca411610125578063b264318c116100ad578063d39d153d1161007c578063d39d153d1461049a578063d547741f146104ad578063e30c3978146104c0578063e4b26d84146104d1578063f9dca989146104e457600080fd5b8063b264318c14610458578063c42069ec1461046b578063c5482fe31461047e578063ca15c8731461048757600080fd5b806391d14854116100f457806391d14854146103e9578063954e75c5146103fc578063a217fddf1461040f578063a56f016014610417578063abcc76171461042a57600080fd5b80637dd71ca41461039f5780638bb4ee24146103b25780638da5cb5b146103c55780639010d07c146103d657600080fd5b806347f0dcef116101a85780635c040443116101775780635c0404431461034957806367ab8a4e1461035c578063715018a614610364578063776f1b1c1461036c5780637cbe8d671461038c57600080fd5b806347f0dcef146102fb578063530b97a41461031057806353edb426146103235780635bb213761461033657600080fd5b80632f2ff15d116101e45780632f2ff15d146102af578063306ec748146102c257806336568abe146102d557806337daf4ca146102e857600080fd5b806301ffc9a71461021657806321cc16111461023e5780632265708a14610269578063248a9ca31461027e575b600080fd5b610229610224366004611abf565b6104ec565b60405190151581526020015b60405180910390f35b60d154610251906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b61027c610277366004611a58565b61050c565b005b6102a161028c366004611a58565b60009081526067602052604090206001015490565b604051908152602001610235565b61027c6102bd366004611a71565b610595565b6102516102d0366004611a9d565b610624565b61027c6102e3366004611a71565b61065c565b60cc54610251906001600160a01b031681565b6102a1600080516020611edd83398151915281565b61027c61031e3660046119fa565b61068a565b61027c6103313660046119df565b61085e565b60ce54610251906001600160a01b031681565b61027c6103573660046119df565b6108fa565b61027c610915565b61027c610975565b6102a161037a366004611a58565b600090815260d0602052604090205490565b61027c61039a3660046119df565b6109aa565b6102516103ad366004611ae9565b610a46565b60cb54610251906001600160a01b031681565b6065546001600160a01b0316610251565b6102516103e4366004611a9d565b610cca565b6102296103f7366004611a71565b610ce9565b61027c61040a3660046119df565b610d14565b6102a1600081565b61027c6104253660046119df565b610db0565b610229610438366004611a71565b60cf60209081526000928352604080842090915290825290205460ff1681565b61027c6104663660046119df565b610e6f565b61027c6104793660046119df565b610e87565b6102a160cd5481565b6102a1610495366004611a58565b610f0c565b6102516104a8366004611ba6565b610f23565b61027c6104bb366004611a71565b6111ab565b6066546001600160a01b0316610251565b61027c6104df3660046119df565b61122f565b61027c6112cb565b60006104f78261130a565b8061050657506105068261133f565b92915050565b6065546001600160a01b0316331461053757604051630202a8bf60e61b815260040160405180910390fd5b61271081111561055a576040516346b7d95d60e11b815260040160405180910390fd5b60cd8190556040518181527f4745ea19c676a0945640ec34419fe0680d70511432fc85a2d605840ab568e6329060200160405180910390a150565b81806105b45760405163e466584960e01b815260040160405180910390fd5b6000838152606760205260409020600101546065546001600160a01b031633148015906105e857506105e68133610ce9565b155b156106145760405163f9019a8d60e01b8152600481018290523360248201526044015b60405180910390fd5b61061e8484611364565b50505050565b60d0602052816000526040600020818154811061064057600080fd5b6000918252602090912001546001600160a01b03169150829050565b818061067b5760405163e466584960e01b815260040160405180910390fd5b6106858383611386565b505050565b600054610100900460ff166106a55760005460ff16156106a9565b303b155b61070c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060b565b600054610100900460ff1615801561072e576000805461ffff19166101011790555b610736611404565b6001600160a01b03861661075d57604051637c14876160e01b815260040160405180910390fd5b6001600160a01b03851661078457604051637c14876160e01b815260040160405180910390fd5b6001600160a01b0384166107ab5760405163600dd44b60e01b815260040160405180910390fd5b6127108311156107ce576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b0382166107f557604051631a1b629760e21b815260040160405180910390fd5b60cb80546001600160a01b038089166001600160a01b03199283161790925560cc805488841690831617905560d1805487841690831617905560cd85905560ce8054928516929091169190911790558015610856576000805461ff00191690555b505050505050565b6065546001600160a01b0316331461088957604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b0381166108b057604051631a1b629760e21b815260040160405180910390fd5b60ce80546001600160a01b0319166001600160a01b0383169081179091556040517fe641fd1cd94961ec6280816da07b756907548d41a011cad54123b611f984242f90600090a250565b610912600080516020611edd83398151915282610595565b50565b6065546001600160a01b0316331461094057604051630202a8bf60e61b815260040160405180910390fd5b6066546001600160a01b03166109695760405163128be5bf60e31b815260040160405180910390fd5b6109736000611443565b565b6065546001600160a01b031633146109a057604051630202a8bf60e61b815260040160405180910390fd5b610973600061148d565b6065546001600160a01b031633146109d557604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b0381166109fc57604051637c14876160e01b815260040160405180910390fd5b60cc80546001600160a01b0319166001600160a01b0383169081179091556040517f8549b2b39c65a9c4ca6b1037f64209a139ef0fc440cd914c14088dd2a368287c90600090a250565b6065546000906001600160a01b03163314610a7457604051630202a8bf60e61b815260040160405180910390fd5b60cc54600090610a8c906001600160a01b03166114cc565b6001600160a01b03811660008181527f9bb4860ae4018b7a63008e1d4c4f2ef74d5a095e46377c820dc3f962c67498e860209081526040808320805460ff1916600190811790915560d083527f77f2c0ceb108931ae1752982c6028a6c43603b39c3741036378ca346c95925298054918201815584527f52a14d2d083875cf73dfb5012a2e3cd61365916b4499c82a2ccbea5f587855140180546001600160a01b0319169094179093558251610100810184528f81529081018e90529293509190810185610b5b576000610b68565b60d1546001600160a01b03165b6001600160a01b031681526020018981526020018881526020018781526020016000815260200186815250905060006040518060a00160405280336001600160a01b031681526020018c6001600160a01b031681526020018b6001600160a01b0316815260200160ce60009054906101000a90046001600160a01b03166001600160a01b0316815260200160cd548152509050826001600160a01b031663b560ee6983836040518363ffffffff1660e01b8152600401610c29929190611da1565b600060405180830381600087803b158015610c4357600080fd5b505af1158015610c57573d6000803e3d6000fd5b505050505050876001600160a01b0316896001600160a01b0316826001600160a01b03167ff3ae30c363365bc3afc1d55a8019ee6e85f834f8cf0bc6e0e9b8ec3229d12de88e8e8c8c8c8c604051610cb496959493929190611cbb565b60405180910390a49a9950505050505050505050565b6000828152609960205260408120610ce29083611569565b9392505050565b60009182526067602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6065546001600160a01b03163314610d3f57604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b038116610d6657604051637c14876160e01b815260040160405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f8084d0fd0870539f0703b9cf74b2618239081b020be6da48c74b2a6ab670dcfb90600090a250565b600080516020611edd833981519152610dd16065546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015610df95750610df78133610ce9565b155b15610e205760405163f9019a8d60e01b81526004810182905233602482015260440161060b565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e5b57600080fd5b505af1158015610856573d6000803e3d6000fd5b610912600080516020611edd833981519152826111ab565b6065546001600160a01b03163314610eb257604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b038116610ed9576040516386850cc360e01b815260040160405180910390fd5b6066546001600160a01b031615610f035760405163033c108960e01b815260040160405180910390fd5b61091281611443565b600081815260996020526040812061050690611575565b6065546000906001600160a01b03163314610f5157604051630202a8bf60e61b815260040160405180910390fd5b60cb54600090610f69906001600160a01b03166114cc565b9050600160cf60008081526020019081526020016000206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060d06000808152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006040518061010001604052808e81526020018d81526020018561103a576000611047565b60d1546001600160a01b03165b6001600160a01b031681526020018a815260200189815260200186815260200188815260200187815250905060006040518060a00160405280336001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b0316815260200160ce60009054906101000a90046001600160a01b03166001600160a01b0316815260200160cd548152509050826001600160a01b031663b560ee6983836040518363ffffffff1660e01b8152600401611107929190611da1565b600060405180830381600087803b15801561112157600080fd5b505af1158015611135573d6000803e3d6000fd5b505050505050886001600160a01b03168a6001600160a01b0316826001600160a01b03167f1f9d8b5611391992ec4de203bc1a4f6ac6efcf804eaa81659960d389ecf444b98f8f8d8d8d8d8d6040516111949796959493929190611d06565b60405180910390a49b9a5050505050505050505050565b81806111ca5760405163e466584960e01b815260040160405180910390fd5b6000838152606760205260409020600101546065546001600160a01b031633148015906111fe57506111fc8133610ce9565b155b156112255760405163f9019a8d60e01b81526004810182905233602482015260440161060b565b61061e848461157f565b6065546001600160a01b0316331461125a57604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b0381166112815760405163600dd44b60e01b815260040160405180910390fd5b60d180546001600160a01b0319166001600160a01b0383169081179091556040517f05f6bad02832e7104453b7aac929b5da9f741aa594ab6e603786c38059af4f7190600090a250565b6066546001600160a01b0316331415806112e3575033155b156113015760405163134aa98760e31b815260040160405180910390fd5b6109733361148d565b60006001600160e01b031982166322d7505760e11b148061050657506301ffc9a760e01b6001600160e01b0319831614610506565b60006001600160e01b03198216635a05180f60e01b14806105065750610506826115a1565b61136e82826115c6565b6000828152609960205260409020610685908261164c565b6001600160a01b03811633146113f65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161060b565b611400828261157f565b5050565b600054610100900460ff1661142b5760405162461bcd60e51b815260040161060b90611d56565b611433611661565b61143b611698565b610973611698565b606680546001600160a01b0319166001600160a01b0383169081179091556040517f68f49b346b94582a8b5f9d10e3fe3365318fe8f191ff8dce7c59c6cad06b02f590600090a250565b6114a960006114a46065546001600160a01b031690565b61157f565b6001600160a01b038116156114c3576114c3600082611364565b610912816116bf565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166115645760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161060b565b919050565b6000610ce2838361171c565b6000610506825490565b6115898282611746565b600082815260996020526040902061068590826117ad565b60006001600160e01b03198216637965db0b60e01b148061050657506105068261130a565b6115d08282610ce9565b6114005760008281526067602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610ce2836001600160a01b0384166117c2565b600054610100900460ff166116885760405162461bcd60e51b815260040161060b90611d56565b611690611698565b610973611811565b600054610100900460ff166109735760405162461bcd60e51b815260040161060b90611d56565b606580546001600160a01b038381166001600160a01b03198084168217909455606680549094169093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082600001828154811061173357611733611eb0565b9060005260206000200154905092915050565b6117508282610ce9565b156114005760008281526067602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ce2836001600160a01b038416611838565b600081815260018301602052604081205461180957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610506565b506000610506565b600054610100900460ff166113015760405162461bcd60e51b815260040161060b90611d56565b6000818152600183016020526040812054801561192157600061185c600183611e75565b855490915060009061187090600190611e75565b90508181146118d557600086600001828154811061189057611890611eb0565b90600052602060002001549050808760000184815481106118b3576118b3611eb0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118e6576118e6611e9a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610506565b6000915050610506565b80356001600160a01b038116811461156457600080fd5b8035801515811461156457600080fd5b600082601f83011261196357600080fd5b813567ffffffffffffffff8082111561197e5761197e611ec6565b604051601f8301601f19908116603f011681019082821181831017156119a6576119a6611ec6565b816040528381528660208588010111156119bf57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156119f157600080fd5b610ce28261192b565b600080600080600060a08688031215611a1257600080fd5b611a1b8661192b565b9450611a296020870161192b565b9350611a376040870161192b565b925060608601359150611a4c6080870161192b565b90509295509295909350565b600060208284031215611a6a57600080fd5b5035919050565b60008060408385031215611a8457600080fd5b82359150611a946020840161192b565b90509250929050565b60008060408385031215611ab057600080fd5b50508035926020909101359150565b600060208284031215611ad157600080fd5b81356001600160e01b031981168114610ce257600080fd5b60008060008060008060008060006101208a8c031215611b0857600080fd5b893567ffffffffffffffff80821115611b2057600080fd5b611b2c8d838e01611952565b9a5060208c0135915080821115611b4257600080fd5b50611b4f8c828d01611952565b985050611b5e60408b0161192b565b9650611b6c60608b0161192b565b955060808a0135945060a08a0135935060c08a0135925060e08a01359150611b976101008b01611942565b90509295985092959850929598565b6000806000806000806000806000806101408b8d031215611bc657600080fd5b8a3567ffffffffffffffff80821115611bde57600080fd5b611bea8e838f01611952565b9b5060208d0135915080821115611c0057600080fd5b50611c0d8d828e01611952565b995050611c1c60408c0161192b565b9750611c2a60608c0161192b565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b01359150611c5d6101208c01611942565b90509295989b9194979a5092959850565b6000815180845260005b81811015611c9457602081850181015186830182015201611c78565b81811115611ca6576000602083870101525b50601f01601f19169290920160200192915050565b60c081526000611cce60c0830189611c6e565b8281036020840152611ce08189611c6e565b9150508560408301528460608301528360808301528260a0830152979650505050505050565b60e081526000611d1960e083018a611c6e565b8281036020840152611d2b818a611c6e565b604084019890985250506060810194909452608084019290925260a083015260c09091015292915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60c08152600083516101008060c0850152611dc06101c0850183611c6e565b9150602086015160bf198584030160e0860152611ddd8382611c6e565b60408801516001600160a01b031692860192909252506060860151610120850152608086015161014085015260a086015161016085015260c086015161018085015260e08601516101a08501529150610ce29050602083018480516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015190911690830152608090810151910152565b600082821015611e9557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe7dbc69cd9b785cb1ad056f848b1d2b371afd61d9e084183209988bd117c24f90a2646970667358221220c46980e167b42126610397d8d259597f0e14d932642d3bdd38564a1286df609464736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80637dd71ca411610125578063b264318c116100ad578063d39d153d1161007c578063d39d153d1461049a578063d547741f146104ad578063e30c3978146104c0578063e4b26d84146104d1578063f9dca989146104e457600080fd5b8063b264318c14610458578063c42069ec1461046b578063c5482fe31461047e578063ca15c8731461048757600080fd5b806391d14854116100f457806391d14854146103e9578063954e75c5146103fc578063a217fddf1461040f578063a56f016014610417578063abcc76171461042a57600080fd5b80637dd71ca41461039f5780638bb4ee24146103b25780638da5cb5b146103c55780639010d07c146103d657600080fd5b806347f0dcef116101a85780635c040443116101775780635c0404431461034957806367ab8a4e1461035c578063715018a614610364578063776f1b1c1461036c5780637cbe8d671461038c57600080fd5b806347f0dcef146102fb578063530b97a41461031057806353edb426146103235780635bb213761461033657600080fd5b80632f2ff15d116101e45780632f2ff15d146102af578063306ec748146102c257806336568abe146102d557806337daf4ca146102e857600080fd5b806301ffc9a71461021657806321cc16111461023e5780632265708a14610269578063248a9ca31461027e575b600080fd5b610229610224366004611abf565b6104ec565b60405190151581526020015b60405180910390f35b60d154610251906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b61027c610277366004611a58565b61050c565b005b6102a161028c366004611a58565b60009081526067602052604090206001015490565b604051908152602001610235565b61027c6102bd366004611a71565b610595565b6102516102d0366004611a9d565b610624565b61027c6102e3366004611a71565b61065c565b60cc54610251906001600160a01b031681565b6102a1600080516020611edd83398151915281565b61027c61031e3660046119fa565b61068a565b61027c6103313660046119df565b61085e565b60ce54610251906001600160a01b031681565b61027c6103573660046119df565b6108fa565b61027c610915565b61027c610975565b6102a161037a366004611a58565b600090815260d0602052604090205490565b61027c61039a3660046119df565b6109aa565b6102516103ad366004611ae9565b610a46565b60cb54610251906001600160a01b031681565b6065546001600160a01b0316610251565b6102516103e4366004611a9d565b610cca565b6102296103f7366004611a71565b610ce9565b61027c61040a3660046119df565b610d14565b6102a1600081565b61027c6104253660046119df565b610db0565b610229610438366004611a71565b60cf60209081526000928352604080842090915290825290205460ff1681565b61027c6104663660046119df565b610e6f565b61027c6104793660046119df565b610e87565b6102a160cd5481565b6102a1610495366004611a58565b610f0c565b6102516104a8366004611ba6565b610f23565b61027c6104bb366004611a71565b6111ab565b6066546001600160a01b0316610251565b61027c6104df3660046119df565b61122f565b61027c6112cb565b60006104f78261130a565b8061050657506105068261133f565b92915050565b6065546001600160a01b0316331461053757604051630202a8bf60e61b815260040160405180910390fd5b61271081111561055a576040516346b7d95d60e11b815260040160405180910390fd5b60cd8190556040518181527f4745ea19c676a0945640ec34419fe0680d70511432fc85a2d605840ab568e6329060200160405180910390a150565b81806105b45760405163e466584960e01b815260040160405180910390fd5b6000838152606760205260409020600101546065546001600160a01b031633148015906105e857506105e68133610ce9565b155b156106145760405163f9019a8d60e01b8152600481018290523360248201526044015b60405180910390fd5b61061e8484611364565b50505050565b60d0602052816000526040600020818154811061064057600080fd5b6000918252602090912001546001600160a01b03169150829050565b818061067b5760405163e466584960e01b815260040160405180910390fd5b6106858383611386565b505050565b600054610100900460ff166106a55760005460ff16156106a9565b303b155b61070c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060b565b600054610100900460ff1615801561072e576000805461ffff19166101011790555b610736611404565b6001600160a01b03861661075d57604051637c14876160e01b815260040160405180910390fd5b6001600160a01b03851661078457604051637c14876160e01b815260040160405180910390fd5b6001600160a01b0384166107ab5760405163600dd44b60e01b815260040160405180910390fd5b6127108311156107ce576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b0382166107f557604051631a1b629760e21b815260040160405180910390fd5b60cb80546001600160a01b038089166001600160a01b03199283161790925560cc805488841690831617905560d1805487841690831617905560cd85905560ce8054928516929091169190911790558015610856576000805461ff00191690555b505050505050565b6065546001600160a01b0316331461088957604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b0381166108b057604051631a1b629760e21b815260040160405180910390fd5b60ce80546001600160a01b0319166001600160a01b0383169081179091556040517fe641fd1cd94961ec6280816da07b756907548d41a011cad54123b611f984242f90600090a250565b610912600080516020611edd83398151915282610595565b50565b6065546001600160a01b0316331461094057604051630202a8bf60e61b815260040160405180910390fd5b6066546001600160a01b03166109695760405163128be5bf60e31b815260040160405180910390fd5b6109736000611443565b565b6065546001600160a01b031633146109a057604051630202a8bf60e61b815260040160405180910390fd5b610973600061148d565b6065546001600160a01b031633146109d557604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b0381166109fc57604051637c14876160e01b815260040160405180910390fd5b60cc80546001600160a01b0319166001600160a01b0383169081179091556040517f8549b2b39c65a9c4ca6b1037f64209a139ef0fc440cd914c14088dd2a368287c90600090a250565b6065546000906001600160a01b03163314610a7457604051630202a8bf60e61b815260040160405180910390fd5b60cc54600090610a8c906001600160a01b03166114cc565b6001600160a01b03811660008181527f9bb4860ae4018b7a63008e1d4c4f2ef74d5a095e46377c820dc3f962c67498e860209081526040808320805460ff1916600190811790915560d083527f77f2c0ceb108931ae1752982c6028a6c43603b39c3741036378ca346c95925298054918201815584527f52a14d2d083875cf73dfb5012a2e3cd61365916b4499c82a2ccbea5f587855140180546001600160a01b0319169094179093558251610100810184528f81529081018e90529293509190810185610b5b576000610b68565b60d1546001600160a01b03165b6001600160a01b031681526020018981526020018881526020018781526020016000815260200186815250905060006040518060a00160405280336001600160a01b031681526020018c6001600160a01b031681526020018b6001600160a01b0316815260200160ce60009054906101000a90046001600160a01b03166001600160a01b0316815260200160cd548152509050826001600160a01b031663b560ee6983836040518363ffffffff1660e01b8152600401610c29929190611da1565b600060405180830381600087803b158015610c4357600080fd5b505af1158015610c57573d6000803e3d6000fd5b505050505050876001600160a01b0316896001600160a01b0316826001600160a01b03167ff3ae30c363365bc3afc1d55a8019ee6e85f834f8cf0bc6e0e9b8ec3229d12de88e8e8c8c8c8c604051610cb496959493929190611cbb565b60405180910390a49a9950505050505050505050565b6000828152609960205260408120610ce29083611569565b9392505050565b60009182526067602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6065546001600160a01b03163314610d3f57604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b038116610d6657604051637c14876160e01b815260040160405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f8084d0fd0870539f0703b9cf74b2618239081b020be6da48c74b2a6ab670dcfb90600090a250565b600080516020611edd833981519152610dd16065546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015610df95750610df78133610ce9565b155b15610e205760405163f9019a8d60e01b81526004810182905233602482015260440161060b565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e5b57600080fd5b505af1158015610856573d6000803e3d6000fd5b610912600080516020611edd833981519152826111ab565b6065546001600160a01b03163314610eb257604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b038116610ed9576040516386850cc360e01b815260040160405180910390fd5b6066546001600160a01b031615610f035760405163033c108960e01b815260040160405180910390fd5b61091281611443565b600081815260996020526040812061050690611575565b6065546000906001600160a01b03163314610f5157604051630202a8bf60e61b815260040160405180910390fd5b60cb54600090610f69906001600160a01b03166114cc565b9050600160cf60008081526020019081526020016000206000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060d06000808152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006040518061010001604052808e81526020018d81526020018561103a576000611047565b60d1546001600160a01b03165b6001600160a01b031681526020018a815260200189815260200186815260200188815260200187815250905060006040518060a00160405280336001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b0316815260200160ce60009054906101000a90046001600160a01b03166001600160a01b0316815260200160cd548152509050826001600160a01b031663b560ee6983836040518363ffffffff1660e01b8152600401611107929190611da1565b600060405180830381600087803b15801561112157600080fd5b505af1158015611135573d6000803e3d6000fd5b505050505050886001600160a01b03168a6001600160a01b0316826001600160a01b03167f1f9d8b5611391992ec4de203bc1a4f6ac6efcf804eaa81659960d389ecf444b98f8f8d8d8d8d8d6040516111949796959493929190611d06565b60405180910390a49b9a5050505050505050505050565b81806111ca5760405163e466584960e01b815260040160405180910390fd5b6000838152606760205260409020600101546065546001600160a01b031633148015906111fe57506111fc8133610ce9565b155b156112255760405163f9019a8d60e01b81526004810182905233602482015260440161060b565b61061e848461157f565b6065546001600160a01b0316331461125a57604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b0381166112815760405163600dd44b60e01b815260040160405180910390fd5b60d180546001600160a01b0319166001600160a01b0383169081179091556040517f05f6bad02832e7104453b7aac929b5da9f741aa594ab6e603786c38059af4f7190600090a250565b6066546001600160a01b0316331415806112e3575033155b156113015760405163134aa98760e31b815260040160405180910390fd5b6109733361148d565b60006001600160e01b031982166322d7505760e11b148061050657506301ffc9a760e01b6001600160e01b0319831614610506565b60006001600160e01b03198216635a05180f60e01b14806105065750610506826115a1565b61136e82826115c6565b6000828152609960205260409020610685908261164c565b6001600160a01b03811633146113f65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161060b565b611400828261157f565b5050565b600054610100900460ff1661142b5760405162461bcd60e51b815260040161060b90611d56565b611433611661565b61143b611698565b610973611698565b606680546001600160a01b0319166001600160a01b0383169081179091556040517f68f49b346b94582a8b5f9d10e3fe3365318fe8f191ff8dce7c59c6cad06b02f590600090a250565b6114a960006114a46065546001600160a01b031690565b61157f565b6001600160a01b038116156114c3576114c3600082611364565b610912816116bf565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166115645760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161060b565b919050565b6000610ce2838361171c565b6000610506825490565b6115898282611746565b600082815260996020526040902061068590826117ad565b60006001600160e01b03198216637965db0b60e01b148061050657506105068261130a565b6115d08282610ce9565b6114005760008281526067602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610ce2836001600160a01b0384166117c2565b600054610100900460ff166116885760405162461bcd60e51b815260040161060b90611d56565b611690611698565b610973611811565b600054610100900460ff166109735760405162461bcd60e51b815260040161060b90611d56565b606580546001600160a01b038381166001600160a01b03198084168217909455606680549094169093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082600001828154811061173357611733611eb0565b9060005260206000200154905092915050565b6117508282610ce9565b156114005760008281526067602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610ce2836001600160a01b038416611838565b600081815260018301602052604081205461180957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610506565b506000610506565b600054610100900460ff166113015760405162461bcd60e51b815260040161060b90611d56565b6000818152600183016020526040812054801561192157600061185c600183611e75565b855490915060009061187090600190611e75565b90508181146118d557600086600001828154811061189057611890611eb0565b90600052602060002001549050808760000184815481106118b3576118b3611eb0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118e6576118e6611e9a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610506565b6000915050610506565b80356001600160a01b038116811461156457600080fd5b8035801515811461156457600080fd5b600082601f83011261196357600080fd5b813567ffffffffffffffff8082111561197e5761197e611ec6565b604051601f8301601f19908116603f011681019082821181831017156119a6576119a6611ec6565b816040528381528660208588010111156119bf57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156119f157600080fd5b610ce28261192b565b600080600080600060a08688031215611a1257600080fd5b611a1b8661192b565b9450611a296020870161192b565b9350611a376040870161192b565b925060608601359150611a4c6080870161192b565b90509295509295909350565b600060208284031215611a6a57600080fd5b5035919050565b60008060408385031215611a8457600080fd5b82359150611a946020840161192b565b90509250929050565b60008060408385031215611ab057600080fd5b50508035926020909101359150565b600060208284031215611ad157600080fd5b81356001600160e01b031981168114610ce257600080fd5b60008060008060008060008060006101208a8c031215611b0857600080fd5b893567ffffffffffffffff80821115611b2057600080fd5b611b2c8d838e01611952565b9a5060208c0135915080821115611b4257600080fd5b50611b4f8c828d01611952565b985050611b5e60408b0161192b565b9650611b6c60608b0161192b565b955060808a0135945060a08a0135935060c08a0135925060e08a01359150611b976101008b01611942565b90509295985092959850929598565b6000806000806000806000806000806101408b8d031215611bc657600080fd5b8a3567ffffffffffffffff80821115611bde57600080fd5b611bea8e838f01611952565b9b5060208d0135915080821115611c0057600080fd5b50611c0d8d828e01611952565b995050611c1c60408c0161192b565b9750611c2a60608c0161192b565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b01359150611c5d6101208c01611942565b90509295989b9194979a5092959850565b6000815180845260005b81811015611c9457602081850181015186830182015201611c78565b81811115611ca6576000602083870101525b50601f01601f19169290920160200192915050565b60c081526000611cce60c0830189611c6e565b8281036020840152611ce08189611c6e565b9150508560408301528460608301528360808301528260a0830152979650505050505050565b60e081526000611d1960e083018a611c6e565b8281036020840152611d2b818a611c6e565b604084019890985250506060810194909452608084019290925260a083015260c09091015292915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60c08152600083516101008060c0850152611dc06101c0850183611c6e565b9150602086015160bf198584030160e0860152611ddd8382611c6e565b60408801516001600160a01b031692860192909252506060860151610120850152608086015161014085015260a086015161016085015260c086015161018085015260e08601516101a08501529150610ce29050602083018480516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015190911690830152608090810151910152565b600082821015611e9557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe7dbc69cd9b785cb1ad056f848b1d2b371afd61d9e084183209988bd117c24f90a2646970667358221220c46980e167b42126610397d8d259597f0e14d932642d3bdd38564a1286df609464736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "addLaunchpegPauser(address)": {
        "params": {
          "_pauser": "Pauser address"
        }
      },
      "createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,bool)": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_collectionSize": "The collection size (e.g 10000)",
          "_enableBatchReveal": "Flag to enable batch reveal for the collection",
          "_maxPerAddressDuringMint": "Max amount of NFTs an address can mint in public phases",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        },
        "returns": {
          "_0": "flatLaunchpeg New FlatLaunchpeg address"
        }
      },
      "createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,bool)": {
        "params": {
          "_amountForAllowlist": "Amount of NFTs available for the allowlist mint (e.g 1000)",
          "_amountForAuction": "Amount of NFTs available for the auction (e.g 8000)",
          "_amountForDevs": "Amount of NFTs reserved for `projectOwner` (e.g 200)",
          "_collectionSize": "The collection size (e.g 10000)",
          "_enableBatchReveal": "Flag to enable batch reveal for the collection",
          "_maxPerAddressDuringMint": "Max amount of NFTs an address can mint in public phases",
          "_name": "ERC721 name",
          "_projectOwner": "The project owner",
          "_royaltyReceiver": "Royalty fee collector",
          "_symbol": "ERC721 symbol"
        },
        "returns": {
          "_0": "launchpeg New Launchpeg address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,uint256,address)": {
        "details": "Uses clone factory pattern to save space",
        "params": {
          "_batchReveal": "Batch reveal address",
          "_flatLaunchpegImplementation": "FlatLaunchpeg contract to be cloned",
          "_joeFeeCollector": "Default fee collector",
          "_joeFeePercent": "Default fee percentage",
          "_launchpegImplementation": "Launchpeg contract to be cloned"
        }
      },
      "numLaunchpegs(uint256)": {
        "params": {
          "_launchpegType": "Type of Launchpeg to consider"
        },
        "returns": {
          "_0": "LaunchpegNumber The number of Launchpegs ever created"
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the current owner"
        }
      },
      "pauseLaunchpeg(address)": {
        "params": {
          "_launchpeg": "Launchpeg address"
        }
      },
      "pendingOwner()": {
        "returns": {
          "_0": "The address of the current pending owner"
        }
      },
      "removeLaunchpegPauser(address)": {
        "params": {
          "_pauser": "Pauser address"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to renounce"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to revoke"
        }
      },
      "setBatchReveal(address)": {
        "params": {
          "_batchReveal": "New batch reveal"
        }
      },
      "setDefaultJoeFeeCollector(address)": {
        "params": {
          "_joeFeeCollector": "New collector address"
        }
      },
      "setDefaultJoeFeePercent(uint256)": {
        "params": {
          "_joeFeePercent": "New joeFeePercent"
        }
      },
      "setFlatLaunchpegImplementation(address)": {
        "params": {
          "_flatLaunchpegImplementation": "New flatLaunchpegImplementation"
        }
      },
      "setLaunchpegImplementation(address)": {
        "params": {
          "_launchpegImplementation": "New launchpegImplementation"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "stateVariables": {
      "joeFeePercent": {
        "details": "In basis points e.g 100 for 1%"
      }
    },
    "title": "Launchpeg Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLaunchpegPauser(address)": {
        "notice": "Grants LAUNCHPEG_PAUSER_ROLE to an address. The address will be able to pause any Launchpeg collection"
      },
      "allLaunchpegs(uint256,uint256)": {
        "notice": "Launchpegs address list by type of Launchpeg"
      },
      "batchReveal()": {
        "notice": "Batch reveal address"
      },
      "becomeOwner()": {
        "notice": "Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner"
      },
      "createFlatLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,bool)": {
        "notice": "FlatLaunchpeg creation"
      },
      "createLaunchpeg(string,string,address,address,uint256,uint256,uint256,uint256,uint256,bool)": {
        "notice": "Launchpeg creation"
      },
      "flatLaunchpegImplementation()": {
        "notice": "FlatLaunchpeg contract to be cloned"
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants `role` to `account`."
      },
      "initialize(address,address,address,uint256,address)": {
        "notice": "Initializes the Launchpeg factory"
      },
      "isLaunchpeg(uint256,address)": {
        "notice": "Checks if an address is stored as a Launchpeg, by type of Launchpeg"
      },
      "joeFeeCollector()": {
        "notice": "Default fee collector"
      },
      "joeFeePercent()": {
        "notice": "Default fee percentage"
      },
      "launchpegImplementation()": {
        "notice": "Launchpeg contract to be cloned"
      },
      "numLaunchpegs(uint256)": {
        "notice": "Returns the number of Launchpegs"
      },
      "owner()": {
        "notice": "Returns the address of the current owner"
      },
      "pauseLaunchpeg(address)": {
        "notice": "Pause specified Launchpeg"
      },
      "pendingOwner()": {
        "notice": "Returns the address of the current pending owner"
      },
      "removeLaunchpegPauser(address)": {
        "notice": "Revokes LAUNCHPEG_PAUSER_ROLE from an address. The address will not be able to pause any Launchpeg collection"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account."
      },
      "revokePendingOwner()": {
        "notice": "Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes `role` from `account`."
      },
      "setBatchReveal(address)": {
        "notice": "Set batch reveal address"
      },
      "setDefaultJoeFeeCollector(address)": {
        "notice": "Set default address to collect protocol fees"
      },
      "setDefaultJoeFeePercent(uint256)": {
        "notice": "Set percentage of protocol fees"
      },
      "setFlatLaunchpegImplementation(address)": {
        "notice": "Set address for flatLaunchpegImplementation"
      },
      "setLaunchpegImplementation(address)": {
        "notice": "Set address for launchpegImplementation"
      },
      "setPendingOwner(address)": {
        "notice": "Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}"
      }
    },
    "notice": "Factory that creates Launchpeg contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 810,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 813,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1710,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1957,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11452,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 11454,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 273,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)268_storage)"
      },
      {
        "astId": 561,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2282_storage)"
      },
      {
        "astId": 232,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7965,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "launchpegImplementation",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 7969,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "flatLaunchpegImplementation",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 7973,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "joeFeePercent",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 7977,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "joeFeeCollector",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 7985,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "isLaunchpeg",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7992,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "allLaunchpegs",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7996,
        "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
        "label": "batchReveal",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2282_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2282_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)268_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(AddressSet)2282_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2281,
            "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1981_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)268_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 267,
            "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1981_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1976,
            "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1980,
            "contract": "contracts/LaunchpegFactory.sol:LaunchpegFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}