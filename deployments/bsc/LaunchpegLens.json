{
  "address": "0xce7a5026c27df8FeC436969E45BF3C0Ad94Bd57f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "_launchpegFactoryV1",
          "type": "address"
        },
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "_launchpegFactoryV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidLaunchpegType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidLaunchpegVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPerAddressDuringMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMintedWithPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "projectOwners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedByDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawAVAXStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "launchpegBalanceAVAX",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ProjectOwnerData",
              "name": "projectOwnerData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenSet",
                  "type": "uint256[]"
                },
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ERC1155SingleBundleData",
              "name": "erc1155SingleBundleData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "getLaunchpegType",
      "outputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "enum LaunchpegLens.LaunchpegVersion",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "enum LaunchpegLens.LaunchpegVersion",
          "name": "_version",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegsByTypeAndVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPerAddressDuringMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMintedWithPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "projectOwners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedByDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawAVAXStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "launchpegBalanceAVAX",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ProjectOwnerData",
              "name": "projectOwnerData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenSet",
                  "type": "uint256[]"
                },
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ERC1155SingleBundleData",
              "name": "erc1155SingleBundleData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactoryV1",
      "outputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactoryV2",
      "outputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x675220dee24a5d7eeac2c9b38d260666c39251ba7deee6b7b72443212b7c2698",
  "receipt": {
    "to": null,
    "from": "0x88c74Ef80Dd5724f96b6d9e6d48464ffa8c7A095",
    "contractAddress": "0xce7a5026c27df8FeC436969E45BF3C0Ad94Bd57f",
    "transactionIndex": 40,
    "gasUsed": "3316812",
    "logsBloom": "0x
    "blockHash": "0x30ee01893448c9e0491744186751e11128933b0d2fbb20c4ebb7cc05521b2a08",
    "transactionHash": "0x675220dee24a5d7eeac2c9b38d260666c39251ba7deee6b7b72443212b7c2698",
    "logs": [],
    "blockNumber": 27226063,
    "cumulativeGasUsed": "5867267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x89297078202199faB30E4cF73579f97793174245",
    "0xd4f4aDcBa388FF16f0D1CDABA2038734a9CAbD10",
    "0xC01f9C8Bd9272160a9A48eC62ee71E2be291DE30"
  ],
  "numDeployments": 2,
  "solcInputHash": "c0c857967c3bfd4b475d7beba1d60f90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"_launchpegFactoryV1\",\"type\":\"address\"},{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"_launchpegFactoryV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidLaunchpegType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidLaunchpegVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMintedWithPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"projectOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedByDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchpegBalanceAVAX\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ProjectOwnerData\",\"name\":\"projectOwnerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenSet\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ERC1155SingleBundleData\",\"name\":\"erc1155SingleBundleData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getLaunchpegType\",\"outputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegVersion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegVersion\",\"name\":\"_version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegsByTypeAndVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMintedWithPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"projectOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedByDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchpegBalanceAVAX\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ProjectOwnerData\",\"name\":\"projectOwnerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenSet\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ERC1155SingleBundleData\",\"name\":\"erc1155SingleBundleData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactoryV1\",\"outputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactoryV2\",\"outputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"LaunchpegLens constructor\",\"params\":{\"_batchReveal\":\"BatchReveal address\",\"_launchpegFactoryV1\":\"LaunchpegFactory V1\",\"_launchpegFactoryV2\":\"LaunchpegFactory V2\"}},\"getLaunchpegData(address,address)\":{\"params\":{\"_launchpeg\":\"Contract address to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\"},\"returns\":{\"_0\":\"LensData Contract data\"}},\"getLaunchpegType(address)\":{\"params\":{\"_contract\":\"Contract address to consider\"},\"returns\":{\"_0\":\"LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\"}},\"getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)\":{\"params\":{\"_limit\":\"Last Launchpeg index to fetch\",\"_number\":\"Number of Launchpeg to fetch\",\"_type\":\"Type of Launchpeg to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\",\"_version\":\"Launchpeg version\"},\"returns\":{\"_0\":\"LensDataList List of contracts datas, in descending order\"}}},\"title\":\"Launchpeg Lens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchReveal()\":{\"notice\":\"BatchReveal address\"},\"getLaunchpegData(address,address)\":{\"notice\":\"Fetch Launchpeg data from the provided address\"},\"getLaunchpegType(address)\":{\"notice\":\"Gets the type and version of Launchpeg\"},\"getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)\":{\"notice\":\"Fetch Launchpeg data by type and version\"},\"launchpegFactoryV1()\":{\"notice\":\"LaunchpegFactory V1\"},\"launchpegFactoryV2()\":{\"notice\":\"LaunchpegFactory V2\"}},\"notice\":\"Helper contract to fetch launchpegs data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpegLens.sol\":\"LaunchpegLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":60},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(\\n        string memory name_,\\n        string memory symbol_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (\\n            to.isContract() &&\\n            !_checkContractOnERC721Received(from, to, tokenId, _data)\\n        ) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (\\n                        !_checkContractOnERC721Received(\\n                            address(0),\\n                            to,\\n                            updatedIndex++,\\n                            _data\\n                        )\\n                    ) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n        address from = prevOwnership.addr;\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            IERC721ReceiverUpgradeable(to).onERC721Received(\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        returns (bytes4 retval) {\\n            return\\n                retval ==\\n                IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x69dd0ac627e8ebeddbd96ad094f2da48442ae79e339c3ba0f6e44f2e5cb6b7c0\",\"license\":\"MIT\"},\"contracts/LaunchpegLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpegV1.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpegFactory.sol\\\";\\nimport \\\"./interfaces/IERC1155LaunchpegSingleBundle.sol\\\";\\n\\nerror LaunchpegLens__InvalidContract();\\nerror LaunchpegLens__InvalidLaunchpegType();\\nerror LaunchpegLens__InvalidLaunchpegVersion();\\n\\n/// @title Launchpeg Lens\\n/// @author Trader Joe\\n/// @notice Helper contract to fetch launchpegs data\\ncontract LaunchpegLens {\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        uint256 collectionSize;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 totalSupply;\\n        string unrevealedURI;\\n        string baseURI;\\n    }\\n\\n    struct LaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 auctionSaleStartTime;\\n        uint256 preMintStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 auctionStartPrice;\\n        uint256 auctionEndPrice;\\n        uint256 auctionSaleDuration;\\n        uint256 auctionDropInterval;\\n        uint256 auctionDropPerStep;\\n        uint256 allowlistDiscountPercent;\\n        uint256 publicSaleDiscountPercent;\\n        uint256 auctionPrice;\\n        uint256 allowlistPrice;\\n        uint256 publicSalePrice;\\n        uint256 lastAuctionPrice;\\n        uint256 amountMintedDuringAuction;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountClaimedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct FlatLaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 preMintStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 allowlistPrice;\\n        uint256 salePrice;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountClaimedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct RevealData {\\n        uint256 revealBatchSize;\\n        uint256 lastTokenRevealed;\\n        uint256 revealStartTime;\\n        uint256 revealInterval;\\n    }\\n\\n    struct UserData {\\n        uint256 balanceOf;\\n        uint256 numberMinted;\\n        uint256 numberMintedWithPreMint;\\n        uint256 allowanceForAllowlistMint;\\n    }\\n\\n    struct ProjectOwnerData {\\n        address[] projectOwners;\\n        uint256 amountMintedByDevs;\\n        uint256 withdrawAVAXStartTime;\\n        uint256 launchpegBalanceAVAX;\\n    }\\n\\n    struct ERC1155SingleBundleData {\\n        uint256[] tokenSet;\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 preMintStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 allowlistPrice;\\n        uint256 salePrice;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountClaimedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    /// Global struct that is returned by getAllLaunchpegs()\\n    struct LensData {\\n        address id;\\n        LaunchpegType launchType;\\n        CollectionData collectionData;\\n        LaunchpegData launchpegData;\\n        FlatLaunchpegData flatLaunchpegData;\\n        RevealData revealData;\\n        UserData userData;\\n        ProjectOwnerData projectOwnerData;\\n        ERC1155SingleBundleData erc1155SingleBundleData;\\n    }\\n\\n    enum LaunchpegType {\\n        Unknown,\\n        Launchpeg,\\n        FlatLaunchpeg,\\n        ERC1155SingleBundle\\n    }\\n\\n    enum LaunchpegVersion {\\n        Unknown,\\n        V1,\\n        V2\\n    }\\n\\n    /// @notice LaunchpegFactory V1\\n    ILaunchpegFactory public immutable launchpegFactoryV1;\\n\\n    /// @notice LaunchpegFactory V2\\n    ILaunchpegFactory public immutable launchpegFactoryV2;\\n\\n    /// @notice BatchReveal address\\n    address public immutable batchReveal;\\n\\n    /// @dev LaunchpegLens constructor\\n    /// @param _launchpegFactoryV1 LaunchpegFactory V1\\n    /// @param _launchpegFactoryV2 LaunchpegFactory V2\\n    /// @param _batchReveal BatchReveal address\\n    constructor(\\n        ILaunchpegFactory _launchpegFactoryV1,\\n        ILaunchpegFactory _launchpegFactoryV2,\\n        address _batchReveal\\n    ) {\\n        launchpegFactoryV1 = _launchpegFactoryV1;\\n        launchpegFactoryV2 = _launchpegFactoryV2;\\n        batchReveal = _batchReveal;\\n    }\\n\\n    /// @notice Gets the type and version of Launchpeg\\n    /// @param _contract Contract address to consider\\n    /// @return LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\\n    function getLaunchpegType(\\n        address _contract\\n    ) public view returns (LaunchpegType, LaunchpegVersion) {\\n        if (launchpegFactoryV1.isLaunchpeg(0, _contract)) {\\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V1);\\n        } else if (launchpegFactoryV2.isLaunchpeg(0, _contract)) {\\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V2);\\n        } else if (launchpegFactoryV1.isLaunchpeg(1, _contract)) {\\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V1);\\n        } else if (launchpegFactoryV2.isLaunchpeg(1, _contract)) {\\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V2);\\n        } else if (launchpegFactoryV2.isLaunchpeg(2, _contract)) {\\n            return (LaunchpegType.ERC1155SingleBundle, LaunchpegVersion.V2);\\n        } else {\\n            return (LaunchpegType.Unknown, LaunchpegVersion.Unknown);\\n        }\\n    }\\n\\n    /// @notice Fetch Launchpeg data by type and version\\n    /// @param _type Type of Launchpeg to consider\\n    /// @param _version Launchpeg version\\n    /// @param _number Number of Launchpeg to fetch\\n    /// @param _limit Last Launchpeg index to fetch\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensDataList List of contracts datas, in descending order\\n    function getLaunchpegsByTypeAndVersion(\\n        LaunchpegType _type,\\n        LaunchpegVersion _version,\\n        uint256 _number,\\n        uint256 _limit,\\n        address _user\\n    ) external view returns (LensData[] memory) {\\n        if (_type == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidLaunchpegType();\\n        }\\n        if (_version == LaunchpegVersion.Unknown) {\\n            revert LaunchpegLens__InvalidLaunchpegVersion();\\n        }\\n        // default to v2 unless v1 is specified\\n        ILaunchpegFactory factory = (_version == LaunchpegVersion.V1)\\n            ? launchpegFactoryV1\\n            : launchpegFactoryV2;\\n        // 0 - Launchpeg, 1 - FlatLaunchpeg, 2 - ERC1155SingleBundle\\n        uint256 lpTypeIdx = uint8(_type) - 1;\\n        uint256 numLaunchpegs = factory.numLaunchpegs(lpTypeIdx);\\n\\n        uint256 end = _limit > numLaunchpegs ? numLaunchpegs : _limit;\\n        uint256 start = _number > end ? 0 : end - _number;\\n\\n        LensData[] memory LensDatas;\\n        LensDatas = new LensData[](end - start);\\n\\n        for (uint256 i = 0; i < LensDatas.length; i++) {\\n            LensDatas[i] = getLaunchpegData(\\n                factory.allLaunchpegs(lpTypeIdx, end - 1 - i),\\n                _user\\n            );\\n        }\\n\\n        return LensDatas;\\n    }\\n\\n    /// @notice Fetch Launchpeg data from the provided address\\n    /// @param _launchpeg Contract address to consider\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensData Contract data\\n    function getLaunchpegData(\\n        address _launchpeg,\\n        address _user\\n    ) public view returns (LensData memory) {\\n        (\\n            LaunchpegType launchType,\\n            LaunchpegVersion launchVersion\\n        ) = getLaunchpegType(_launchpeg);\\n        if (launchType == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidContract();\\n        }\\n\\n        LensData memory data;\\n        data.id = _launchpeg;\\n        data.launchType = launchType;\\n        data.collectionData = _getCollectionData(_launchpeg, launchType);\\n        data.projectOwnerData = _getProjectOwnerData(_launchpeg, launchVersion);\\n        if (data.launchType != LaunchpegType.ERC1155SingleBundle) {\\n            data.revealData = _getBatchRevealData(_launchpeg, launchVersion);\\n        }\\n        data.userData = _getUserData(\\n            _launchpeg,\\n            launchVersion,\\n            launchType,\\n            _user\\n        );\\n\\n        if (data.launchType == LaunchpegType.Launchpeg) {\\n            data.launchpegData = _getLaunchpegData(_launchpeg, launchVersion);\\n        } else if (data.launchType == LaunchpegType.FlatLaunchpeg) {\\n            data.flatLaunchpegData = _getFlatLaunchpegData(\\n                _launchpeg,\\n                launchVersion\\n            );\\n        } else if (data.launchType == LaunchpegType.ERC1155SingleBundle) {\\n            data.erc1155SingleBundleData = _getERC1155SingleBundleData(\\n                _launchpeg\\n            );\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @dev Fetches Launchpeg collection data\\n    /// @param _launchpeg Launchpeg address\\n    function _getCollectionData(\\n        address _launchpeg,\\n        LaunchpegType launchType\\n    ) private view returns (CollectionData memory data) {\\n        data.name = IERC721Metadata(_launchpeg).name();\\n        data.symbol = IERC721Metadata(_launchpeg).symbol();\\n        data.collectionSize = IBaseLaunchpeg(_launchpeg).collectionSize();\\n        data.maxPerAddressDuringMint = IBaseLaunchpeg(_launchpeg)\\n            .maxPerAddressDuringMint();\\n\\n        if (launchType != LaunchpegType.ERC1155SingleBundle) {\\n            data.totalSupply = IERC721Enumerable(_launchpeg).totalSupply();\\n            data.unrevealedURI = IBaseLaunchpeg(_launchpeg).unrevealedURI();\\n            data.baseURI = IBaseLaunchpeg(_launchpeg).baseURI();\\n        } else {\\n            data.baseURI = IERC1155MetadataURI(_launchpeg).uri(0);\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg project owner data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getProjectOwnerData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (ProjectOwnerData memory data) {\\n        data.amountMintedByDevs = IBaseLaunchpeg(_launchpeg)\\n            .amountMintedByDevs();\\n        data.launchpegBalanceAVAX = _launchpeg.balance;\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            address[] memory projectOwners = new address[](1);\\n            projectOwners[0] = IBaseLaunchpegV1(_launchpeg).projectOwner();\\n            data.projectOwners = projectOwners;\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            data.projectOwners = _getProjectOwners(_launchpeg);\\n            data.withdrawAVAXStartTime = IBaseLaunchpeg(_launchpeg)\\n                .withdrawAVAXStartTime();\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg project owners. Only works for Launchpeg V2.\\n    /// @param _launchpeg Launchpeg address\\n    function _getProjectOwners(\\n        address _launchpeg\\n    ) private view returns (address[] memory) {\\n        bytes32 role = IBaseLaunchpeg(_launchpeg).PROJECT_OWNER_ROLE();\\n        uint256 count = IAccessControlEnumerableUpgradeable(_launchpeg)\\n            .getRoleMemberCount(role);\\n        address[] memory projectOwners = new address[](count);\\n        for (uint256 i; i < count; i++) {\\n            projectOwners[i] = IAccessControlEnumerableUpgradeable(_launchpeg)\\n                .getRoleMember(role, i);\\n        }\\n        return projectOwners;\\n    }\\n\\n    /// @dev Fetches Launchpeg data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getLaunchpegData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (LaunchpegData memory data) {\\n        ILaunchpeg lp = ILaunchpeg(_launchpeg);\\n        data.currentPhase = lp.currentPhase();\\n        data.amountForAuction = lp.amountForAuction();\\n        data.amountForAllowlist = lp.amountForAllowlist();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.auctionSaleStartTime = lp.auctionSaleStartTime();\\n        data.allowlistStartTime = lp.allowlistStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.auctionStartPrice = lp.auctionStartPrice();\\n        data.auctionEndPrice = lp.auctionEndPrice();\\n        data.auctionSaleDuration = lp.auctionSaleDuration();\\n        data.auctionDropInterval = lp.auctionDropInterval();\\n        data.auctionDropPerStep = lp.auctionDropPerStep();\\n        data.allowlistDiscountPercent = lp.allowlistDiscountPercent();\\n        data.publicSaleDiscountPercent = lp.publicSaleDiscountPercent();\\n        data.auctionPrice = lp.getAuctionPrice(data.auctionSaleStartTime);\\n        data.lastAuctionPrice = lp.lastAuctionPrice();\\n        data.amountMintedDuringAuction = lp.amountMintedDuringAuction();\\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            data.allowlistPrice = IBaseLaunchpegV1(_launchpeg)\\n                .getAllowlistPrice();\\n            data.publicSalePrice = IBaseLaunchpegV1(_launchpeg)\\n                .getPublicSalePrice();\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            data.allowlistPrice = lp.allowlistPrice();\\n            data.publicSalePrice = lp.salePrice();\\n            data.preMintStartTime = lp.preMintStartTime();\\n            data.publicSaleEndTime = lp.publicSaleEndTime();\\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n            data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\\n        }\\n    }\\n\\n    /// @dev Fetches FlatLaunchpeg data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getFlatLaunchpegData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (FlatLaunchpegData memory data) {\\n        IFlatLaunchpeg lp = IFlatLaunchpeg(_launchpeg);\\n        data.currentPhase = lp.currentPhase();\\n        data.amountForAllowlist = lp.amountForAllowlist();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.allowlistStartTime = lp.allowlistStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.allowlistPrice = lp.allowlistPrice();\\n        data.salePrice = lp.salePrice();\\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n        if (launchVersion == LaunchpegVersion.V2) {\\n            data.preMintStartTime = lp.preMintStartTime();\\n            data.publicSaleEndTime = lp.publicSaleEndTime();\\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n            data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\\n        }\\n    }\\n\\n    function _getERC1155SingleBundleData(\\n        address launchpeg\\n    ) private view returns (ERC1155SingleBundleData memory data) {\\n        IERC1155LaunchpegSingleBundle lp = IERC1155LaunchpegSingleBundle(\\n            launchpeg\\n        );\\n        data.tokenSet = lp.tokenSet();\\n        data.currentPhase = IBaseLaunchpeg.Phase(uint8(lp.currentPhase()));\\n        data.amountForAllowlist = lp.amountForPreMint();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.preMintStartTime = lp.preMintStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.publicSaleEndTime = lp.publicSaleEndTime();\\n        data.allowlistPrice = lp.preMintPrice();\\n        data.salePrice = lp.publicSalePrice();\\n        data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n        data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\\n        data.amountMintedDuringAllowlist = 0;\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n    }\\n\\n    /// @dev Fetches batch reveal data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getBatchRevealData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (RevealData memory data) {\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            IBaseLaunchpegV1 br = IBaseLaunchpegV1(_launchpeg);\\n            data.revealBatchSize = br.revealBatchSize();\\n            data.revealStartTime = br.revealStartTime();\\n            data.revealInterval = br.revealInterval();\\n            data.lastTokenRevealed = br.lastTokenRevealed();\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            (\\n                ,\\n                ,\\n                uint256 revealBatchSize,\\n                uint256 revealStartTime,\\n                uint256 revealInterval\\n            ) = IBatchReveal(batchReveal).launchpegToConfig(_launchpeg);\\n            data.revealBatchSize = revealBatchSize;\\n            data.revealStartTime = revealStartTime;\\n            data.revealInterval = revealInterval;\\n            data.lastTokenRevealed = IBatchReveal(batchReveal)\\n                .launchpegToLastTokenReveal(_launchpeg);\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg user data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getUserData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion,\\n        LaunchpegType launchType,\\n        address _user\\n    ) private view returns (UserData memory data) {\\n        if (_user != address(0)) {\\n            data.numberMinted = IBaseLaunchpeg(_launchpeg).numberMinted(_user);\\n            data.allowanceForAllowlistMint = IBaseLaunchpeg(_launchpeg)\\n                .allowlist(_user);\\n\\n            if (launchType == LaunchpegType.ERC1155SingleBundle) {\\n                data.balanceOf = IERC1155(_launchpeg).balanceOf(\\n                    _user,\\n                    IERC1155LaunchpegSingleBundle(_launchpeg).tokenSet()[0]\\n                );\\n\\n                data.numberMintedWithPreMint =\\n                    IERC1155LaunchpegSingleBundle(_launchpeg)\\n                        .userPendingPreMints(_user) +\\n                    IERC1155LaunchpegSingleBundle(_launchpeg).numberMinted(\\n                        _user\\n                    );\\n            } else {\\n                if (launchVersion == LaunchpegVersion.V2) {\\n                    data.numberMintedWithPreMint = IBaseLaunchpeg(_launchpeg)\\n                        .numberMintedWithPreMint(_user);\\n                }\\n\\n                data.balanceOf = IERC721(_launchpeg).balanceOf(_user);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006ac053e7e805b48f32b957566ad8390d3c485d586a2a703bda314fb3bceb10\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"../ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    /// @notice Collection data to initialize Launchpeg\\n    /// @param name ERC721 name\\n    /// @param symbol ERC721 symbol\\n    /// @param maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param collectionSize The collection size (e.g 10000)\\n    /// @param amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        address batchReveal;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 collectionSize;\\n        uint256 amountForDevs;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n    }\\n\\n    /// @notice Collection owner data to initialize Launchpeg\\n    /// @param owner The contract owner\\n    /// @param projectOwner The project owner\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param joeFeeCollector The address to which the fees on the sale will be sent\\n    /// @param joeFeePercent The fees collected by the fee collector on the sale benefits\\n    struct CollectionOwnerData {\\n        address owner;\\n        address projectOwner;\\n        address royaltyReceiver;\\n        address joeFeeCollector;\\n        uint256 joeFeePercent;\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external pure returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeBatchReveal(address _batchReveal) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 _quantity) external payable;\\n\\n    function claimPreMint() external;\\n\\n    function batchClaimPreMint(uint96 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userPendingPreMints(address owner) external view returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function numberMintedWithPreMint(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xc48e90941e198a8102fa2366b6d798ca6f26b577fcd4d95fd55e50f49f58e4ea\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpegV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBaseLaunchpegV1\\n/// @author Trader Joe\\n/// @notice Defines the legacy methods in Launchpeg V1 contracts\\ninterface IBaseLaunchpegV1 {\\n    /** IBaseLaunchpeg */\\n    function projectOwner() external view returns (address);\\n\\n    /** ILaunchpeg */\\n    function getAllowlistPrice() external view returns (uint256);\\n\\n    function getPublicSalePrice() external view returns (uint256);\\n\\n    /** IBatchReveal */\\n    function revealBatchSize() external view returns (uint256);\\n\\n    function lastTokenRevealed() external view returns (uint256);\\n\\n    function revealStartTime() external view returns (uint256);\\n\\n    function revealInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90c6d2b0c4fea173411df6d3ccbfb4a4aaa540a0f25fe5d37822785afa9abcf0\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155LaunchpegBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IOperatorFilterRegistry} from \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\ninterface IERC1155LaunchpegBase {\\n    /// @dev Emitted on updateOperatorFilterRegistryAddress()\\n    /// @param operatorFilterRegistry New operator filter registry\\n    event OperatorFilterRegistryUpdated(address operatorFilterRegistry);\\n\\n    /// @dev Emitted on _setDefaultRoyalty()\\n    /// @param receiver Royalty fee collector\\n    /// @param feePercent Royalty fee percent in basis point\\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\\n\\n    /// @dev Emitted on setWithdrawAVAXStartTime()\\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\\n\\n    /// @dev Emitted on initializeJoeFee()\\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\\n    /// @param feeCollector The address to which the fees on the sale will be sent\\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\\n\\n    /// @dev Emitted on withdrawAVAX()\\n    /// @param sender The address that withdrew the tokens\\n    /// @param amount Amount of AVAX transfered to `sender`\\n    /// @param fee Amount of AVAX paid to the fee collector\\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\\n\\n    /// @dev Emitted on setURI()\\n    /// @param uri The new base URI\\n    event URISet(string uri);\\n\\n    /// @dev Emitted on lockSaleParameters()\\n    event SaleParametersLocked();\\n\\n    struct InitData {\\n        address owner;\\n        address royaltyReceiver;\\n        uint256 joeFeePercent;\\n        string collectionName;\\n        string collectionSymbol;\\n    }\\n\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external view returns (bytes32);\\n\\n    function operatorFilterRegistry()\\n        external\\n        view\\n        returns (IOperatorFilterRegistry);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function locked() external view returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function setURI(string memory newURI) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 withdrawAVAXStartTime) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function setOperatorFilterRegistryAddress(\\n        address operatorFilterRegistry\\n    ) external;\\n\\n    function lockSaleParameters() external;\\n\\n    function withdrawAVAX(address to) external;\\n}\\n\",\"keccak256\":\"0xd411be63182c9fa2e63cd748836f153f8c7c0ad0f72001b907111dbc1ffc10f6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155LaunchpegSingleBundle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IERC1155LaunchpegBase} from \\\"./IERC1155LaunchpegBase.sol\\\";\\n\\ninterface IERC1155LaunchpegSingleBundle is IERC1155LaunchpegBase {\\n    event AllowlistSeeded();\\n    event PreMintStartTimeSet(uint256 preMintStartTime);\\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\\n    event AmountForDevsSet(uint256 amountForDevs);\\n    event AmountForPreMintSet(uint256 amountForPreMint);\\n    event PreMintPriceSet(uint256 preMintPrice);\\n    event PublicSalePriceSet(uint256 publicSalePrice);\\n    event MaxPerAddressDuringMintSet(uint256 maxPerAddressDuringMint);\\n    event CollectionSizeSet(uint256 collectionSize);\\n    event PhaseInitialized(\\n        uint256 preMintStartTime,\\n        uint256 publicSaleStartTime,\\n        uint256 publicSaleEndTime,\\n        uint256 preMintPrice,\\n        uint256 salePrice,\\n        uint256 withdrawAVAXStartTime\\n    );\\n    event DevMint(address indexed sender, uint256 quantity);\\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\\n    event TokenSetUpdated(uint256[] tokenSet);\\n\\n    struct PreMintData {\\n        address sender;\\n        uint96 quantity;\\n    }\\n\\n    struct PreMintDataSet {\\n        PreMintData[] preMintDataArr;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function collectionSize() external view returns (uint128);\\n\\n    function maxPerAddressDuringMint() external view returns (uint128);\\n\\n    function amountForDevs() external view returns (uint128);\\n\\n    function amountMintedByDevs() external view returns (uint128);\\n\\n    function preMintPrice() external view returns (uint128);\\n\\n    function preMintStartTime() external view returns (uint128);\\n\\n    function amountForPreMint() external view returns (uint128);\\n\\n    function amountMintedDuringPreMint() external view returns (uint128);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function publicSalePrice() external view returns (uint128);\\n\\n    function publicSaleStartTime() external view returns (uint128);\\n\\n    function publicSaleEndTime() external view returns (uint128);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint128);\\n\\n    function allowlist(address account) external view returns (uint256);\\n\\n    function numberMinted(address account) external view returns (uint256);\\n\\n    function initialize(\\n        IERC1155LaunchpegBase.InitData calldata initData,\\n        uint256 initialMaxSupply,\\n        uint256 initialAmountForDevs,\\n        uint256 initialAmountForPreMint,\\n        uint256 initialMaxPerAddressDuringMint,\\n        uint256[] calldata initialTokenSet\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 initialPreMintStartTime,\\n        uint256 initialPublicSaleStartTime,\\n        uint256 initialPublicSaleEndTime,\\n        uint256 initialPreMintPrice,\\n        uint256 initialPublicSalePrice\\n    ) external;\\n\\n    function tokenSet() external view returns (uint256[] memory);\\n\\n    function amountOfUsersWaitingForPremintClaim()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userPendingPreMints(\\n        address account\\n    ) external view returns (uint256);\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 quantity) external payable;\\n\\n    function claimPremint() external;\\n\\n    function batchClaimPreMint(uint256 quantity) external;\\n\\n    function publicSaleMint(uint256 quantity) external payable;\\n\\n    function updateTokenSet(uint256[] calldata newTokenSet) external;\\n\\n    function seedAllowlist(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function setPreMintStartTime(uint256 newPreMintStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 newPublicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 newPublicSaleEndTime) external;\\n\\n    function setAmountForDevs(uint256 newAmountForDevs) external;\\n\\n    function setAmountForPreMint(uint256 newAmountForPreMint) external;\\n\\n    function setPreMintPrice(uint256 newPreMintPrice) external;\\n\\n    function setPublicSalePrice(uint256 newPublicSalePrice) external;\\n\\n    function setMaxPerAddressDuringMint(\\n        uint256 newMaxPerAddressDuringMint\\n    ) external;\\n\\n    function setCollectionSize(uint256 newCollectionSize) external;\\n}\\n\",\"keccak256\":\"0x466299a46bf3b9600ac40d7a3193160c21bc31e6708a5688f80ccb16e478eef4\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4f38566f1d19abf8482e5c1af31672449567c2b74fc7d7d4ee99c9c5134fa75e\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0xb8f6dd352d238910507700f03b2e8f3f843fb3267fcb369876af1f272a356332\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ILaunchpegFactory\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of LaunchpegFactory\\ninterface ILaunchpegFactory {\\n    function LAUNCHPEG_PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function launchpegImplementation() external view returns (address);\\n\\n    function flatLaunchpegImplementation() external view returns (address);\\n\\n    function batchReveal() external view returns (address);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function isLaunchpeg(uint256 _type, address _contract)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\\n        external\\n        view\\n        returns (address);\\n\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external;\\n\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\\n\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\\n\\n    function addLaunchpegPauser(address _pauser) external;\\n\\n    function removeLaunchpegPauser(address _pauser) external;\\n\\n    function pauseLaunchpeg(address _launchpeg) external;\\n}\\n\",\"keccak256\":\"0xc41cda9f99e4d8a562de2d7f6e7626eac17d5fbb11fd0c8deb3dae9b85298f94\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003c3038038062003c3083398101604081905262000034916200006b565b6001600160a01b0392831660805290821660a0521660c052620000bf565b6001600160a01b03811681146200006857600080fd5b50565b6000806000606084860312156200008157600080fd5b83516200008e8162000052565b6020850151909350620000a18162000052565b6040850151909250620000b48162000052565b809150509250925092565b60805160a05160c051613b056200012b6000396000818160950152818161104001526110fa01526000818160c9015281816101d6015281816104df0152818161062101526106c101526000818160f0015281816101fc0152818161042a01526105800152613b056000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806304fa66ba1461006757806321cc161114610090578063522ea9bc146100c457806354dbc616146100eb578063a6a7b3ea14610112578063d0b54b3b14610133575b600080fd5b61007a61007536600461314c565b610153565b60405161008791906136a1565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516100879190613703565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b610125610120366004613717565b610425565b60405161008792919061373b565b610146610141366004613766565b610756565b604051610087919061379f565b60606000866003811115610169576101696131b3565b036101875760405163883ee45160e01b815260040160405180910390fd5b600085600281111561019b5761019b6131b3565b036101b9576040516305fdabfd60e41b815260040160405180910390fd5b600060018660028111156101cf576101cf6131b3565b146101fa577f000000000000000000000000000000000000000000000000000000000000000061021c565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001886003811115610234576102346131b3565b61023e91906137c8565b60ff1690506000826001600160a01b031663776f1b1c836040518263ffffffff1660e01b815260040161027391815260200190565b602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b491906137eb565b905060008187116102c557866102c7565b815b905060008189116102e1576102dc8983613804565b6102e4565b60005b905060606102f28284613804565b6001600160401b038111156103095761030961381b565b60405190808252806020026020018201604052801561034257816020015b61032f612ea5565b8152602001906001900390816103275790505b50905060005b8151811015610415576103e56001600160a01b03881663306ec748888461037060018a613804565b61037a9190613804565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190613831565b8a610756565b8282815181106103f7576103f761384e565b6020026020010181905250808061040d90613864565b915050610348565b509b9a5050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663abcc76176000856040518363ffffffff1660e01b815260040161047792919061387d565b602060405180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190613894565b156104c857506001928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179061051790600090879060040161387d565b602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190613894565b156105695750600192600292509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906105b890600190879060040161387d565b602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190613894565b1561060a5750600292600192509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179061065990600190879060040161387d565b602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190613894565b156106aa57506002928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906106f990600290879060040161387d565b602060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a9190613894565b1561074b5750600392600292509050565b506000928392509050565b61075e612ea5565b60008061076a85610425565b90925090506000826003811115610783576107836131b3565b036107a157604051630ca92ff360e31b815260040160405180910390fd5b6107a9612ea5565b6001600160a01b0386168152602081018360038111156107cb576107cb6131b3565b908160038111156107de576107de6131b3565b9052506107eb86846108d7565b60408201526107fa8683610c67565b60e0820152600381602001516003811115610817576108176131b3565b1461082c576108268683610e4c565b60a08201525b61083886838588611180565b60c0820152600181602001516003811115610855576108556131b3565b0361086e576108648683611589565b60608201526108cc565b600281602001516003811115610886576108866131b3565b0361089f57610895868361214f565b60808201526108cc565b6003816020015160038111156108b7576108b76131b3565b036108cc576108c586612709565b6101008201525b925050505b92915050565b6108df612f18565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094591908101906138e6565b8160000181905250826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b391908101906138e6565b8160200181905250826001600160a01b03166345c0f5336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d91906137eb565b816040018181525050826001600160a01b0316638bc35c2f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8891906137eb565b60608201526003826003811115610aa157610aa16131b3565b14610bef57826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0891906137eb565b816080018181525050826001600160a01b0316637035bf186040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7791908101906138e6565b8160a00181905250826001600160a01b0316636c0360eb6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bbd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be591908101906138e6565b60c08201526108d1565b6040516303a24d0760e21b8152600060048201526001600160a01b03841690630e89341c90602401600060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5c91908101906138e6565b60c082015292915050565b610c6f612f55565b826001600160a01b0316635c7034af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd191906137eb565b60208201526001600160a01b0383163160608201526001826002811115610cfa57610cfa6131b3565b03610db55760408051600180825281830190925260009160208083019080368337019050509050836001600160a01b031663a4475ce46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190613831565b81600081518110610d9657610d9661384e565b6001600160a01b039092166020928302919091019091015281526108d1565b6002826002811115610dc957610dc96131b3565b036108d157610dd783612cc8565b8160000181905250826001600160a01b031663c792e1676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906137eb565b604082015292915050565b610e54612f7d565b6001826002811115610e6857610e686131b3565b03611020576000839050806001600160a01b0316630b5648106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed491906137eb565b826000018181525050806001600160a01b031663cc0bef846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906137eb565b826040018181525050806001600160a01b031663247cd8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa91906137eb565b826060018181525050806001600160a01b031663f43191956040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101591906137eb565b6020830152506108d1565b6002826002811115611034576110346131b3565b036108d15760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663181d2588876040518263ffffffff1660e01b815260040161108a9190613703565b60a060405180830381865afa1580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190613970565b8289526040808a0183905260608a0182905251635e1578db60e11b815292975090955093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063bc2af1b69150611131908990600401613703565b602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117291906137eb565b602085015250505092915050565b611188612f7d565b6001600160a01b038216156115815760405163dc33e68160e01b81526001600160a01b0386169063dc33e681906111c3908590600401613703565b602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120491906137eb565b602082015260405163a7cd52cb60e01b81526001600160a01b0386169063a7cd52cb90611235908590600401613703565b602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127691906137eb565b6060820152600383600381111561128f5761128f6131b3565b0361148557846001600160a01b031662fdd58e83876001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261130991908101906139bf565b60008151811061131b5761131b61384e565b60200260200101516040518363ffffffff1660e01b81526004016113549291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139591906137eb565b815260405163dc33e68160e01b81526001600160a01b0386169063dc33e681906113c3908590600401613703565b602060405180830381865afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140491906137eb565b6040516366b55a0960e01b81526001600160a01b038716906366b55a0990611430908690600401613703565b602060405180830381865afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147191906137eb565b61147b9190613a64565b6040820152611581565b6002846002811115611499576114996131b3565b036115115760405163aec3922b60e01b81526001600160a01b0386169063aec3922b906114ca908590600401613703565b602060405180830381865afa1580156114e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150b91906137eb565b60408201525b6040516370a0823160e01b81526001600160a01b038616906370a082319061153d908590600401613703565b602060405180830381865afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906137eb565b81525b949350505050565b611591612fa5565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190613a89565b8290600581111561160b5761160b6131b3565b9081600581111561161e5761161e6131b3565b81525050806001600160a01b031663f7df4c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168491906137eb565b826020018181525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef91906137eb565b826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a91906137eb565b826060018181525050806001600160a01b031663fab2bf586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c591906137eb565b826080018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561180c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183091906137eb565b8260c0018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b91906137eb565b8260e0018181525050806001600160a01b031663d756985b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190691906137eb565b82610120018181525050806001600160a01b031663a04a6ac86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561194e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197291906137eb565b82610140018181525050806001600160a01b0316630a212ee26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119de91906137eb565b82610160018181525050806001600160a01b031663f243669b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4a91906137eb565b82610180018181525050806001600160a01b031663e6fe34b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab691906137eb565b826101a0018181525050806001600160a01b031663154895106040518163ffffffff1660e01b8152600401602060405180830381865afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2291906137eb565b826101c0018181525050806001600160a01b03166308a3fb4e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8e91906137eb565b6101e083015260808201516040516348be804f60e11b815260048101919091526001600160a01b0382169063917d009e90602401602060405180830381865afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0391906137eb565b82610200018181525050806001600160a01b0316637a18c1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f91906137eb565b82610260018181525050806001600160a01b031663a54cd7dc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdb91906137eb565b82610280018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4791906137eb565b826102e0018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db391906137eb565b6103008301526001836002811115611dcd57611dcd6131b3565b03611eab57836001600160a01b0316630b1019e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3491906137eb565b82610220018181525050836001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea091906137eb565b610240830152612148565b6002836002811115611ebf57611ebf6131b3565b0361214857806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2691906137eb565b82610220018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9291906137eb565b82610240018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffe91906137eb565b8260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206991906137eb565b82610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d591906137eb565b826102a0018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214191906137eb565b6102c08301525b5092915050565b612157613062565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561219a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121be9190613a89565b829060058111156121d1576121d16131b3565b908160058111156121e4576121e46131b3565b81525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a91906137eb565b826020018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b591906137eb565b826040018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232091906137eb565b826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b91906137eb565b8260a0018181525050806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f691906137eb565b8260e0018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561243d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246191906137eb565b82610100018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cd91906137eb565b82610160018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906137eb565b6101808301526002836002811115612553576125536131b3565b0361214857806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba91906137eb565b826060018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262591906137eb565b8260c0018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269091906137eb565b82610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906137eb565b6101408301525092915050565b6127116130cb565b6000829050806001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa158015612754573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261277c91908101906139bf565b8260000181905250806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e69190613a89565b60058111156127f7576127f76131b3565b60ff16600581111561280b5761280b6131b3565b82602001906005811115612821576128216131b3565b90816005811115612834576128346131b3565b81525050806001600160a01b031663754a667e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289a9190613aa6565b6001600160801b0316826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e9190613aa6565b6001600160801b0316826060018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129829190613aa6565b6001600160801b0316826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f69190613aa6565b6001600160801b03168260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6a9190613aa6565b6001600160801b03168260c0018181525050806001600160a01b031663a187c89b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ade9190613aa6565b6001600160801b03168260e0018181525050806001600160a01b0316639b6860c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b529190613aa6565b6001600160801b031682610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613aa6565b6001600160801b031682610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3c91906137eb565b6101408301526000610160830152604080516312c6663b60e31b815290516001600160a01b0383169163963331d89160048083019260209291908290030181865afa158015612c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb39190613aa6565b6001600160801b031661018083015250919050565b60606000826001600160a01b031663be62da0e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2e91906137eb565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0385169063ca15c87390602401602060405180830381865afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d91906137eb565b90506000816001600160401b03811115612db957612db961381b565b604051908082528060200260200182016040528015612de2578160200160208202803683370190505b50905060005b82811015612e9c57604051632404341f60e21b815260048101859052602481018290526001600160a01b03871690639010d07c90604401602060405180830381865afa158015612e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e609190613831565b828281518110612e7257612e7261384e565b6001600160a01b039092166020928302919091019091015280612e9481613864565b915050612de8565b50949350505050565b604080516101208101825260008082526020820152908101612ec5612f18565b8152602001612ed2612fa5565b8152602001612edf613062565b8152602001612eec612f7d565b8152602001612ef9612f7d565b8152602001612f06612f55565b8152602001612f136130cb565b905290565b6040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051610320810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915260608152602081016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038116811461314957600080fd5b50565b600080600080600060a0868803121561316457600080fd5b85356004811061317357600080fd5b945060208601356003811061318757600080fd5b9350604086013592506060860135915060808601356131a581613134565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600481106131d9576131d96131b3565b9052565b60005b838110156131f85781810151838201526020016131e0565b83811115613207576000848401525b50505050565b600081518084526132258160208601602086016131dd565b601f01601f19169290920160200192915050565b6000815160e0845261324e60e085018261320d565b905060208301518482036020860152613267828261320d565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a086015261329f828261320d565b91505060c083015184820360c08601526132b9828261320d565b95945050505050565b600681106131d9576131d96131b3565b6132dd8282516132c2565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151908301526102e0808201519083015261030090810151910152565b6133ea8282516132c2565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b805182526020810151602083015260408101516040830152606081015160608301525050565b8051608080845281519084018190526000916020919082019060a0860190845b818110156134d35783516001600160a01b0316835292840192918401916001016134ae565b50508285015183870152604085015160408701526060850151606087015280935050505092915050565b600081518084526020808501945080840160005b8381101561352d57815187529582019590820190600101613511565b509495945050505050565b60006101a0825181855261354e828601826134fd565b915050602083015161356360208601826132c2565b5060408381015190850152606080840151908501526080808401519085015260a0808401519085015260c0808401519085015260e0808401519085015261010080840151908501526101208084015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b80516001600160a01b031682526000610660602083015161360360208601826131c9565b50604083015181604086015261361b82860182613239565b915050606083015161363060608601826132d2565b5060808301516136446103808601826133df565b5060a0830151613658610520860182613468565b5060c083015161366c6105a0860182613468565b5060e0830151848203610620860152613685828261348e565b9150506101008301518482036106408601526132b98282613538565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156136f657603f198886030184526136e48583516135df565b945092850192908501906001016136c8565b5092979650505050505050565b6001600160a01b0391909116815260200190565b60006020828403121561372957600080fd5b813561373481613134565b9392505050565b6040810161374982856131c9565b60038310613759576137596131b3565b8260208301529392505050565b6000806040838503121561377957600080fd5b823561378481613134565b9150602083013561379481613134565b809150509250929050565b60208152600061373460208301846135df565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156137e2576137e26137b2565b90039392505050565b6000602082840312156137fd57600080fd5b5051919050565b600082821015613816576138166137b2565b500390565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561384357600080fd5b815161373481613134565b634e487b7160e01b600052603260045260246000fd5b600060018201613876576138766137b2565b5060010190565b9182526001600160a01b0316602082015260400190565b6000602082840312156138a657600080fd5b8151801515811461373457600080fd5b604051601f8201601f191681016001600160401b03811182821017156138de576138de61381b565b604052919050565b6000602082840312156138f857600080fd5b81516001600160401b038082111561390f57600080fd5b818401915084601f83011261392357600080fd5b8151818111156139355761393561381b565b613948601f8201601f19166020016138b6565b915080825285602082850101111561395f57600080fd5b612e9c8160208401602086016131dd565b600080600080600060a0868803121561398857600080fd5b85519450602086015180600f0b81146139a057600080fd5b6040870151606088015160809098015196999198509695945092505050565b600060208083850312156139d257600080fd5b82516001600160401b03808211156139e957600080fd5b818501915085601f8301126139fd57600080fd5b815181811115613a0f57613a0f61381b565b8060051b9150613a208483016138b6565b8181529183018401918481019088841115613a3a57600080fd5b938501935b83851015613a5857845182529385019390850190613a3f565b98975050505050505050565b60008219821115613a7757613a776137b2565b500190565b6006811061314957600080fd5b600060208284031215613a9b57600080fd5b815161373481613a7c565b600060208284031215613ab857600080fd5b81516001600160801b038116811461373457600080fdfea2646970667358221220f191ef0b2a3f790aea09199e64d568182c96f9b3fa1e6b5ae26acbec99e127f864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806304fa66ba1461006757806321cc161114610090578063522ea9bc146100c457806354dbc616146100eb578063a6a7b3ea14610112578063d0b54b3b14610133575b600080fd5b61007a61007536600461314c565b610153565b60405161008791906136a1565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516100879190613703565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b610125610120366004613717565b610425565b60405161008792919061373b565b610146610141366004613766565b610756565b604051610087919061379f565b60606000866003811115610169576101696131b3565b036101875760405163883ee45160e01b815260040160405180910390fd5b600085600281111561019b5761019b6131b3565b036101b9576040516305fdabfd60e41b815260040160405180910390fd5b600060018660028111156101cf576101cf6131b3565b146101fa577f000000000000000000000000000000000000000000000000000000000000000061021c565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001886003811115610234576102346131b3565b61023e91906137c8565b60ff1690506000826001600160a01b031663776f1b1c836040518263ffffffff1660e01b815260040161027391815260200190565b602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b491906137eb565b905060008187116102c557866102c7565b815b905060008189116102e1576102dc8983613804565b6102e4565b60005b905060606102f28284613804565b6001600160401b038111156103095761030961381b565b60405190808252806020026020018201604052801561034257816020015b61032f612ea5565b8152602001906001900390816103275790505b50905060005b8151811015610415576103e56001600160a01b03881663306ec748888461037060018a613804565b61037a9190613804565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190613831565b8a610756565b8282815181106103f7576103f761384e565b6020026020010181905250808061040d90613864565b915050610348565b509b9a5050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663abcc76176000856040518363ffffffff1660e01b815260040161047792919061387d565b602060405180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190613894565b156104c857506001928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179061051790600090879060040161387d565b602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190613894565b156105695750600192600292509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906105b890600190879060040161387d565b602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190613894565b1561060a5750600292600192509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179061065990600190879060040161387d565b602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190613894565b156106aa57506002928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906106f990600290879060040161387d565b602060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a9190613894565b1561074b5750600392600292509050565b506000928392509050565b61075e612ea5565b60008061076a85610425565b90925090506000826003811115610783576107836131b3565b036107a157604051630ca92ff360e31b815260040160405180910390fd5b6107a9612ea5565b6001600160a01b0386168152602081018360038111156107cb576107cb6131b3565b908160038111156107de576107de6131b3565b9052506107eb86846108d7565b60408201526107fa8683610c67565b60e0820152600381602001516003811115610817576108176131b3565b1461082c576108268683610e4c565b60a08201525b61083886838588611180565b60c0820152600181602001516003811115610855576108556131b3565b0361086e576108648683611589565b60608201526108cc565b600281602001516003811115610886576108866131b3565b0361089f57610895868361214f565b60808201526108cc565b6003816020015160038111156108b7576108b76131b3565b036108cc576108c586612709565b6101008201525b925050505b92915050565b6108df612f18565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094591908101906138e6565b8160000181905250826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b391908101906138e6565b8160200181905250826001600160a01b03166345c0f5336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d91906137eb565b816040018181525050826001600160a01b0316638bc35c2f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8891906137eb565b60608201526003826003811115610aa157610aa16131b3565b14610bef57826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0891906137eb565b816080018181525050826001600160a01b0316637035bf186040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7791908101906138e6565b8160a00181905250826001600160a01b0316636c0360eb6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bbd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be591908101906138e6565b60c08201526108d1565b6040516303a24d0760e21b8152600060048201526001600160a01b03841690630e89341c90602401600060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5c91908101906138e6565b60c082015292915050565b610c6f612f55565b826001600160a01b0316635c7034af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd191906137eb565b60208201526001600160a01b0383163160608201526001826002811115610cfa57610cfa6131b3565b03610db55760408051600180825281830190925260009160208083019080368337019050509050836001600160a01b031663a4475ce46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190613831565b81600081518110610d9657610d9661384e565b6001600160a01b039092166020928302919091019091015281526108d1565b6002826002811115610dc957610dc96131b3565b036108d157610dd783612cc8565b8160000181905250826001600160a01b031663c792e1676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906137eb565b604082015292915050565b610e54612f7d565b6001826002811115610e6857610e686131b3565b03611020576000839050806001600160a01b0316630b5648106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed491906137eb565b826000018181525050806001600160a01b031663cc0bef846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906137eb565b826040018181525050806001600160a01b031663247cd8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa91906137eb565b826060018181525050806001600160a01b031663f43191956040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101591906137eb565b6020830152506108d1565b6002826002811115611034576110346131b3565b036108d15760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663181d2588876040518263ffffffff1660e01b815260040161108a9190613703565b60a060405180830381865afa1580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190613970565b8289526040808a0183905260608a0182905251635e1578db60e11b815292975090955093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063bc2af1b69150611131908990600401613703565b602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117291906137eb565b602085015250505092915050565b611188612f7d565b6001600160a01b038216156115815760405163dc33e68160e01b81526001600160a01b0386169063dc33e681906111c3908590600401613703565b602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120491906137eb565b602082015260405163a7cd52cb60e01b81526001600160a01b0386169063a7cd52cb90611235908590600401613703565b602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127691906137eb565b6060820152600383600381111561128f5761128f6131b3565b0361148557846001600160a01b031662fdd58e83876001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261130991908101906139bf565b60008151811061131b5761131b61384e565b60200260200101516040518363ffffffff1660e01b81526004016113549291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139591906137eb565b815260405163dc33e68160e01b81526001600160a01b0386169063dc33e681906113c3908590600401613703565b602060405180830381865afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140491906137eb565b6040516366b55a0960e01b81526001600160a01b038716906366b55a0990611430908690600401613703565b602060405180830381865afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147191906137eb565b61147b9190613a64565b6040820152611581565b6002846002811115611499576114996131b3565b036115115760405163aec3922b60e01b81526001600160a01b0386169063aec3922b906114ca908590600401613703565b602060405180830381865afa1580156114e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150b91906137eb565b60408201525b6040516370a0823160e01b81526001600160a01b038616906370a082319061153d908590600401613703565b602060405180830381865afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906137eb565b81525b949350505050565b611591612fa5565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190613a89565b8290600581111561160b5761160b6131b3565b9081600581111561161e5761161e6131b3565b81525050806001600160a01b031663f7df4c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168491906137eb565b826020018181525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef91906137eb565b826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a91906137eb565b826060018181525050806001600160a01b031663fab2bf586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c591906137eb565b826080018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561180c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183091906137eb565b8260c0018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b91906137eb565b8260e0018181525050806001600160a01b031663d756985b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190691906137eb565b82610120018181525050806001600160a01b031663a04a6ac86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561194e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197291906137eb565b82610140018181525050806001600160a01b0316630a212ee26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119de91906137eb565b82610160018181525050806001600160a01b031663f243669b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4a91906137eb565b82610180018181525050806001600160a01b031663e6fe34b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab691906137eb565b826101a0018181525050806001600160a01b031663154895106040518163ffffffff1660e01b8152600401602060405180830381865afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2291906137eb565b826101c0018181525050806001600160a01b03166308a3fb4e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8e91906137eb565b6101e083015260808201516040516348be804f60e11b815260048101919091526001600160a01b0382169063917d009e90602401602060405180830381865afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0391906137eb565b82610200018181525050806001600160a01b0316637a18c1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f91906137eb565b82610260018181525050806001600160a01b031663a54cd7dc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdb91906137eb565b82610280018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4791906137eb565b826102e0018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db391906137eb565b6103008301526001836002811115611dcd57611dcd6131b3565b03611eab57836001600160a01b0316630b1019e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3491906137eb565b82610220018181525050836001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea091906137eb565b610240830152612148565b6002836002811115611ebf57611ebf6131b3565b0361214857806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2691906137eb565b82610220018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9291906137eb565b82610240018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffe91906137eb565b8260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206991906137eb565b82610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d591906137eb565b826102a0018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214191906137eb565b6102c08301525b5092915050565b612157613062565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561219a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121be9190613a89565b829060058111156121d1576121d16131b3565b908160058111156121e4576121e46131b3565b81525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a91906137eb565b826020018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b591906137eb565b826040018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232091906137eb565b826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b91906137eb565b8260a0018181525050806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f691906137eb565b8260e0018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561243d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246191906137eb565b82610100018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cd91906137eb565b82610160018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906137eb565b6101808301526002836002811115612553576125536131b3565b0361214857806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba91906137eb565b826060018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262591906137eb565b8260c0018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269091906137eb565b82610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906137eb565b6101408301525092915050565b6127116130cb565b6000829050806001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa158015612754573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261277c91908101906139bf565b8260000181905250806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e69190613a89565b60058111156127f7576127f76131b3565b60ff16600581111561280b5761280b6131b3565b82602001906005811115612821576128216131b3565b90816005811115612834576128346131b3565b81525050806001600160a01b031663754a667e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289a9190613aa6565b6001600160801b0316826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e9190613aa6565b6001600160801b0316826060018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129829190613aa6565b6001600160801b0316826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f69190613aa6565b6001600160801b03168260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6a9190613aa6565b6001600160801b03168260c0018181525050806001600160a01b031663a187c89b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ade9190613aa6565b6001600160801b03168260e0018181525050806001600160a01b0316639b6860c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b529190613aa6565b6001600160801b031682610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613aa6565b6001600160801b031682610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3c91906137eb565b6101408301526000610160830152604080516312c6663b60e31b815290516001600160a01b0383169163963331d89160048083019260209291908290030181865afa158015612c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb39190613aa6565b6001600160801b031661018083015250919050565b60606000826001600160a01b031663be62da0e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2e91906137eb565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0385169063ca15c87390602401602060405180830381865afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d91906137eb565b90506000816001600160401b03811115612db957612db961381b565b604051908082528060200260200182016040528015612de2578160200160208202803683370190505b50905060005b82811015612e9c57604051632404341f60e21b815260048101859052602481018290526001600160a01b03871690639010d07c90604401602060405180830381865afa158015612e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e609190613831565b828281518110612e7257612e7261384e565b6001600160a01b039092166020928302919091019091015280612e9481613864565b915050612de8565b50949350505050565b604080516101208101825260008082526020820152908101612ec5612f18565b8152602001612ed2612fa5565b8152602001612edf613062565b8152602001612eec612f7d565b8152602001612ef9612f7d565b8152602001612f06612f55565b8152602001612f136130cb565b905290565b6040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051610320810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915260608152602081016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038116811461314957600080fd5b50565b600080600080600060a0868803121561316457600080fd5b85356004811061317357600080fd5b945060208601356003811061318757600080fd5b9350604086013592506060860135915060808601356131a581613134565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600481106131d9576131d96131b3565b9052565b60005b838110156131f85781810151838201526020016131e0565b83811115613207576000848401525b50505050565b600081518084526132258160208601602086016131dd565b601f01601f19169290920160200192915050565b6000815160e0845261324e60e085018261320d565b905060208301518482036020860152613267828261320d565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a086015261329f828261320d565b91505060c083015184820360c08601526132b9828261320d565b95945050505050565b600681106131d9576131d96131b3565b6132dd8282516132c2565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151908301526102e0808201519083015261030090810151910152565b6133ea8282516132c2565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b805182526020810151602083015260408101516040830152606081015160608301525050565b8051608080845281519084018190526000916020919082019060a0860190845b818110156134d35783516001600160a01b0316835292840192918401916001016134ae565b50508285015183870152604085015160408701526060850151606087015280935050505092915050565b600081518084526020808501945080840160005b8381101561352d57815187529582019590820190600101613511565b509495945050505050565b60006101a0825181855261354e828601826134fd565b915050602083015161356360208601826132c2565b5060408381015190850152606080840151908501526080808401519085015260a0808401519085015260c0808401519085015260e0808401519085015261010080840151908501526101208084015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b80516001600160a01b031682526000610660602083015161360360208601826131c9565b50604083015181604086015261361b82860182613239565b915050606083015161363060608601826132d2565b5060808301516136446103808601826133df565b5060a0830151613658610520860182613468565b5060c083015161366c6105a0860182613468565b5060e0830151848203610620860152613685828261348e565b9150506101008301518482036106408601526132b98282613538565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156136f657603f198886030184526136e48583516135df565b945092850192908501906001016136c8565b5092979650505050505050565b6001600160a01b0391909116815260200190565b60006020828403121561372957600080fd5b813561373481613134565b9392505050565b6040810161374982856131c9565b60038310613759576137596131b3565b8260208301529392505050565b6000806040838503121561377957600080fd5b823561378481613134565b9150602083013561379481613134565b809150509250929050565b60208152600061373460208301846135df565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156137e2576137e26137b2565b90039392505050565b6000602082840312156137fd57600080fd5b5051919050565b600082821015613816576138166137b2565b500390565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561384357600080fd5b815161373481613134565b634e487b7160e01b600052603260045260246000fd5b600060018201613876576138766137b2565b5060010190565b9182526001600160a01b0316602082015260400190565b6000602082840312156138a657600080fd5b8151801515811461373457600080fd5b604051601f8201601f191681016001600160401b03811182821017156138de576138de61381b565b604052919050565b6000602082840312156138f857600080fd5b81516001600160401b038082111561390f57600080fd5b818401915084601f83011261392357600080fd5b8151818111156139355761393561381b565b613948601f8201601f19166020016138b6565b915080825285602082850101111561395f57600080fd5b612e9c8160208401602086016131dd565b600080600080600060a0868803121561398857600080fd5b85519450602086015180600f0b81146139a057600080fd5b6040870151606088015160809098015196999198509695945092505050565b600060208083850312156139d257600080fd5b82516001600160401b03808211156139e957600080fd5b818501915085601f8301126139fd57600080fd5b815181811115613a0f57613a0f61381b565b8060051b9150613a208483016138b6565b8181529183018401918481019088841115613a3a57600080fd5b938501935b83851015613a5857845182529385019390850190613a3f565b98975050505050505050565b60008219821115613a7757613a776137b2565b500190565b6006811061314957600080fd5b600060208284031215613a9b57600080fd5b815161373481613a7c565b600060208284031215613ab857600080fd5b81516001600160801b038116811461373457600080fdfea2646970667358221220f191ef0b2a3f790aea09199e64d568182c96f9b3fa1e6b5ae26acbec99e127f864736f6c634300080d0033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "LaunchpegLens constructor",
        "params": {
          "_batchReveal": "BatchReveal address",
          "_launchpegFactoryV1": "LaunchpegFactory V1",
          "_launchpegFactoryV2": "LaunchpegFactory V2"
        }
      },
      "getLaunchpegData(address,address)": {
        "params": {
          "_launchpeg": "Contract address to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations"
        },
        "returns": {
          "_0": "LensData Contract data"
        }
      },
      "getLaunchpegType(address)": {
        "params": {
          "_contract": "Contract address to consider"
        },
        "returns": {
          "_0": "LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)"
        }
      },
      "getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)": {
        "params": {
          "_limit": "Last Launchpeg index to fetch",
          "_number": "Number of Launchpeg to fetch",
          "_type": "Type of Launchpeg to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations",
          "_version": "Launchpeg version"
        },
        "returns": {
          "_0": "LensDataList List of contracts datas, in descending order"
        }
      }
    },
    "title": "Launchpeg Lens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchReveal()": {
        "notice": "BatchReveal address"
      },
      "getLaunchpegData(address,address)": {
        "notice": "Fetch Launchpeg data from the provided address"
      },
      "getLaunchpegType(address)": {
        "notice": "Gets the type and version of Launchpeg"
      },
      "getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)": {
        "notice": "Fetch Launchpeg data by type and version"
      },
      "launchpegFactoryV1()": {
        "notice": "LaunchpegFactory V1"
      },
      "launchpegFactoryV2()": {
        "notice": "LaunchpegFactory V2"
      }
    },
    "notice": "Helper contract to fetch launchpegs data",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}