{
  "address": "0x9B7c9eee3db08F51d2E8648c3F913Bdf3cb9E6Dd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Launchpeg__CanNotMintThisMany",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidAllowlistPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidJoeFeeCollector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPercent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidPhases",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidRoyaltyInfo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__LargerCollectionSizeNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyForDevReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__MaxSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__NotEligibleForAllowlistMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avaxSent",
          "type": "uint256"
        }
      ],
      "name": "Launchpeg__NotEnoughAVAX",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__SaleParametersLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WithdrawAVAXNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongAddressesAndNumSlotsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__WrongPhase",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NoPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingOwnableUpgradeable__PendingOwnerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafePausableUpgradeable__AlreadyPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafePausableUpgradeable__AlreadyUnpaused",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AllowlistSeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForDevs",
          "type": "uint256"
        }
      ],
      "name": "AmountForDevsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForPreMint",
          "type": "uint256"
        }
      ],
      "name": "AmountForPreMintSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "AvaxWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionSize",
          "type": "uint256"
        }
      ],
      "name": "CollectionSizeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "DevMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "JoeFeeInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPerAddressDuringMint",
          "type": "uint256"
        }
      ],
      "name": "MaxPerAddressDuringMintSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorFilterRegistry",
          "type": "address"
        }
      ],
      "name": "OperatorFilterRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "PhaseInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PreMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintPrice",
          "type": "uint256"
        }
      ],
      "name": "PreMintPriceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preMintStartTime",
          "type": "uint256"
        }
      ],
      "name": "PreMintStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleEndTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleEndTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSalePrice",
          "type": "uint256"
        }
      ],
      "name": "PublicSalePriceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "publicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "PublicSaleStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SaleParametersLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenSet",
          "type": "uint256[]"
        }
      ],
      "name": "TokenSetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "URISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAVAXStartTimeSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNPAUSER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNPAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountClaimedDuringPreMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForDevs",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForPreMint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedByDevs",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPreMint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountMintedDuringPublicSale",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountOfUsersWaitingForPremintClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfClaims",
          "type": "uint256"
        }
      ],
      "name": "batchClaimPreMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "becomeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPremint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionSize",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPhase",
      "outputs": [
        {
          "internalType": "enum IERC1155LaunchpegBase.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "joeFeePercent",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "collectionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "collectionSymbol",
              "type": "string"
            }
          ],
          "internalType": "struct IERC1155LaunchpegBase.InitData",
          "name": "initData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialAmountForDevs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialAmountForPreMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxPerAddressDuringMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "initialTokenSet",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialPreMintStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPublicSaleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPublicSaleEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPreMintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPublicSalePrice",
          "type": "uint256"
        }
      ],
      "name": "initializePhases",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockSaleParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerAddressDuringMint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "preMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMintPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMintStartTime",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleEndTime",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSalePrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTime",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokePendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "seedAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmountForDevs",
          "type": "uint256"
        }
      ],
      "name": "setAmountForDevs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmountForPreMint",
          "type": "uint256"
        }
      ],
      "name": "setAmountForPreMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCollectionSize",
          "type": "uint256"
        }
      ],
      "name": "setCollectionSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxAmountPerUser",
          "type": "uint256"
        }
      ],
      "name": "setMaxPerAddressDuringMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperatorFilterRegistry",
          "type": "address"
        }
      ],
      "name": "setOperatorFilterRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner_",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPreMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setPreMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPreMintStartTime",
          "type": "uint256"
        }
      ],
      "name": "setPreMintStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPublicSaleEndTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPublicSalePrice",
          "type": "uint256"
        }
      ],
      "name": "setPublicSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPublicSaleStartTime",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feePercent",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newWithdrawAVAXStartTime",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawAVAXStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenSet",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "newTokenSet",
          "type": "uint256[]"
        }
      ],
      "name": "updateTokenSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userPendingPreMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAVAXStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb3dc0a01919c5b81beee0da7940231e5c00f7f7b494e72bf82b11d501dd506a",
  "receipt": {
    "to": null,
    "from": "0x88c74Ef80Dd5724f96b6d9e6d48464ffa8c7A095",
    "contractAddress": "0x9B7c9eee3db08F51d2E8648c3F913Bdf3cb9E6Dd",
    "transactionIndex": 8,
    "gasUsed": "5193232",
    "logsBloom": "0x
    "blockHash": "0x66e3230fa71f8bc242cf2324480e02099e56029120262ab2ad339793453db26a",
    "transactionHash": "0xdb3dc0a01919c5b81beee0da7940231e5c00f7f7b494e72bf82b11d501dd506a",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 28812876,
        "transactionHash": "0xdb3dc0a01919c5b81beee0da7940231e5c00f7f7b494e72bf82b11d501dd506a",
        "address": "0x9B7c9eee3db08F51d2E8648c3F913Bdf3cb9E6Dd",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x66e3230fa71f8bc242cf2324480e02099e56029120262ab2ad339793453db26a"
      }
    ],
    "blockNumber": 28812876,
    "cumulativeGasUsed": "5371043",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2f4e5b5aa7ef47523f540970c4ce4246",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Launchpeg__CanNotMintThisMany\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidAllowlistPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidJoeFeeCollector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidPhases\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidRoyaltyInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__LargerCollectionSizeNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyForDevReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__NotEligibleForAllowlistMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"avaxSent\",\"type\":\"uint256\"}],\"name\":\"Launchpeg__NotEnoughAVAX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__SaleParametersLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WithdrawAVAXNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongAddressesAndNumSlotsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__WrongPhase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NoPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingOwnableUpgradeable__PendingOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePausableUpgradeable__AlreadyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePausableUpgradeable__AlreadyUnpaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowlistSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"}],\"name\":\"AmountForDevsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForPreMint\",\"type\":\"uint256\"}],\"name\":\"AmountForPreMintSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AvaxWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"}],\"name\":\"CollectionSizeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"DevMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"JoeFeeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"}],\"name\":\"MaxPerAddressDuringMintSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorFilterRegistry\",\"type\":\"address\"}],\"name\":\"OperatorFilterRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"PhaseInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PreMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintPrice\",\"type\":\"uint256\"}],\"name\":\"PreMintPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"}],\"name\":\"PreMintStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleEndTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"}],\"name\":\"PublicSalePriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"PublicSaleStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleParametersLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenSet\",\"type\":\"uint256[]\"}],\"name\":\"TokenSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"URISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawAVAXStartTimeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountClaimedDuringPreMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForDevs\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForPreMint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedByDevs\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPreMint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMintedDuringPublicSale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfUsersWaitingForPremintClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfClaims\",\"type\":\"uint256\"}],\"name\":\"batchClaimPreMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPremint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum IERC1155LaunchpegBase.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"joeFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"}],\"internalType\":\"struct IERC1155LaunchpegBase.InitData\",\"name\":\"initData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmountForPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"initialTokenSet\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialPreMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPublicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPublicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPreMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPublicSalePrice\",\"type\":\"uint256\"}],\"name\":\"initializePhases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockSaleParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddressDuringMint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintStartTime\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleEndTime\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"seedAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmountForDevs\",\"type\":\"uint256\"}],\"name\":\"setAmountForDevs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmountForPreMint\",\"type\":\"uint256\"}],\"name\":\"setAmountForPreMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCollectionSize\",\"type\":\"uint256\"}],\"name\":\"setCollectionSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxAmountPerUser\",\"type\":\"uint256\"}],\"name\":\"setMaxPerAddressDuringMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperatorFilterRegistry\",\"type\":\"address\"}],\"name\":\"setOperatorFilterRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPreMintPrice\",\"type\":\"uint256\"}],\"name\":\"setPreMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPreMintStartTime\",\"type\":\"uint256\"}],\"name\":\"setPreMintStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPublicSaleEndTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPublicSalePrice\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPublicSaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feePercent\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawAVAXStartTime\",\"type\":\"uint256\"}],\"name\":\"setWithdrawAVAXStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newTokenSet\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userPendingPreMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAVAXStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"amountOfUsersWaitingForPremintClaim()\":{\"returns\":{\"_0\":\"The amount of users that still need to claim their tokens\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchClaimPreMint(uint256)\":{\"params\":{\"numberOfClaims\":\"The number of claims to do\"}},\"currentPhase()\":{\"returns\":{\"_0\":\"The current phase\"}},\"devMint(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to mint\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to grant\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize((address,address,uint256,string,string),uint256,uint256,uint256,uint256,uint256[])\":{\"params\":{\"initData\":\"The data used to initialize the base contract\",\"initialAmountForDevs\":\"The number of tokens reserved for the devs\",\"initialAmountForPreMint\":\"The number of tokens reserved for the pre-mint\",\"initialMaxPerAddressDuringMint\":\"The maximum number of tokens that can be minted per address\",\"initialMaxSupply\":\"The maximum number of tokens that can be minted\",\"initialTokenSet\":\"The token set\"}},\"initializePhases(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"initialPreMintPrice\":\"The price of a token during the pre-mint\",\"initialPreMintStartTime\":\"The start time of the pre-mint\",\"initialPublicSaleEndTime\":\"The end time of the public sale\",\"initialPublicSalePrice\":\"The price of a token during the public sale\",\"initialPublicSaleStartTime\":\"The start time of the public sale\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"lockSaleParameters()\":{\"details\":\"Once locked, it won't be possible to turn it back to false.\"},\"owner()\":{\"returns\":{\"_0\":\"The address of the current owner\"}},\"pause()\":{\"details\":\"Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"returns\":{\"_0\":\"The address of the current pending owner\"}},\"preMint(uint96)\":{\"params\":{\"amount\":\"The amount of tokens to mint\"}},\"publicSaleMint(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to mint\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to renounce\"}},\"revokeRole(bytes32,address)\":{\"details\":\"If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`\",\"params\":{\"account\":\"The address of the account\",\"role\":\"The role to revoke\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"`safeBatchTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\",\"params\":{\"amounts\":\"Amounts to transfer\",\"data\":\"Data to be used in the transfer callback\",\"from\":\"Address to transfer from\",\"ids\":\"TokenIDs to transfer\",\"to\":\"Address to transfer to\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"`safeTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\",\"params\":{\"amount\":\"Amount to transfer\",\"data\":\"Data to be used in the transfer callback\",\"from\":\"Address to transfer from\",\"id\":\"TokenID to transfer\",\"to\":\"Address to transfer to\"}},\"seedAllowlist(address[],uint256[])\":{\"params\":{\"addresses\":\"The addresses to update\",\"amounts\":\"The amounts to update\"}},\"setAmountForDevs(uint256)\":{\"params\":{\"newAmountForDevs\":\"The new amount for devs\"}},\"setAmountForPreMint(uint256)\":{\"params\":{\"newAmountForPreMint\":\"The new amount for pre-mint\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"`setApprovalForAll` wrapper to prevent the sender to approve a non-allowed operator\",\"params\":{\"approved\":\"Whether the operator is approved or not\",\"operator\":\"Address being approved\"}},\"setCollectionSize(uint256)\":{\"params\":{\"newCollectionSize\":\"The new collection size\"}},\"setMaxPerAddressDuringMint(uint256)\":{\"params\":{\"newMaxAmountPerUser\":\"The new max per address during mint\"}},\"setOperatorFilterRegistryAddress(address)\":{\"params\":{\"newOperatorFilterRegistry\":\"New operator filter registry\"}},\"setPreMintPrice(uint256)\":{\"params\":{\"newPreMintPrice\":\"The new pre-mint price\"}},\"setPreMintStartTime(uint256)\":{\"params\":{\"newPreMintStartTime\":\"The new pre-mint start time\"}},\"setPublicSaleEndTime(uint256)\":{\"params\":{\"newPublicSaleEndTime\":\"The new public sale end time\"}},\"setPublicSalePrice(uint256)\":{\"params\":{\"newPublicSalePrice\":\"The new public sale price\"}},\"setPublicSaleStartTime(uint256)\":{\"params\":{\"newPublicSaleStartTime\":\"The new public sale start time\"}},\"setRoyaltyInfo(address,uint96)\":{\"params\":{\"feePercent\":\"The royalty fee in basis points\",\"receiver\":\"The address to which the royalties will be sent\"}},\"setURI(string)\":{\"details\":\"This sets the URI for revealed tokens Only callable by project owner\",\"params\":{\"newURI\":\"Base URI to be set\"}},\"setWithdrawAVAXStartTime(uint256)\":{\"params\":{\"newWithdrawAVAXStartTime\":\"New public sale end time\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface ID\"},\"returns\":{\"_0\":\"isSupported True if the interface is supported\"}},\"tokenSet()\":{\"returns\":{\"_0\":\"The current token set\"}},\"unpause()\":{\"details\":\"Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused.\"},\"updateTokenSet(uint256[])\":{\"params\":{\"newTokenSet\":\"The new token set\"}},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The token ID\"},\"returns\":{\"_0\":\"uri The token URI\"}},\"userPendingPreMints(address)\":{\"params\":{\"user\":\"The user\"},\"returns\":{\"_0\":\"The amount of tokens that still need to be claimed\"}},\"withdrawAVAX(address)\":{\"params\":{\"to\":\"Recipient of the earned AVAX\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PROJECT_OWNER_ROLE()\":{\"notice\":\"Role granted to project owners\"},\"allowlist(address)\":{\"notice\":\"The number of tokens allowed to be minted per address during the pre-mint\"},\"amountClaimedDuringPreMint()\":{\"notice\":\"The number of tokens claimed for the pre-mint\"},\"amountForDevs()\":{\"notice\":\"The number of tokens reserved for the devs\"},\"amountForPreMint()\":{\"notice\":\"The number of tokens reserved for the pre-mint\"},\"amountMintedByDevs()\":{\"notice\":\"The number of tokens minted for the devs\"},\"amountMintedDuringPreMint()\":{\"notice\":\"The number of tokens minted for the pre-mint\"},\"amountMintedDuringPublicSale()\":{\"notice\":\"The number of tokens minted during the public sale\"},\"amountOfUsersWaitingForPremintClaim()\":{\"notice\":\"Returns the amount of users that still need to claim their tokens\"},\"batchClaimPreMint(uint256)\":{\"notice\":\"Mints the tokens bought during pre-mint\"},\"becomeOwner()\":{\"notice\":\"Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner\"},\"claimPremint()\":{\"notice\":\"Mints the tokens bought during pre-mint\"},\"collectionSize()\":{\"notice\":\"The collection size\"},\"currentPhase()\":{\"notice\":\"Returns the current phase\"},\"devMint(uint256)\":{\"notice\":\"Mints tokens for the devs\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants `role` to `account`.\"},\"initialize((address,address,uint256,string,string),uint256,uint256,uint256,uint256,uint256[])\":{\"notice\":\"Initializes the contract\"},\"initializePhases(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initializes the phases\"},\"joeFeeCollector()\":{\"notice\":\"The address to which the fees on the sale will be sent\"},\"joeFeePercent()\":{\"notice\":\"The fees collected by Joepegs on the sale benefits\"},\"lockSaleParameters()\":{\"notice\":\"Updates on the sale parameters can be locked to prevent any changes\"},\"locked()\":{\"notice\":\"This boolean can be turned on to prevent any changes on the sale parameters.\"},\"maxPerAddressDuringMint()\":{\"notice\":\"The maximum number of tokens that can be minted per address\"},\"name()\":{\"notice\":\"The name of the collection\"},\"numberMinted(address)\":{\"notice\":\"The number of tokens minted per address\"},\"operatorFilterRegistry()\":{\"notice\":\"Contract filtering allowed operators, preventing unauthorized contract to transfer NFTs By default, Launchpeg contracts are subscribed to OpenSea's Curated Subscription Address at 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\"},\"owner()\":{\"notice\":\"Returns the address of the current owner\"},\"pause()\":{\"notice\":\"Pauses the contract.\"},\"pendingOwner()\":{\"notice\":\"Returns the address of the current pending owner\"},\"preMint(uint96)\":{\"notice\":\"Buys tokens for the pre-mint\"},\"preMintPrice()\":{\"notice\":\"The price of a token during the pre-mint\"},\"preMintStartTime()\":{\"notice\":\"The start time of the pre-mint\"},\"publicSaleEndTime()\":{\"notice\":\"The end time of the public sale\"},\"publicSaleMint(uint256)\":{\"notice\":\"Buys tokens during public sale\"},\"publicSalePrice()\":{\"notice\":\"The price of a token during the public sale\"},\"publicSaleStartTime()\":{\"notice\":\"The start time of the public sale\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account.\"},\"revokePendingOwner()\":{\"notice\":\"Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes `role` from `account`.\"},\"seedAllowlist(address[],uint256[])\":{\"notice\":\"Updates the allowlist\"},\"setAmountForDevs(uint256)\":{\"notice\":\"Sets a new amount for devs\"},\"setAmountForPreMint(uint256)\":{\"notice\":\"Sets a new amount for pre-mint\"},\"setCollectionSize(uint256)\":{\"notice\":\"Sets a new collection size\"},\"setMaxPerAddressDuringMint(uint256)\":{\"notice\":\"Sets a new max per address during mint\"},\"setOperatorFilterRegistryAddress(address)\":{\"notice\":\"Set the operator filter registry address\"},\"setPendingOwner(address)\":{\"notice\":\"Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}\"},\"setPreMintPrice(uint256)\":{\"notice\":\"Sets a new pre-mint price\"},\"setPreMintStartTime(uint256)\":{\"notice\":\"Sets a new pre-mint start time\"},\"setPublicSaleEndTime(uint256)\":{\"notice\":\"Sets a new public sale end time\"},\"setPublicSalePrice(uint256)\":{\"notice\":\"Sets a new public sale price\"},\"setPublicSaleStartTime(uint256)\":{\"notice\":\"Sets a new public sale start time\"},\"setRoyaltyInfo(address,uint96)\":{\"notice\":\"Set the Royalty info\"},\"setURI(string)\":{\"notice\":\"Set the base URI\"},\"setWithdrawAVAXStartTime(uint256)\":{\"notice\":\"Set the withdraw AVAX start time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns true if the interface is supported\"},\"symbol()\":{\"notice\":\"The symbol of the collection\"},\"tokenSet()\":{\"notice\":\"Returns the current token set\"},\"unpause()\":{\"notice\":\"Unpauses the contract.\"},\"updateTokenSet(uint256[])\":{\"notice\":\"Updates the token set\"},\"uri(uint256)\":{\"notice\":\"Returns the token URI\"},\"userPendingPreMints(address)\":{\"notice\":\"Returns the amount of tokens that still need to be claimed by a user\"},\"withdrawAVAX(address)\":{\"notice\":\"Withdraw AVAX to the given recipient\"},\"withdrawAVAXStartTime()\":{\"notice\":\"Start time when funds can be withdrawn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC1155SingleBundle.sol\":\"ERC1155SingleBundle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":60},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/ERC1155LaunchpegBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {ERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {ERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport {SafePausableUpgradeable} from \\\"./utils/SafePausableUpgradeable.sol\\\";\\n\\nimport {IERC1155LaunchpegBase} from \\\"./interfaces/IERC1155LaunchpegBase.sol\\\";\\n\\nabstract contract ERC1155LaunchpegBase is\\n    IERC1155LaunchpegBase,\\n    ERC1155Upgradeable,\\n    ERC2981Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    SafePausableUpgradeable\\n{\\n    using StringsUpgradeable for uint256;\\n\\n    /// @notice Percentage base point\\n    uint256 private constant BASIS_POINT_PRECISION = 10_000;\\n\\n    /// @notice Role granted to project owners\\n    bytes32 public constant override PROJECT_OWNER_ROLE =\\n        keccak256(\\\"PROJECT_OWNER_ROLE\\\");\\n\\n    /**\\n     * @dev OpenSea's filter registry and subscription address\\n     */\\n    address private constant OPENSEA_FILTER_REGISTRY =\\n        0x000000000000AAeB6D7670E522A718067333cd4E;\\n    address private constant OPENSEA_SUBSCRIPTION =\\n        0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\\n    /// @notice Contract filtering allowed operators, preventing unauthorized contract to transfer NFTs\\n    /// By default, Launchpeg contracts are subscribed to OpenSea's Curated Subscription Address at 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\\n    IOperatorFilterRegistry public override operatorFilterRegistry;\\n\\n    /// @notice The fees collected by Joepegs on the sale benefits\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public override joeFeePercent;\\n\\n    /// @notice The address to which the fees on the sale will be sent\\n    address public override joeFeeCollector;\\n\\n    /// @notice Start time when funds can be withdrawn\\n    uint256 public override withdrawAVAXStartTime;\\n\\n    /// @notice This boolean can be turned on to prevent any changes on the sale parameters.\\n    /// @dev Once set to true, it shouldn't be possible to turn it back to false.\\n    bool public override locked;\\n\\n    /// @notice The name of the collection\\n    string public override name;\\n\\n    /// @notice The symbol of the collection\\n    string public override symbol;\\n\\n    /// @notice Allow spending tokens from addresses with balance\\n    /// Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n    /// from an EOA.\\n    modifier onlyAllowedOperator(address from) virtual {\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Allow approving tokens transfers\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    /// @notice The function updating sale parameters can only be called when the contract is not locked\\n    modifier contractNotLocked() {\\n        if (locked) {\\n            revert Launchpeg__SaleParametersLocked();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the current phase matches the required phase\\n    modifier atPhase(Phase phase) {\\n        if (currentPhase() != phase) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Initialize the contract\\n    /// @param initData The data to initialize the contract\\n    function __ERC1155LaunchpegBase_init(\\n        InitData calldata initData\\n    ) internal onlyInitializing {\\n        __ERC1155_init(\\\"\\\");\\n        __ERC2981_init();\\n        __ReentrancyGuard_init();\\n        __SafeAccessControlEnumerable_init();\\n\\n        // Default royalty is 5%\\n        _setDefaultRoyalty(initData.royaltyReceiver, 500);\\n\\n        // Initialize the operator filter registry and subscribe to OpenSea's list\\n        IOperatorFilterRegistry _operatorFilterRegistry = IOperatorFilterRegistry(\\n                OPENSEA_FILTER_REGISTRY\\n            );\\n\\n        if (address(_operatorFilterRegistry).code.length > 0) {\\n            _operatorFilterRegistry.registerAndSubscribe(\\n                address(this),\\n                OPENSEA_SUBSCRIPTION\\n            );\\n        }\\n\\n        _updateOperatorFilterRegistryAddress(_operatorFilterRegistry);\\n\\n        name = initData.collectionName;\\n        symbol = initData.collectionSymbol;\\n\\n        _initializeJoeFee(initData.joeFeePercent, initData.owner);\\n\\n        grantRole(PROJECT_OWNER_ROLE, initData.royaltyReceiver);\\n        _transferOwnership(initData.owner);\\n    }\\n\\n    /// @notice Returns the current phase\\n    /// @return phase Current phase\\n    function currentPhase() public view virtual returns (Phase);\\n\\n    /// @notice Returns the token URI\\n    /// @param tokenId The token ID\\n    /// @return uri The token URI\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\\n    }\\n\\n    /// @notice Returns true if the interface is supported\\n    /// @param interfaceId The interface ID\\n    /// @return isSupported True if the interface is supported\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(\\n            SafePausableUpgradeable,\\n            ERC1155Upgradeable,\\n            ERC2981Upgradeable\\n        )\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155LaunchpegBase).interfaceId ||\\n            ERC1155Upgradeable.supportsInterface(interfaceId) ||\\n            ERC2981Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Set the base URI\\n    /// @dev This sets the URI for revealed tokens\\n    /// Only callable by project owner\\n    /// @param newURI Base URI to be set\\n    function setURI(string calldata newURI) external override onlyOwner {\\n        _setURI(newURI);\\n        emit URISet(newURI);\\n    }\\n\\n    /// @notice Set the withdraw AVAX start time.\\n    /// @param newWithdrawAVAXStartTime New public sale end time\\n    function setWithdrawAVAXStartTime(\\n        uint256 newWithdrawAVAXStartTime\\n    ) external override onlyOwner {\\n        withdrawAVAXStartTime = newWithdrawAVAXStartTime;\\n        emit WithdrawAVAXStartTimeSet(newWithdrawAVAXStartTime);\\n    }\\n\\n    /// @notice Set the Royalty info\\n    /// @param receiver The address to which the royalties will be sent\\n    /// @param feePercent The royalty fee in basis points\\n    function setRoyaltyInfo(\\n        address receiver,\\n        uint96 feePercent\\n    ) external override onlyOwner {\\n        // Royalty fees are limited to 25%\\n        if (feePercent > 2_500) {\\n            revert Launchpeg__InvalidRoyaltyInfo();\\n        }\\n        _setDefaultRoyalty(receiver, feePercent);\\n        emit DefaultRoyaltySet(receiver, feePercent);\\n    }\\n\\n    /// @notice Set the operator filter registry address\\n    /// @param newOperatorFilterRegistry New operator filter registry\\n    function setOperatorFilterRegistryAddress(\\n        address newOperatorFilterRegistry\\n    ) external override onlyOwner {\\n        _updateOperatorFilterRegistryAddress(\\n            IOperatorFilterRegistry(newOperatorFilterRegistry)\\n        );\\n    }\\n\\n    /// @notice Updates on the sale parameters can be locked to prevent any changes\\n    /// @dev Once locked, it won't be possible to turn it back to false.\\n    function lockSaleParameters()\\n        external\\n        override\\n        onlyOwner\\n        contractNotLocked\\n    {\\n        locked = true;\\n\\n        emit SaleParametersLocked();\\n    }\\n\\n    /// @notice Withdraw AVAX to the given recipient\\n    /// @param to Recipient of the earned AVAX\\n    function withdrawAVAX(\\n        address to\\n    ) external override onlyOwnerOrRole(PROJECT_OWNER_ROLE) nonReentrant {\\n        if (\\n            block.timestamp < withdrawAVAXStartTime ||\\n            withdrawAVAXStartTime == 0\\n        ) {\\n            revert Launchpeg__WithdrawAVAXNotAvailable();\\n        }\\n\\n        uint256 amount = address(this).balance;\\n        uint256 fee;\\n        uint256 feePercent = joeFeePercent;\\n\\n        if (feePercent > 0) {\\n            fee = (amount * feePercent) / BASIS_POINT_PRECISION;\\n            amount = amount - fee;\\n\\n            _send(joeFeeCollector, fee);\\n        }\\n\\n        _send(to, amount);\\n\\n        emit AvaxWithdraw(to, amount, fee);\\n    }\\n\\n    /// @dev `setApprovalForAll` wrapper to prevent the sender to approve a non-allowed operator\\n    /// @param operator Address being approved\\n    /// @param approved Whether the operator is approved or not\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /// @dev `safeTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\\n    /// @param from Address to transfer from\\n    /// @param to Address to transfer to\\n    /// @param id TokenID to transfer\\n    /// @param amount Amount to transfer\\n    /// @param data Data to be used in the transfer callback\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /// @dev `safeBatchTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\\n    /// @param from Address to transfer from\\n    /// @param to Address to transfer to\\n    /// @param ids TokenIDs to transfer\\n    /// @param amounts Amounts to transfer\\n    /// @param data Data to be used in the transfer callback\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override onlyAllowedOperator(from) {\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\\n    /// @param newJoeFeePercent The fees collected by Joepegs on the sale benefits\\n    /// @param newJoeFeeCollector The address to which the fees on the sale will be sent\\n    function _initializeJoeFee(\\n        uint256 newJoeFeePercent,\\n        address newJoeFeeCollector\\n    ) internal {\\n        if (newJoeFeePercent > BASIS_POINT_PRECISION) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (newJoeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n        joeFeePercent = newJoeFeePercent;\\n        joeFeeCollector = newJoeFeeCollector;\\n        emit JoeFeeInitialized(newJoeFeePercent, newJoeFeeCollector);\\n    }\\n\\n    /**\\n     * @dev Update the address that the contract will make OperatorFilter checks against. When set to the zero\\n     * address, checks will be bypassed.\\n     * @param newRegistry The address of the new OperatorFilterRegistry\\n     */\\n    function _updateOperatorFilterRegistryAddress(\\n        IOperatorFilterRegistry newRegistry\\n    ) private {\\n        operatorFilterRegistry = newRegistry;\\n        emit OperatorFilterRegistryUpdated(address(newRegistry));\\n    }\\n\\n    /// @dev Checks if the address (the operator) trying to transfer the NFT is allowed\\n    /// @param operator Address of the operator\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(registry).code.length > 0) {\\n            if (!registry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends AVAX to the given address\\n     * @param to Address to send AVAX to\\n     * @param amount Amount of AVAX to send\\n     */\\n    function _send(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Launchpeg__TransferFailed();\\n        }\\n    }\\n\\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\\n    /// @param price The price paid by the sender for minting NFTs\\n    function _refundIfOver(uint256 price) internal {\\n        if (msg.value < price) {\\n            revert Launchpeg__NotEnoughAVAX(msg.value);\\n        }\\n        if (msg.value > price) {\\n            (bool success, ) = msg.sender.call{value: msg.value - price}(\\\"\\\");\\n            if (!success) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4cdc90acd4658ad955c44259a3fed4ad3ebdac55611e846114e9388d4bee1728\",\"license\":\"MIT\"},\"contracts/ERC1155SingleBundle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport {ERC1155LaunchpegBase} from \\\"./ERC1155LaunchpegBase.sol\\\";\\nimport {IERC1155LaunchpegSingleBundle, IERC1155LaunchpegBase} from \\\"./interfaces/IERC1155LaunchpegSingleBundle.sol\\\";\\n\\ncontract ERC1155SingleBundle is\\n    IERC1155LaunchpegSingleBundle,\\n    ERC1155LaunchpegBase\\n{\\n    using SafeCast for uint256;\\n\\n    /// @notice The collection size\\n    uint128 public override collectionSize;\\n    /// @notice The maximum number of tokens that can be minted per address\\n    uint128 public override maxPerAddressDuringMint;\\n\\n    /// @notice The number of tokens reserved for the devs\\n    uint128 public override amountForDevs;\\n    /// @notice The number of tokens minted for the devs\\n    uint128 public override amountMintedByDevs;\\n\\n    /// @notice The price of a token during the pre-mint\\n    uint128 public override preMintPrice;\\n    /// @notice The start time of the pre-mint\\n    uint128 public override preMintStartTime;\\n\\n    /// @notice The number of tokens reserved for the pre-mint\\n    uint128 public override amountForPreMint;\\n    /// @notice The number of tokens minted for the pre-mint\\n    uint128 public override amountMintedDuringPreMint;\\n    /// @notice The number of tokens claimed for the pre-mint\\n    uint256 public override amountClaimedDuringPreMint;\\n\\n    /// @notice The price of a token during the public sale\\n    uint128 public override publicSalePrice;\\n    /// @notice The start time of the public sale\\n    uint128 public override publicSaleStartTime;\\n    /// @notice The end time of the public sale\\n    uint128 public override publicSaleEndTime;\\n    /// @notice The number of tokens minted during the public sale\\n    uint128 public override amountMintedDuringPublicSale;\\n\\n    /// @notice The number of tokens allowed to be minted per address during the pre-mint\\n    mapping(address => uint256) public override allowlist;\\n    /// @notice The number of tokens minted per address\\n    mapping(address => uint256) public override numberMinted;\\n\\n    uint256[] private _tokenSet;\\n    PreMintDataSet private _pendingPreMints;\\n\\n    modifier isEOA() {\\n        if (tx.origin != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract\\n    /// @param initData The data used to initialize the base contract\\n    /// @param initialMaxSupply The maximum number of tokens that can be minted\\n    /// @param initialAmountForDevs The number of tokens reserved for the devs\\n    /// @param initialAmountForPreMint The number of tokens reserved for the pre-mint\\n    /// @param initialMaxPerAddressDuringMint The maximum number of tokens that can be minted per address\\n    /// @param initialTokenSet The token set\\n    function initialize(\\n        InitData calldata initData,\\n        uint256 initialMaxSupply,\\n        uint256 initialAmountForDevs,\\n        uint256 initialAmountForPreMint,\\n        uint256 initialMaxPerAddressDuringMint,\\n        uint256[] calldata initialTokenSet\\n    ) external override initializer {\\n        __ERC1155LaunchpegBase_init(initData);\\n\\n        if (amountForDevs + amountForPreMint > initialMaxSupply) {\\n            revert Launchpeg__LargerCollectionSizeNeeded();\\n        }\\n\\n        collectionSize = initialMaxSupply.toUint128();\\n        maxPerAddressDuringMint = initialMaxPerAddressDuringMint.toUint128();\\n\\n        amountForDevs = initialAmountForDevs.toUint128();\\n        amountForPreMint = initialAmountForPreMint.toUint128();\\n        _tokenSet = initialTokenSet;\\n    }\\n\\n    /// @notice Initializes the phases\\n    /// @param initialPreMintStartTime The start time of the pre-mint\\n    /// @param initialPublicSaleStartTime The start time of the public sale\\n    /// @param initialPublicSaleEndTime The end time of the public sale\\n    /// @param initialPreMintPrice The price of a token during the pre-mint\\n    /// @param initialPublicSalePrice The price of a token during the public sale\\n    function initializePhases(\\n        uint256 initialPreMintStartTime,\\n        uint256 initialPublicSaleStartTime,\\n        uint256 initialPublicSaleEndTime,\\n        uint256 initialPreMintPrice,\\n        uint256 initialPublicSalePrice\\n    ) external override onlyOwner atPhase(Phase.NotStarted) {\\n        if (\\n            initialPreMintStartTime < block.timestamp ||\\n            initialPublicSaleStartTime < initialPreMintStartTime ||\\n            initialPublicSaleEndTime < initialPublicSaleStartTime\\n        ) {\\n            revert Launchpeg__InvalidPhases();\\n        }\\n\\n        if (initialPreMintPrice > initialPublicSalePrice) {\\n            revert Launchpeg__InvalidAllowlistPrice();\\n        }\\n\\n        preMintPrice = initialPreMintPrice.toUint128();\\n        publicSalePrice = initialPublicSalePrice.toUint128();\\n        preMintStartTime = initialPreMintStartTime.toUint128();\\n\\n        publicSaleStartTime = initialPublicSaleStartTime.toUint128();\\n        publicSaleEndTime = initialPublicSaleEndTime.toUint128();\\n\\n        withdrawAVAXStartTime = initialPublicSaleStartTime + 3 days;\\n\\n        emit PhaseInitialized(\\n            preMintStartTime,\\n            publicSaleStartTime,\\n            publicSaleEndTime,\\n            initialPreMintPrice,\\n            initialPublicSalePrice,\\n            initialPublicSaleStartTime + 3 days\\n        );\\n    }\\n\\n    /// @notice Returns the current token set\\n    /// @return The current token set\\n    function tokenSet() external view override returns (uint256[] memory) {\\n        return _tokenSet;\\n    }\\n\\n    /// @notice Returns the current phase\\n    /// @return The current phase\\n    function currentPhase()\\n        public\\n        view\\n        override(ERC1155LaunchpegBase, IERC1155LaunchpegBase)\\n        returns (Phase)\\n    {\\n        if (\\n            preMintStartTime == 0 ||\\n            publicSaleStartTime == 0 ||\\n            publicSaleEndTime == 0 ||\\n            block.timestamp < preMintStartTime\\n        ) {\\n            return Phase.NotStarted;\\n        } else if (\\n            amountMintedDuringPreMint + amountMintedDuringPublicSale ==\\n            collectionSize\\n        ) {\\n            return Phase.Ended;\\n        } else if (\\n            block.timestamp >= preMintStartTime &&\\n            block.timestamp < publicSaleStartTime\\n        ) {\\n            return Phase.PreMint;\\n        } else if (\\n            block.timestamp >= publicSaleStartTime &&\\n            block.timestamp < publicSaleEndTime\\n        ) {\\n            return Phase.PublicSale;\\n        }\\n        return Phase.Ended;\\n    }\\n\\n    /// @notice Returns the amount of users that still need to claim their tokens\\n    /// @return The amount of users that still need to claim their tokens\\n    function amountOfUsersWaitingForPremintClaim()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _pendingPreMints.preMintDataArr.length;\\n    }\\n\\n    /// @notice Returns the amount of tokens that still need to be claimed by a user\\n    /// @param user The user\\n    /// @return The amount of tokens that still need to be claimed\\n    function userPendingPreMints(\\n        address user\\n    ) public view override returns (uint256) {\\n        uint256 userIndex = _pendingPreMints.indexes[user];\\n\\n        if (userIndex == 0) {\\n            return 0;\\n        }\\n\\n        return _pendingPreMints.preMintDataArr[userIndex - 1].quantity;\\n    }\\n\\n    /// @notice Returns true if the interface is supported\\n    /// @param interfaceId The interface ID\\n    /// @return isSupported True if the interface is supported\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override returns (bool) {\\n        return\\n            interfaceId == type(IERC1155LaunchpegSingleBundle).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Mints tokens for the devs\\n    /// @param amount The amount of tokens to mint\\n    function devMint(\\n        uint256 amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\\n        nonReentrant\\n    {\\n        uint256 amountAlreadyMinted = amountMintedByDevs;\\n\\n        if (amountAlreadyMinted + amount > amountForDevs)\\n            revert Launchpeg__MaxSupplyForDevReached();\\n\\n        amountMintedByDevs = (amountAlreadyMinted + amount).toUint128();\\n\\n        _mint(msg.sender, amount);\\n\\n        emit DevMint(msg.sender, amount);\\n    }\\n\\n    /// @notice Buys tokens for the pre-mint\\n    /// @param amount The amount of tokens to mint\\n    function preMint(\\n        uint96 amount\\n    )\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.PreMint)\\n        nonReentrant\\n    {\\n        if (amount == 0) {\\n            revert Launchpeg__InvalidQuantity();\\n        }\\n\\n        uint256 userAllowlistAmount = allowlist[msg.sender];\\n        if (amount > userAllowlistAmount) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n\\n        uint256 amountAlreadyPreMinted = amountMintedDuringPreMint;\\n        if (amountAlreadyPreMinted + amount > amountForPreMint) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n\\n        PreMintDataSet storage pmDataSet = _pendingPreMints;\\n        uint256 userIndex = pmDataSet.indexes[msg.sender];\\n\\n        if (userIndex != 0) {\\n            pmDataSet.preMintDataArr[userIndex - 1].quantity += amount;\\n        } else {\\n            PreMintData memory preMintData = PreMintData({\\n                sender: msg.sender,\\n                quantity: amount\\n            });\\n            pmDataSet.preMintDataArr.push(preMintData);\\n            pmDataSet.indexes[msg.sender] = pmDataSet.preMintDataArr.length;\\n        }\\n\\n        amountMintedDuringPreMint = (amountAlreadyPreMinted + amount)\\n            .toUint128();\\n        allowlist[msg.sender] = userAllowlistAmount - amount;\\n\\n        uint256 totalPrice = uint256(preMintPrice) * uint256(amount);\\n        _refundIfOver(totalPrice);\\n\\n        emit PreMint(msg.sender, amount, totalPrice);\\n    }\\n\\n    /// @notice Mints the tokens bought during pre-mint\\n    function claimPremint() external override whenNotPaused nonReentrant {\\n        if (block.timestamp < publicSaleStartTime) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n\\n        PreMintDataSet storage pmDataSet = _pendingPreMints;\\n\\n        uint96 preMintQuantity;\\n        uint256 userIndex = pmDataSet.indexes[msg.sender];\\n\\n        if (userIndex != 0)\\n            preMintQuantity = pmDataSet.preMintDataArr[userIndex - 1].quantity;\\n\\n        if (preMintQuantity != 0) {\\n            uint256 lastIndex = pmDataSet.preMintDataArr.length - 1;\\n            if (lastIndex != userIndex - 1) {\\n                PreMintData memory lastPreMintData = pmDataSet.preMintDataArr[\\n                    lastIndex\\n                ];\\n                pmDataSet.preMintDataArr[userIndex - 1] = lastPreMintData;\\n                pmDataSet.indexes[lastPreMintData.sender] = userIndex;\\n            }\\n            pmDataSet.preMintDataArr.pop();\\n            delete pmDataSet.indexes[msg.sender];\\n        } else {\\n            revert Launchpeg__InvalidClaim();\\n        }\\n\\n        amountClaimedDuringPreMint += preMintQuantity;\\n\\n        _mint(msg.sender, preMintQuantity);\\n    }\\n\\n    /// @notice Mints the tokens bought during pre-mint\\n    /// @param numberOfClaims The number of claims to do\\n    function batchClaimPreMint(\\n        uint256 numberOfClaims\\n    ) external override whenNotPaused nonReentrant {\\n        if (block.timestamp < publicSaleStartTime) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n\\n        uint256 initialRemainingPreMints = _pendingPreMints\\n            .preMintDataArr\\n            .length;\\n\\n        uint256 remainingPreMints = initialRemainingPreMints;\\n        uint256 tokenPreMinted = 0;\\n\\n        while (remainingPreMints > 0 && numberOfClaims > 0) {\\n            PreMintData memory preMintData = _pendingPreMints.preMintDataArr[\\n                remainingPreMints - 1\\n            ];\\n\\n            delete _pendingPreMints.indexes[preMintData.sender];\\n\\n            tokenPreMinted += preMintData.quantity;\\n            remainingPreMints--;\\n            numberOfClaims--;\\n\\n            _mint(preMintData.sender, preMintData.quantity);\\n        }\\n\\n        amountClaimedDuringPreMint += tokenPreMinted;\\n\\n        // Removing the pre-minted tokens from the array all at once\\n        PreMintData[] storage preMintDataArr = _pendingPreMints.preMintDataArr;\\n        assembly {\\n            sstore(preMintDataArr.slot, remainingPreMints)\\n        }\\n    }\\n\\n    /// @notice Buys tokens during public sale\\n    /// @param amount The amount of tokens to mint\\n    function publicSaleMint(\\n        uint256 amount\\n    )\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        atPhase(Phase.PublicSale)\\n        nonReentrant\\n        isEOA\\n    {\\n        if (\\n            numberMinted[msg.sender] +\\n                userPendingPreMints(msg.sender) +\\n                amount >\\n            maxPerAddressDuringMint\\n        ) {\\n            revert Launchpeg__CanNotMintThisMany();\\n        }\\n\\n        if (amount > _availableSupply()) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n\\n        amountMintedDuringPublicSale += amount.toUint128();\\n\\n        _mint(msg.sender, amount);\\n        _refundIfOver(publicSalePrice * amount);\\n    }\\n\\n    /// @notice Updates the token set\\n    /// @param newTokenSet The new token set\\n    function updateTokenSet(\\n        uint256[] calldata newTokenSet\\n    ) external override onlyOwner {\\n        _tokenSet = newTokenSet;\\n        emit TokenSetUpdated(newTokenSet);\\n    }\\n\\n    /// @notice Updates the allowlist\\n    /// @param addresses The addresses to update\\n    /// @param amounts The amounts to update\\n    function seedAllowlist(\\n        address[] calldata addresses,\\n        uint256[] calldata amounts\\n    ) external override onlyOwner {\\n        uint256 addressesLength = addresses.length;\\n        if (addressesLength != amounts.length) {\\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\\n        }\\n        for (uint256 i; i < addressesLength; i++) {\\n            allowlist[addresses[i]] = amounts[i];\\n        }\\n\\n        emit AllowlistSeeded();\\n    }\\n\\n    /// @notice Sets a new pre-mint start time\\n    /// @param newPreMintStartTime The new pre-mint start time\\n    function setPreMintStartTime(\\n        uint256 newPreMintStartTime\\n    ) external override onlyOwner contractNotLocked {\\n        if (newPreMintStartTime > publicSaleStartTime)\\n            revert Launchpeg__InvalidPhases();\\n\\n        preMintStartTime = newPreMintStartTime.toUint128();\\n        emit PreMintStartTimeSet(newPreMintStartTime);\\n    }\\n\\n    /// @notice Sets a new public sale start time\\n    /// @param newPublicSaleStartTime The new public sale start time\\n    function setPublicSaleStartTime(\\n        uint256 newPublicSaleStartTime\\n    ) external override onlyOwner contractNotLocked {\\n        if (newPublicSaleStartTime > publicSaleEndTime)\\n            revert Launchpeg__InvalidPhases();\\n\\n        publicSaleStartTime = newPublicSaleStartTime.toUint128();\\n        emit PublicSaleStartTimeSet(newPublicSaleStartTime);\\n    }\\n\\n    /// @notice Sets a new public sale end time\\n    /// @param newPublicSaleEndTime The new public sale end time\\n    function setPublicSaleEndTime(\\n        uint256 newPublicSaleEndTime\\n    ) external override onlyOwner contractNotLocked {\\n        if (newPublicSaleEndTime < publicSaleStartTime)\\n            revert Launchpeg__InvalidPhases();\\n\\n        publicSaleEndTime = newPublicSaleEndTime.toUint128();\\n        emit PublicSaleEndTimeSet(newPublicSaleEndTime);\\n    }\\n\\n    /// @notice Sets a new amount for devs\\n    /// @param newAmountForDevs The new amount for devs\\n    function setAmountForDevs(\\n        uint256 newAmountForDevs\\n    ) external override onlyOwner contractNotLocked {\\n        if (amountMintedByDevs > newAmountForDevs) {\\n            revert Launchpeg__MaxSupplyForDevReached();\\n        }\\n\\n        amountForDevs = newAmountForDevs.toUint128();\\n        emit AmountForDevsSet(newAmountForDevs);\\n    }\\n\\n    /// @notice Sets a new amount for pre-mint\\n    /// @param newAmountForPreMint The new amount for pre-mint\\n    function setAmountForPreMint(\\n        uint256 newAmountForPreMint\\n    ) external override onlyOwner contractNotLocked {\\n        if (amountMintedDuringPreMint > newAmountForPreMint) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n\\n        amountForPreMint = newAmountForPreMint.toUint128();\\n        emit AmountForPreMintSet(newAmountForPreMint);\\n    }\\n\\n    /// @notice Sets a new pre-mint price\\n    /// @param newPreMintPrice The new pre-mint price\\n    function setPreMintPrice(\\n        uint256 newPreMintPrice\\n    ) external override onlyOwner contractNotLocked {\\n        if (newPreMintPrice > publicSalePrice)\\n            revert Launchpeg__InvalidAllowlistPrice();\\n\\n        preMintPrice = newPreMintPrice.toUint128();\\n        emit PreMintPriceSet(newPreMintPrice);\\n    }\\n\\n    /// @notice Sets a new public sale price\\n    /// @param newPublicSalePrice The new public sale price\\n    function setPublicSalePrice(\\n        uint256 newPublicSalePrice\\n    ) external override onlyOwner contractNotLocked {\\n        if (newPublicSalePrice < preMintPrice)\\n            revert Launchpeg__InvalidAllowlistPrice();\\n\\n        publicSalePrice = newPublicSalePrice.toUint128();\\n        emit PublicSalePriceSet(newPublicSalePrice);\\n    }\\n\\n    /// @notice Sets a new collection size\\n    /// @param newCollectionSize The new collection size\\n    function setCollectionSize(\\n        uint256 newCollectionSize\\n    ) external override onlyOwner contractNotLocked {\\n        if (\\n            newCollectionSize < amountForDevs + amountForPreMint ||\\n            newCollectionSize <\\n            amountMintedDuringPreMint +\\n                amountMintedDuringPublicSale +\\n                amountForDevs\\n        ) revert Launchpeg__LargerCollectionSizeNeeded();\\n\\n        collectionSize = newCollectionSize.toUint128();\\n        emit CollectionSizeSet(newCollectionSize);\\n    }\\n\\n    /// @notice Sets a new max per address during mint\\n    /// @param newMaxAmountPerUser The new max per address during mint\\n    function setMaxPerAddressDuringMint(\\n        uint256 newMaxAmountPerUser\\n    ) external override onlyOwner contractNotLocked {\\n        maxPerAddressDuringMint = newMaxAmountPerUser.toUint128();\\n        emit MaxPerAddressDuringMintSet(newMaxAmountPerUser);\\n    }\\n\\n    /// @dev Returns the available supply\\n    /// @return The available supply\\n    function _availableSupply() internal view returns (uint256) {\\n        return\\n            collectionSize -\\n            amountMintedDuringPreMint -\\n            amountMintedDuringPublicSale -\\n            amountForDevs;\\n    }\\n\\n    /// @dev Mints every token in the token set\\n    /// @param to The address to mint to\\n    /// @param amount The amount of token sets to mint\\n    function _mint(address to, uint256 amount) internal {\\n        numberMinted[to] += amount;\\n\\n        uint256 tokenAmount = _tokenSet.length;\\n        uint256[] memory amounts = new uint256[](tokenAmount);\\n        for (uint i = 0; i < tokenAmount; i++) {\\n            amounts[i] = amount;\\n        }\\n\\n        _mintBatch(to, _tokenSet, amounts, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4761bd8c4e6d0ceb00327066cd3466a09733eb7e7c657147e256698821d4a4bf\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// LaunchpegFactory\\nerror LaunchpegFactory__InvalidBatchReveal();\\nerror LaunchpegFactory__InvalidImplementation();\\n\\n// Launchpeg\\nerror Launchpeg__BatchRevealAlreadyInitialized();\\nerror Launchpeg__BatchRevealDisabled();\\nerror Launchpeg__BatchRevealNotInitialized();\\nerror Launchpeg__BatchRevealStarted();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidBatchReveal();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidClaim();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxPerAddressDuringMint();\\nerror Launchpeg__InvalidOwner();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidQuantity();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__InvalidPhases();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__NotInitialized();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__SaleParametersLocked();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WithdrawAVAXNotAvailable();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__AddressZero();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafePausableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\\n// OperatorFilterer\\nerror OperatorNotAllowed(address operator);\\n\",\"keccak256\":\"0xcf050d6e1a22c04b262707b5e3bd29f8fccfb1cd3ca539d6774cb5d9012f4257\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155LaunchpegBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IOperatorFilterRegistry} from \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\ninterface IERC1155LaunchpegBase {\\n    /// @dev Emitted on updateOperatorFilterRegistryAddress()\\n    /// @param operatorFilterRegistry New operator filter registry\\n    event OperatorFilterRegistryUpdated(address operatorFilterRegistry);\\n\\n    /// @dev Emitted on _setDefaultRoyalty()\\n    /// @param receiver Royalty fee collector\\n    /// @param feePercent Royalty fee percent in basis point\\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\\n\\n    /// @dev Emitted on setWithdrawAVAXStartTime()\\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\\n\\n    /// @dev Emitted on initializeJoeFee()\\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\\n    /// @param feeCollector The address to which the fees on the sale will be sent\\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\\n\\n    /// @dev Emitted on withdrawAVAX()\\n    /// @param sender The address that withdrew the tokens\\n    /// @param amount Amount of AVAX transfered to `sender`\\n    /// @param fee Amount of AVAX paid to the fee collector\\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\\n\\n    /// @dev Emitted on setURI()\\n    /// @param uri The new base URI\\n    event URISet(string uri);\\n\\n    /// @dev Emitted on lockSaleParameters()\\n    event SaleParametersLocked();\\n\\n    struct InitData {\\n        address owner;\\n        address royaltyReceiver;\\n        uint256 joeFeePercent;\\n        string collectionName;\\n        string collectionSymbol;\\n    }\\n\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external view returns (bytes32);\\n\\n    function operatorFilterRegistry()\\n        external\\n        view\\n        returns (IOperatorFilterRegistry);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function locked() external view returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function setURI(string memory newURI) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 withdrawAVAXStartTime) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function setOperatorFilterRegistryAddress(\\n        address operatorFilterRegistry\\n    ) external;\\n\\n    function lockSaleParameters() external;\\n\\n    function withdrawAVAX(address to) external;\\n}\\n\",\"keccak256\":\"0xd411be63182c9fa2e63cd748836f153f8c7c0ad0f72001b907111dbc1ffc10f6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155LaunchpegSingleBundle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IERC1155LaunchpegBase} from \\\"./IERC1155LaunchpegBase.sol\\\";\\n\\ninterface IERC1155LaunchpegSingleBundle is IERC1155LaunchpegBase {\\n    event AllowlistSeeded();\\n    event PreMintStartTimeSet(uint256 preMintStartTime);\\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\\n    event AmountForDevsSet(uint256 amountForDevs);\\n    event AmountForPreMintSet(uint256 amountForPreMint);\\n    event PreMintPriceSet(uint256 preMintPrice);\\n    event PublicSalePriceSet(uint256 publicSalePrice);\\n    event MaxPerAddressDuringMintSet(uint256 maxPerAddressDuringMint);\\n    event CollectionSizeSet(uint256 collectionSize);\\n    event PhaseInitialized(\\n        uint256 preMintStartTime,\\n        uint256 publicSaleStartTime,\\n        uint256 publicSaleEndTime,\\n        uint256 preMintPrice,\\n        uint256 salePrice,\\n        uint256 withdrawAVAXStartTime\\n    );\\n    event DevMint(address indexed sender, uint256 quantity);\\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\\n    event TokenSetUpdated(uint256[] tokenSet);\\n\\n    struct PreMintData {\\n        address sender;\\n        uint96 quantity;\\n    }\\n\\n    struct PreMintDataSet {\\n        PreMintData[] preMintDataArr;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    function collectionSize() external view returns (uint128);\\n\\n    function maxPerAddressDuringMint() external view returns (uint128);\\n\\n    function amountForDevs() external view returns (uint128);\\n\\n    function amountMintedByDevs() external view returns (uint128);\\n\\n    function preMintPrice() external view returns (uint128);\\n\\n    function preMintStartTime() external view returns (uint128);\\n\\n    function amountForPreMint() external view returns (uint128);\\n\\n    function amountMintedDuringPreMint() external view returns (uint128);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function publicSalePrice() external view returns (uint128);\\n\\n    function publicSaleStartTime() external view returns (uint128);\\n\\n    function publicSaleEndTime() external view returns (uint128);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint128);\\n\\n    function allowlist(address account) external view returns (uint256);\\n\\n    function numberMinted(address account) external view returns (uint256);\\n\\n    function initialize(\\n        IERC1155LaunchpegBase.InitData calldata initData,\\n        uint256 initialMaxSupply,\\n        uint256 initialAmountForDevs,\\n        uint256 initialAmountForPreMint,\\n        uint256 initialMaxPerAddressDuringMint,\\n        uint256[] calldata initialTokenSet\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 initialPreMintStartTime,\\n        uint256 initialPublicSaleStartTime,\\n        uint256 initialPublicSaleEndTime,\\n        uint256 initialPreMintPrice,\\n        uint256 initialPublicSalePrice\\n    ) external;\\n\\n    function tokenSet() external view returns (uint256[] memory);\\n\\n    function amountOfUsersWaitingForPremintClaim()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userPendingPreMints(\\n        address account\\n    ) external view returns (uint256);\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 quantity) external payable;\\n\\n    function claimPremint() external;\\n\\n    function batchClaimPreMint(uint256 quantity) external;\\n\\n    function publicSaleMint(uint256 quantity) external payable;\\n\\n    function updateTokenSet(uint256[] calldata newTokenSet) external;\\n\\n    function seedAllowlist(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function setPreMintStartTime(uint256 newPreMintStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 newPublicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 newPublicSaleEndTime) external;\\n\\n    function setAmountForDevs(uint256 newAmountForDevs) external;\\n\\n    function setAmountForPreMint(uint256 newAmountForPreMint) external;\\n\\n    function setPreMintPrice(uint256 newPreMintPrice) external;\\n\\n    function setPublicSalePrice(uint256 newPublicSalePrice) external;\\n\\n    function setMaxPerAddressDuringMint(\\n        uint256 newMaxPerAddressDuringMint\\n    ) external;\\n\\n    function setCollectionSize(uint256 newCollectionSize) external;\\n}\\n\",\"keccak256\":\"0x466299a46bf3b9600ac40d7a3193160c21bc31e6708a5688f80ccb16e478eef4\",\"license\":\"MIT\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IPendingOwnableUpgradeable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0x4a8abc7df1039d8119c2f75e656bc1398bea4609199cb0a7e1d70eaa49e68733\",\"license\":\"MIT\"},\"contracts/interfaces/ISafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\ninterface ISafePausableUpgradeable is\\n    IAccessControlEnumerableUpgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    function PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ROLE() external pure returns (bytes32);\\n\\n    function PAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x81b77fc513e18d58e3f4a4dfb52b73d1ff47d60b2e16cbc04e2499a53213976d\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"../LaunchpegErrors.sol\\\";\\n\\n/**\\n * @title Pending Ownable\\n * @author Trader Joe\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions. The ownership of this contract is transferred using the\\n * push and pull pattern, the current owner set a `pendingOwner` using\\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\\n * Ownable contract.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {setPendingOwner} and {becomeOwner}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner\\n */\\nabstract contract PendingOwnableUpgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert PendingOwnableUpgradeable__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the pending owner.\\n     */\\n    modifier onlyPendingOwner() {\\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\\n            revert PendingOwnableUpgradeable__NotPendingOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\\n     */\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __ERC165_init();\\n        __PendingOwnable_init_unchained();\\n    }\\n\\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @return The address of the current owner\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current pending owner\\n     * @return The address of the current pending owner\\n     */\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets the pending owner address. This address will be able to become\\n     * the owner of this contract by calling {becomeOwner}\\n     */\\n    function setPendingOwner(address pendingOwner_)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (pendingOwner_ == address(0))\\n            revert PendingOwnableUpgradeable__AddressZero();\\n        if (_pendingOwner != address(0))\\n            revert PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    /**\\n     * @notice Revoke the pending owner address. This address will not be able to\\n     * call {becomeOwner} to become the owner anymore.\\n     * Can only be called by the owner\\n     */\\n    function revokePendingOwner() public virtual override onlyOwner {\\n        if (_pendingOwner == address(0))\\n            revert PendingOwnableUpgradeable__NoPendingOwner();\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * Can only be called by the pending owner\\n     */\\n    function becomeOwner() public virtual override onlyPendingOwner {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Push the new owner, it needs to be pulled to be effective.\\n     * Internal function without access restriction.\\n     * @param pendingOwner_ The address of the new pending owner\\n     */\\n    function _setPendingOwner(address pendingOwner_) internal virtual {\\n        _pendingOwner = pendingOwner_;\\n        emit PendingOwnerSet(pendingOwner_);\\n    }\\n}\\n\",\"keccak256\":\"0xc00538b6e845aa8c71e0b1b2c79d49f29520f0a3fab9469b328d1d5c67f12af7\",\"license\":\"MIT\"},\"contracts/utils/SafeAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"./PendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract SafeAccessControlEnumerableUpgradeable is\\n    PendingOwnableUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    /**\\n     * @dev Modifier that checks that the role is not the `DEFAULT_ADMIN_ROLE`\\n     */\\n    modifier roleIsNotDefaultAdmin(bytes32 role) {\\n        if (role == DEFAULT_ADMIN_ROLE)\\n            revert SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account is the `owner` or has a specific role\\n     */\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        if (msg.sender != owner() && !hasRole(role, msg.sender))\\n            revert SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n                role,\\n                msg.sender\\n            );\\n        _;\\n    }\\n\\n    function __SafeAccessControlEnumerable_init() internal onlyInitializing {\\n        __PendingOwnable_init();\\n        __AccessControlEnumerable_init();\\n\\n        __SafeAccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __SafeAccessControlEnumerable_init_unchained()\\n        internal\\n        onlyInitializing\\n    {}\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(PendingOwnableUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            PendingOwnableUpgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role granted can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to grant\\n     * @param account The address of the account\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     * @dev If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role revoked can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to revoke\\n     * @param account The address of the account\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     * @dev Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     * - the role renounced can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to renounce\\n     * @param account The address of the account\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\\n        roleIsNotDefaultAdmin(role)\\n    {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @dev This also transfer the `DEFAULT_ADMIN` role to the new owner\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        if (_newOwner != address(0)) _grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\n\\n        super._transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xebeb6abaa2b66391ba9f1efaea419a673966bab00bb58b0254dac61850d4e814\",\"license\":\"MIT\"},\"contracts/utils/SafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"../interfaces/ISafePausableUpgradeable.sol\\\";\\nimport \\\"./SafeAccessControlEnumerableUpgradeable.sol\\\";\\n\\nabstract contract SafePausableUpgradeable is\\n    SafeAccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ISafePausableUpgradeable\\n{\\n    bytes32 public constant override PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n\\n    bytes32 public constant override PAUSER_ADMIN_ROLE =\\n        keccak256(\\\"PAUSER_ADMIN_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ADMIN_ROLE =\\n        keccak256(\\\"UNPAUSER_ADMIN_ROLE\\\");\\n\\n    function __SafePausable_init() internal onlyInitializing {\\n        __SafeAccessControlEnumerable_init();\\n        __Pausable_init();\\n\\n        __SafePausable_init_unchained();\\n    }\\n\\n    function __SafePausable_init_unchained() internal onlyInitializing {\\n        _setRoleAdmin(PAUSER_ROLE, PAUSER_ADMIN_ROLE);\\n        _setRoleAdmin(UNPAUSER_ROLE, UNPAUSER_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(SafeAccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISafePausableUpgradeable).interfaceId ||\\n            SafeAccessControlEnumerableUpgradeable.supportsInterface(\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function pause() public virtual override onlyOwnerOrRole(PAUSER_ROLE) {\\n        if (paused()) revert SafePausableUpgradeable__AlreadyPaused();\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function unpause() public virtual override onlyOwnerOrRole(UNPAUSER_ROLE) {\\n        if (!paused()) revert SafePausableUpgradeable__AlreadyUnpaused();\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x160728cd5c6765035b0c8ff0aff1050e276532545572c804a8b0e777197ed934\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103fd5760003560e01c80637edad31911610215578063baf3ff6011610124578063dc33e681116100b1578063dc33e68114610d0d578063e1b2326014610d3b578063e30c397814610d50578063e48cc9ff14610d6e578063e63ab1e914610d8e578063e92c0f3714610dc2578063e985e9c514610de2578063f242432a14610e2b578063f9dca98914610e4b578063fb1bb9de14610e60578063fbe1aa5114610e9457600080fd5b8063baf3ff6014610be2578063be62da0e14610c02578063c42069ec14610c24578063c5482fe314610c44578063c792e16714610c5b578063ca15c87314610c72578063cf30901214610c92578063d3d0fbda14610cad578063d547741f14610ccd578063da6405e114610ced57600080fd5b8063a187c89b116101a2578063a187c89b14610aaa578063a1ef0e5414610acb578063a217fddf14610aeb578063a22cb46514610b00578063a7cd52cb14610b20578063aca8ffe714610b4e578063b05863d514610b6e578063b0ccc31e14610b8e578063b15dcf2314610baf578063b3ab66b014610bcf57600080fd5b80637edad3191461097a5780638456cb591461099a5780638bc35c2f146109af5780638da5cb5b146109d75780639010d07c146109ec57806391d1485414610a0c57806395d89b4114610a2c578063963331d814610a41578063984b67d614610a695780639b6860c814610a8957600080fd5b80633f4ba83a1161031157806362f4fb2d1161029e57806362f4fb2d1461083457806366b55a091461085c57806367ab8a4e1461087c5780636b14bd39146108915780636bb7b1d9146108a85780636d5d40c6146108d057806370a95250146108f0578063715018a614610924578063754a667e14610939578063791a25191461095a57600080fd5b80633f4ba83a14610702578063406248241461071757806345c0f533146107395780634e1273f41461075a578063566e0a9f1461077a5780635bb21376146107905780635c7034af146107be5780635c975abb146107e65780635d20a9ba146107ff5780636004b45e1461081f57600080fd5b80631e4d185f1161038f5780631e4d185f1461055e578063248a9ca31461059757806325a00473146105c75780632a55205a146105fb5780632e8f1f501461063a5780632eb2c2d6146106625780632f2ff15d1461068257806336568abe146106a2578063375a069a146106c25780633c889bbe146106e257600080fd5b8062fdd58e1461040257806301ffc9a71461043557806302fa7c471461046557806302fe530514610487578063055ad42e146104a757806306fdde03146104c95780630c2c39a3146104eb5780630e89341c1461050b5780630f89952d1461052b5780631c0310a51461053e575b600080fd5b34801561040e57600080fd5b5061042261041d366004614e16565b610eb5565b6040519081526020015b60405180910390f35b34801561044157600080fd5b50610455610450366004614e56565b610f50565b604051901515815260200161042c565b34801561047157600080fd5b50610485610480366004614e8a565b610f75565b005b34801561049357600080fd5b506104856104a2366004614ebd565b611021565b3480156104b357600080fd5b506104bc6110c8565b60405161042c9190614f44565b3480156104d557600080fd5b506104de6111fb565b60405161042c9190614fc4565b3480156104f757600080fd5b50610485610506366004614fd7565b61128a565b34801561051757600080fd5b506104de610526366004614fd7565b6112f2565b610485610539366004614ff0565b61132d565b34801561054a57600080fd5b5061048561055936600461500b565b6115f7565b34801561056a57600080fd5b506101a05461057f906001600160801b031681565b6040516001600160801b03909116815260200161042c565b3480156105a357600080fd5b506104226105b2366004614fd7565b600090815260fd602052604090206001015490565b3480156105d357600080fd5b506104227fe0e65c783ac33ff1c5ccf4399c9185066773921d6f8d050bf80781603021f09781565b34801561060757600080fd5b5061061b610616366004615026565b611737565b604080516001600160a01b03909316835260208301919091520161042c565b34801561064657600080fd5b5061019d5461057f90600160801b90046001600160801b031681565b34801561066e57600080fd5b5061048561067d366004615191565b6117e5565b34801561068e57600080fd5b5061048561069d36600461523a565b611814565b3480156106ae57600080fd5b506104856106bd36600461523a565b6118a7565b3480156106ce57600080fd5b506104856106dd366004614fd7565b6118d5565b3480156106ee57600080fd5b506104856106fd366004614fd7565b6119fb565b34801561070e57600080fd5b50610485611b41565b34801561072357600080fd5b5061072c611be0565b60405161042c9190615298565b34801561074557600080fd5b5061019a5461057f906001600160801b031681565b34801561076657600080fd5b5061072c6107753660046152ab565b611c39565b34801561078657600080fd5b506101a454610422565b34801561079c57600080fd5b50610195546107b1906001600160a01b031681565b60405161042c9190615375565b3480156107ca57600080fd5b5061019b5461057f90600160801b90046001600160801b031681565b3480156107f257600080fd5b506101615460ff16610455565b34801561080b57600080fd5b5061048561081a366004615389565b611d62565b34801561082b57600080fd5b50610485611f9c565b34801561084057600080fd5b5061019c5461057f90600160801b90046001600160801b031681565b34801561086857600080fd5b5061042261087736600461500b565b6121bf565b34801561088857600080fd5b5061048561222a565b34801561089d57600080fd5b5061042261019e5481565b3480156108b457600080fd5b5061019f5461057f90600160801b90046001600160801b031681565b3480156108dc57600080fd5b506104856108eb366004614fd7565b612288565b3480156108fc57600080fd5b506104227fe516f7ac9747f401e208331379a0bafe3c9c4dbb6501fd23bcef278f7ebaf4e581565b34801561093057600080fd5b5061048561235e565b34801561094557600080fd5b5061019d5461057f906001600160801b031681565b34801561096657600080fd5b50610485610975366004614fd7565b612393565b34801561098657600080fd5b50610485610995366004615408565b61246a565b3480156109a657600080fd5b50610485612685565b3480156109bb57600080fd5b5061019a5461057f90600160801b90046001600160801b031681565b3480156109e357600080fd5b506107b1612725565b3480156109f857600080fd5b506107b1610a07366004615026565b612734565b348015610a1857600080fd5b50610455610a2736600461523a565b612754565b348015610a3857600080fd5b506104de61277f565b348015610a4d57600080fd5b506101a05461057f90600160801b90046001600160801b031681565b348015610a7557600080fd5b50610485610a84366004614fd7565b61278d565b348015610a9557600080fd5b5061019f5461057f906001600160801b031681565b348015610ab657600080fd5b5061019c5461057f906001600160801b031681565b348015610ad757600080fd5b50610485610ae6366004614fd7565b61286a565b348015610af757600080fd5b50610422600081565b348015610b0c57600080fd5b50610485610b1b3660046154ae565b612948565b348015610b2c57600080fd5b50610422610b3b36600461500b565b6101a16020526000908152604090205481565b348015610b5a57600080fd5b50610485610b69366004614fd7565b61295c565b348015610b7a57600080fd5b50610485610b893660046154e5565b612a98565b348015610b9a57600080fd5b50610193546107b1906001600160a01b031681565b348015610bbb57600080fd5b50610485610bca366004615550565b612b91565b610485610bdd366004614fd7565b612bfb565b348015610bee57600080fd5b50610485610bfd36600461500b565b612d74565b348015610c0e57600080fd5b50610422600080516020615c2183398151915281565b348015610c3057600080fd5b50610485610c3f36600461500b565b612da8565b348015610c5057600080fd5b506104226101945481565b348015610c6757600080fd5b506104226101965481565b348015610c7e57600080fd5b50610422610c8d366004614fd7565b612e2d565b348015610c9e57600080fd5b50610197546104559060ff1681565b348015610cb957600080fd5b50610485610cc8366004614fd7565b612e45565b348015610cd957600080fd5b50610485610ce836600461523a565b612f23565b348015610cf957600080fd5b50610485610d08366004614fd7565b612fb0565b348015610d1957600080fd5b50610422610d2836600461500b565b6101a26020526000908152604090205481565b348015610d4757600080fd5b50610485613087565b348015610d5c57600080fd5b5060fc546001600160a01b03166107b1565b348015610d7a57600080fd5b50610485610d89366004614fd7565b613110565b348015610d9a57600080fd5b506104227f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610dce57600080fd5b50610485610ddd366004614fd7565b6131ee565b348015610dee57600080fd5b50610455610dfd366004615591565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b348015610e3757600080fd5b50610485610e463660046155bb565b613297565b348015610e5757600080fd5b506104856132be565b348015610e6c57600080fd5b506104227f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a81565b348015610ea057600080fd5b5061019b5461057f906001600160801b031681565b60006001600160a01b038316610f255760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216634cc129eb60e11b1480610f4a5750610f4a826132fd565b60fb546001600160a01b03163314610fa057604051630202a8bf60e61b815260040160405180910390fd5b6109c4816001600160601b03161115610fcc576040516306f644f160e31b815260040160405180910390fd5b610fd68282613340565b6040516001600160601b03821681526001600160a01b038316907fd85b7816dca44c313f0fdadd9567f99f3620a2fac7c21a8a7872e1ac4d10fe559060200160405180910390a25050565b60fb546001600160a01b0316331461104c57604051630202a8bf60e61b815260040160405180910390fd5b61108b82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061343992505050565b7fde63cc2d19581e57e158d078c2df83f9ab70addd6257f7f12bfecb21c06c912882826040516110bc92919061561f565b60405180910390a15050565b61019c54600090600160801b90046001600160801b031615806110fc575061019f54600160801b90046001600160801b0316155b8061111157506101a0546001600160801b0316155b8061112e575061019c54600160801b90046001600160801b031642105b156111395750600090565b61019a546101a05461019d546001600160801b039283169261116892600160801b908190048216920416615664565b6001600160801b03160361117c5750600590565b61019c54600160801b90046001600160801b031642108015906111b1575061019f54600160801b90046001600160801b031642105b156111bc5750600290565b61019f54600160801b90046001600160801b031642108015906111ea57506101a0546001600160801b031642105b156111f55750600490565b50600590565b61019880546112099061568f565b80601f01602080910402602001604051908101604052809291908181526020018280546112359061568f565b80156112825780601f1061125757610100808354040283529160200191611282565b820191906000526020600020905b81548152906001019060200180831161126557829003601f168201915b505050505081565b60fb546001600160a01b031633146112b557604051630202a8bf60e61b815260040160405180910390fd5b6101968190556040518181527f90513fea331bb55e4ca73a8d0c053a255347ccb17c621338052705ea997383b3906020015b60405180910390a150565b60606112fd8261344c565b611306836134e0565b6040516020016113179291906156c9565b6040516020818303038152906040529050919050565b611335613572565b6002806113406110c8565b600581111561135157611351614f2e565b1461136f576040516338df794b60e01b815260040160405180910390fd5b6113776135b9565b816001600160601b03166000036113a157604051636e5fd58f60e01b815260040160405180910390fd5b3360009081526101a160205260409020546001600160601b0383168110156113dc576040516390e50aa560e01b815260040160405180910390fd5b61019d546001600160801b03600160801b8204811691166114066001600160601b038616836156ef565b111561142557604051631eddc6a360e11b815260040160405180910390fd5b3360009081526101a560205260409020546101a49080156114b157858261144d600184615707565b8154811061145d5761145d61571e565b60009182526020909120018054601490611488908490600160a01b90046001600160601b0316615734565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550611514565b604080518082018252338082526001600160601b03808a166020808501918252875460018181018a5560008a815283812097519451909516600160a01b026001600160a01b03949094169390931795019490945586549282528601909252919020555b61152f61152a6001600160601b038816856156ef565b613612565b61019d80546001600160801b03928316600160801b0292169190911790556115606001600160601b03871685615707565b3360009081526101a1602052604081209190915561019c54611595906001600160601b038916906001600160801b0316615756565b90506115a08161367f565b604080516001600160601b03891681526020810183905233917faaa4209473b0e01252afb37fc6a883231b6189d78f5fb75fec9d8345d716d6ba910160405180910390a250505050506115f3600160c955565b5050565b600080516020615c2183398151915261160e612725565b6001600160a01b0316336001600160a01b03161415801561163657506116348133612754565b155b1561165857803360405163f9019a8d60e01b8152600401610f1c929190615775565b6116606135b9565b61019654421080611672575061019654155b1561169057604051633bd1a57d60e11b815260040160405180910390fd5b61019454479060009080156116dc576127106116ac8285615756565b6116b6919061578c565b91506116c28284615707565b610195549093506116dc906001600160a01b031683613721565b6116e68584613721565b60408051848152602081018490526001600160a01b038716917f12eb5d7ccd4ce398edc94007dfbaa22fa2ac8775a3633530f36053ad765262f4910160405180910390a25050506115f3600160c955565b60008281526098602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916117ac5750604080518082019091526097546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906117cb906001600160601b031687615756565b6117d5919061578c565b91519350909150505b9250929050565b846001600160a01b03811633146117ff576117ff33613795565b61180c8686868686613837565b505050505050565b81806118335760405163e466584960e01b815260040160405180910390fd5b600083815260fd602052604090206001015461184d612725565b6001600160a01b0316336001600160a01b03161415801561187557506118738133612754565b155b1561189757803360405163f9019a8d60e01b8152600401610f1c929190615775565b6118a18484613883565b50505050565b81806118c65760405163e466584960e01b815260040160405180910390fd5b6118d083836138a6565b505050565b6118dd613572565b600080516020615c218339815191526118f4612725565b6001600160a01b0316336001600160a01b03161415801561191c575061191a8133612754565b155b1561193e57803360405163f9019a8d60e01b8152600401610f1c929190615775565b6119466135b9565b61019b546001600160801b03600160801b82048116911661196784836156ef565b11156119865760405163011310dd60e31b815260040160405180910390fd5b61199361152a84836156ef565b61019b80546001600160801b03928316600160801b0292169190911790556119bb3384613920565b60405183815233907f7d8400f0e58ae2e14f85b63f3afb0ca5b29328d8f48046b205fc7f174cf9b5ed9060200160405180910390a2506115f3600160c955565b611a03613572565b611a0b6135b9565b61019f54600160801b90046001600160801b0316421015611a3f576040516338df794b60e01b815260040160405180910390fd5b6101a4548060005b600082118015611a575750600084115b15611b165760006101a4611a6c600185615707565b81548110611a7c57611a7c61571e565b6000918252602080832060408051808201825291909301546001600160a01b0381168083526001600160601b03600160a01b90920482168385019081529086526101a59093529284209390935551919250611ad89116836156ef565b915082611ae4816157ae565b9350508480611af2906157ae565b955050611b10816000015182602001516001600160601b0316613920565b50611a47565b8061019e6000828254611b2991906156ef565b9091555050506101a45550611b3e600160c955565b50565b7f427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a611b6a612725565b6001600160a01b0316336001600160a01b031614158015611b925750611b908133612754565b155b15611bb457803360405163f9019a8d60e01b8152600401610f1c929190615775565b6101615460ff16611bd857604051637514f14160e11b815260040160405180910390fd5b611b3e613a40565b60606101a3805480602002602001604051908101604052809291908181526020018280548015611c2f57602002820191906000526020600020905b815481526020019060010190808311611c1b575b5050505050905090565b60608151835114611c9e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610f1c565b600083516001600160401b03811115611cb957611cb9615048565b604051908082528060200260200182016040528015611ce2578160200160208202803683370190505b50905060005b8451811015611d5a57611d2d858281518110611d0657611d0661571e565b6020026020010151858381518110611d2057611d2061571e565b6020026020010151610eb5565b828281518110611d3f57611d3f61571e565b6020908102919091010152611d53816157c5565b9050611ce8565b509392505050565b60fb546001600160a01b03163314611d8d57604051630202a8bf60e61b815260040160405180910390fd5b600080611d986110c8565b6005811115611da957611da9614f2e565b14611dc7576040516338df794b60e01b815260040160405180910390fd5b42861080611dd457508585105b80611dde57508484105b15611dfc5760405163800877ff60e01b815260040160405180910390fd5b81831115611e1d57604051631da61f9760e11b815260040160405180910390fd5b611e2683613612565b61019c80546001600160801b0319166001600160801b0392909216919091179055611e5082613612565b61019f80546001600160801b0319166001600160801b0392909216919091179055611e7a86613612565b61019c80546001600160801b03928316600160801b029216919091179055611ea185613612565b61019f80546001600160801b03928316600160801b029216919091179055611ec884613612565b6101a080546001600160801b0319166001600160801b0392909216919091179055611ef6856203f4806156ef565b6101965561019c5461019f546101a0547fd3d19e188efd3ebe21a0ff17d95928e8cbcaea239e66474ceb7410a57d9130f4926001600160801b03600160801b9182900481169391909104811691168686611f538b6203f4806156ef565b604080516001600160801b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c00160405180910390a1505050505050565b611fa4613572565b611fac6135b9565b61019f54600160801b90046001600160801b0316421015611fe0576040516338df794b60e01b815260040160405180910390fd5b3360009081526101a560205260408120546101a4919080156120375782612008600183615707565b815481106120185761201861571e565b600091825260209091200154600160a01b90046001600160601b031691505b6001600160601b0382161561216257825460009061205790600190615707565b9050612064600183615707565b81146121225760008460000182815481106120815761208161571e565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b031691810191909152905080856120cb600186615707565b815481106120db576120db61571e565b600091825260208083208451948201516001600160601b0316600160a01b026001600160a01b03958616179201919091559251909116815260018601909152604090208290555b8354849080612133576121336157de565b60008281526020808220830160001990810183905590920190925533825260018601905260408120555061217b565b6040516377348d3360e01b815260040160405180910390fd5b816001600160601b031661019e600082825461219791906156ef565b909155506121b09050336001600160601b038416613920565b5050506121bd600160c955565b565b6001600160a01b03811660009081526101a560205260408120548082036121e95750600092915050565b6101a46121f7600183615707565b815481106122075761220761571e565b600091825260209091200154600160a01b90046001600160601b03169392505050565b60fb546001600160a01b0316331461225557604051630202a8bf60e61b815260040160405180910390fd5b60fc546001600160a01b031661227e5760405163128be5bf60e31b815260040160405180910390fd5b6121bd6000613a8d565b60fb546001600160a01b031633146122b357604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff16156122d857604051632c127fc560e11b815260040160405180910390fd5b6101a0546001600160801b03168111156123055760405163800877ff60e01b815260040160405180910390fd5b61230e81613612565b61019f80546001600160801b03928316600160801b0292169190911790556040517f4fe26bfd1cf59c4428b13357bea5ab8239f9889b3f94cd575f98b4c6811dcdc5906112e79083815260200190565b60fb546001600160a01b0316331461238957604051630202a8bf60e61b815260040160405180910390fd5b6121bd6000613ad7565b60fb546001600160a01b031633146123be57604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff16156123e357604051632c127fc560e11b815260040160405180910390fd5b61019c546001600160801b031681101561241057604051631da61f9760e11b815260040160405180910390fd5b61241981613612565b61019f80546001600160801b0319166001600160801b03929092169190911790556040518181527f6b0c48d3acd93f180a01b04fb5011543e1a9a260c2a59740d03d0e35285a20e0906020016112e7565b600054610100900460ff161580801561248a5750600054600160ff909116105b806124ab575061249930613b0c565b1580156124ab575060005460ff166001145b61250e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f1c565b6000805460ff191660011790558015612531576000805461ff0019166101001790555b61253a88613b1b565b61019d5461019b54889161255a916001600160801b039182169116615664565b6001600160801b0316111561258257604051631a231d4360e21b815260040160405180910390fd5b61258b87613612565b61019a80546001600160801b0319166001600160801b03929092169190911790556125b584613612565b61019a80546001600160801b03928316600160801b0292169190911790556125dc86613612565b61019b80546001600160801b0319166001600160801b039290921691909117905561260685613612565b61019d80546001600160801b0319166001600160801b03929092169190911790556126346101a38484614cb7565b50801561267b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6126ae612725565b6001600160a01b0316336001600160a01b0316141580156126d657506126d48133612754565b155b156126f857803360405163f9019a8d60e01b8152600401610f1c929190615775565b6101615460ff161561271d576040516329c0c03160e11b815260040160405180910390fd5b611b3e613ca8565b60fb546001600160a01b031690565b600082815261012f6020526040812061274d9083613ce6565b9392505050565b600091825260fd602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61019980546112099061568f565b60fb546001600160a01b031633146127b857604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff16156127dd57604051632c127fc560e11b815260040160405180910390fd5b61019f54600160801b90046001600160801b03168111156128115760405163800877ff60e01b815260040160405180910390fd5b61281a81613612565b61019c80546001600160801b03928316600160801b0292169190911790556040517f9776e1b1502b2f97161fccc0d9f830da6ad81a796cf67c136801fd59dd0444cd906112e79083815260200190565b60fb546001600160a01b0316331461289557604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff16156128ba57604051632c127fc560e11b815260040160405180910390fd5b61019f54600160801b90046001600160801b03168110156128ee5760405163800877ff60e01b815260040160405180910390fd5b6128f781613612565b6101a080546001600160801b0319166001600160801b03929092169190911790556040518181527fdb76c49adfe8600a5db82e1d85e7c1f7565676dac577c6a39744e9c95ad68e3c906020016112e7565b8161295281613795565b6118d08383613cf2565b60fb546001600160a01b0316331461298757604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff16156129ac57604051632c127fc560e11b815260040160405180910390fd5b61019d5461019b546129ca916001600160801b039081169116615664565b6001600160801b0316811080612a20575061019b546101a05461019d546001600160801b0392831692612a0a92600160801b908190048216920416615664565b612a149190615664565b6001600160801b031681105b15612a3e57604051631a231d4360e21b815260040160405180910390fd5b612a4781613612565b61019a80546001600160801b0319166001600160801b03929092169190911790556040518181527fe20e127115d125ee9e5585a8fb1b88c761a79582a054e18d8997d22c147e9fa7906020016112e7565b60fb546001600160a01b03163314612ac357604051630202a8bf60e61b815260040160405180910390fd5b82818114612ae457604051638d62a9d560e01b815260040160405180910390fd5b60005b81811015612b6057838382818110612b0157612b0161571e565b905060200201356101a16000888885818110612b1f57612b1f61571e565b9050602002016020810190612b34919061500b565b6001600160a01b0316815260208101919091526040016000205580612b58816157c5565b915050612ae7565b506040517f0df27beb8d16f5e61d125286ba69a986a702ac83921bb1864629ca5e662e84d490600090a15050505050565b60fb546001600160a01b03163314612bbc57604051630202a8bf60e61b815260040160405180910390fd5b612bc96101a38383614cb7565b507fa85191bfda19ae1579d1649ca68ebabdebffe0beaae6162e290f7ce1c3896e0a82826040516110bc9291906157f4565b612c03613572565b600480612c0e6110c8565b6005811115612c1f57612c1f614f2e565b14612c3d576040516338df794b60e01b815260040160405180910390fd5b612c456135b9565b323314612c6557604051633059e46160e21b815260040160405180910390fd5b61019a54600160801b90046001600160801b031682612c83336121bf565b3360009081526101a26020526040902054612c9e91906156ef565b612ca891906156ef565b1115612cc7576040516335e62b7b60e21b815260040160405180910390fd5b612ccf613cfd565b821115612cef57604051631eddc6a360e11b815260040160405180910390fd5b612cf882613612565b6101a08054601090612d1b908490600160801b90046001600160801b0316615664565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612d493383613920565b61019f54612d6a90612d659084906001600160801b0316615756565b61367f565b6115f3600160c955565b60fb546001600160a01b03163314612d9f57604051630202a8bf60e61b815260040160405180910390fd5b611b3e81613d5a565b60fb546001600160a01b03163314612dd357604051630202a8bf60e61b815260040160405180910390fd5b6001600160a01b038116612dfa576040516386850cc360e01b815260040160405180910390fd5b60fc546001600160a01b031615612e245760405163033c108960e01b815260040160405180910390fd5b611b3e81613a8d565b600081815261012f60205260408120610f4a90613da6565b60fb546001600160a01b03163314612e7057604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff1615612e9557604051632c127fc560e11b815260040160405180910390fd5b61019b54600160801b90046001600160801b0316811015612ec95760405163011310dd60e31b815260040160405180910390fd5b612ed281613612565b61019b80546001600160801b0319166001600160801b03929092169190911790556040518181527fe613f59ae69b6f71b177110d74290ab641789a304ee7b69016e31bd8cf17f530906020016112e7565b8180612f425760405163e466584960e01b815260040160405180910390fd5b600083815260fd6020526040902060010154612f5c612725565b6001600160a01b0316336001600160a01b031614158015612f845750612f828133612754565b155b15612fa657803360405163f9019a8d60e01b8152600401610f1c929190615775565b6118a18484613db0565b60fb546001600160a01b03163314612fdb57604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff161561300057604051632c127fc560e11b815260040160405180910390fd5b61019f546001600160801b031681111561302d57604051631da61f9760e11b815260040160405180910390fd5b61303681613612565b61019c80546001600160801b0319166001600160801b03929092169190911790556040518181527f8a1660f8bb9ad24fdfb72ade95b5135cbcdf387d8778cb98b0048c50c914d49e906020016112e7565b60fb546001600160a01b031633146130b257604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff16156130d757604051632c127fc560e11b815260040160405180910390fd5b610197805460ff191660011790556040517fa59aac2986e43b15fb4d8095c5174500333ffccf7f5a5f1a81b851518180c2fa90600090a1565b60fb546001600160a01b0316331461313b57604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff161561316057604051632c127fc560e11b815260040160405180910390fd5b61019d54600160801b90046001600160801b031681101561319457604051631eddc6a360e11b815260040160405180910390fd5b61319d81613612565b61019d80546001600160801b0319166001600160801b03929092169190911790556040518181527f779ace16b0a6a8195f978e7a9044b18ce935ced3fd1fcffce98e98efb3a62f7b906020016112e7565b60fb546001600160a01b0316331461321957604051630202a8bf60e61b815260040160405180910390fd5b6101975460ff161561323e57604051632c127fc560e11b815260040160405180910390fd5b61324781613612565b61019a80546001600160801b03928316600160801b0292169190911790556040517f13b0beb475ea1a5853a07fd9d048b5f5187f87843604f98e65402462a96583cf906112e79083815260200190565b846001600160a01b03811633146132b1576132b133613795565b61180c8686868686613dd3565b60fc546001600160a01b0316331415806132d6575033155b156132f45760405163134aa98760e31b815260040160405180910390fd5b6121bd33613ad7565b60006001600160e01b031982166308bc61db60e31b1480613322575061332282613e18565b80613331575061333182613e68565b80610f4a5750610f4a82613e8d565b6127106001600160601b03821611156133ae5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610f1c565b6001600160a01b0382166134005760405162461bcd60e51b815260206004820152601960248201527822a921991c9c189d1034b73b30b634b2103932b1b2b4bb32b960391b6044820152606401610f1c565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217609755565b80516115f3906067906020840190614cfe565b60606067805461345b9061568f565b80601f01602080910402602001604051908101604052809291908181526020018280546134879061568f565b80156134d45780601f106134a9576101008083540402835291602001916134d4565b820191906000526020600020905b8154815290600101906020018083116134b757829003601f168201915b50505050509050919050565b606060006134ed83613eb2565b60010190506000816001600160401b0381111561350c5761350c615048565b6040519080825280601f01601f191660200182016040528015613536576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461354057509392505050565b6101615460ff16156121bd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610f1c565b600260c9540361360b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610f1c565b600260c955565b60006001600160801b0382111561367b5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610f1c565b5090565b803410156136a257604051639968ec3d60e01b8152346004820152602401610f1c565b80341115611b3e576000336136b78334615707565b604051600081818185875af1925050503d80600081146136f3576040519150601f19603f3d011682016040523d82523d6000602084013e6136f8565b606091505b50509050806115f357604051633aa9e60d60e21b815260040160405180910390fd5b600160c955565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461376e576040519150601f19603f3d011682016040523d82523d6000602084013e613773565b606091505b50509050806118d057604051633aa9e60d60e21b815260040160405180910390fd5b610193546001600160a01b0316803b156115f357604051633185c44d60e21b81526001600160a01b0382169063c6171134906137d79030908690600401615830565b602060405180830381865afa1580156137f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613818919061584a565b6115f35781604051633b79c77360e21b8152600401610f1c9190615375565b6001600160a01b03851633148061385357506138538533610dfd565b61386f5760405162461bcd60e51b8152600401610f1c90615867565b61387c8585858585613f88565b5050505050565b61388d828261411f565b600082815261012f602052604090206118d090826141a5565b6001600160a01b03811633146139165760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610f1c565b6115f38282613db0565b6001600160a01b03821660009081526101a26020526040812080548392906139499084906156ef565b90915550506101a3546000816001600160401b0381111561396c5761396c615048565b604051908082528060200260200182016040528015613995578160200160208202803683370190505b50905060005b828110156139d357838282815181106139b6576139b661571e565b6020908102919091010152806139cb816157c5565b91505061399b565b506118a1846101a3805480602002602001604051908101604052809291908181526020018280548015613a2557602002820191906000526020600020905b815481526020019060010190808311613a11575b505050505083604051806020016040528060008152506141ba565b613a48614340565b610161805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051613a839190615375565b60405180910390a1565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040517f68f49b346b94582a8b5f9d10e3fe3365318fe8f191ff8dce7c59c6cad06b02f590600090a250565b613ae96000613ae4612725565b613db0565b6001600160a01b03811615613b0357613b03600082613883565b611b3e8161438a565b6001600160a01b03163b151590565b600054610100900460ff16613b425760405162461bcd60e51b8152600401610f1c906158b5565b613b5a604051806020016040528060008152506143e7565b613b62614417565b613b6a61443e565b613b7261446d565b613b8d613b85604083016020840161500b565b6101f4613340565b6daaeb6d7670e522a718067333cd4e803b15613c1857604051633e9f1edf60e11b81526001600160a01b03821690637d3e3dbe90613be5903090733cc6cdda760b79bafa08df41ecfa224f810dceb690600401615830565b600060405180830381600087803b158015613bff57600080fd5b505af1158015613c13573d6000803e3d6000fd5b505050505b613c2181613d5a565b613c2e6060830183615900565b613c3b9161019891614d72565b50613c496080830183615900565b613c569161019991614d72565b50613c716040830135613c6c602085018561500b565b6144ac565b613c93600080516020615c2183398151915261069d604085016020860161500b565b6115f3613ca3602084018461500b565b613ad7565b613cb0613572565b610161805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613a763390565b600061274d838361454a565b6115f3338383614574565b61019b546101a05461019d5461019a546000936001600160801b0390811693600160801b90819004821693613d389391900482169116615946565b613d429190615946565b613d4c9190615946565b6001600160801b0316905090565b61019380546001600160a01b0319166001600160a01b0383161790556040517f1ca1e68a4815cd27afc5aea9e7250e85f275603fbb7912647d3ee68e635b6495906112e7908390615375565b6000610f4a825490565b613dba8282614654565b600082815261012f602052604090206118d090826146bb565b6001600160a01b038516331480613def5750613def8533610dfd565b613e0b5760405162461bcd60e51b8152600401610f1c90615867565b61387c85858585856146d0565b60006001600160e01b03198216636cdb3d1360e11b1480613e4957506001600160e01b031982166303a24d0760e21b145b80610f4a57506301ffc9a760e01b6001600160e01b0319831614610f4a565b60006001600160e01b0319821663152a902d60e11b1480610f4a5750610f4a82613e18565b60006001600160e01b03198216635a05180f60e01b1480610f4a5750610f4a826147fe565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613ef15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310613f1b576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310613f3957662386f26fc10000830492506010015b6305f5e1008310613f51576305f5e100830492506008015b6127108310613f6557612710830492506004015b60648310613f77576064830492506002015b600a8310610f4a5760010192915050565b8151835114613fa95760405162461bcd60e51b8152600401610f1c9061596e565b6001600160a01b038416613fcf5760405162461bcd60e51b8152600401610f1c906159b6565b3360005b84518110156140b9576000858281518110613ff057613ff061571e565b60200260200101519050600085838151811061400e5761400e61571e565b60209081029190910181015160008481526065835260408082206001600160a01b038e16835290935291909120549091508181101561405f5760405162461bcd60e51b8152600401610f1c906159fb565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061409e9084906156ef565b92505081905550505050806140b2906157c5565b9050613fd3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051614109929190615a45565b60405180910390a461180c818787878787614823565b6141298282612754565b6115f357600082815260fd602090815260408083206001600160a01b03851684529091529020805460ff191660011790556141613390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061274d836001600160a01b03841661498e565b6001600160a01b03841661421a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610f1c565b815183511461423b5760405162461bcd60e51b8152600401610f1c9061596e565b3360005b84518110156142d85783818151811061425a5761425a61571e565b6020026020010151606560008784815181106142785761427861571e565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546142c091906156ef565b909155508190506142d0816157c5565b91505061423f565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051614329929190615a45565b60405180910390a461387c81600087878787614823565b6101615460ff166121bd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610f1c565b60fb80546001600160a01b038381166001600160a01b0319808416821790945560fc80549094169093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661440e5760405162461bcd60e51b8152600401610f1c906158b5565b611b3e816149dd565b600054610100900460ff166121bd5760405162461bcd60e51b8152600401610f1c906158b5565b600054610100900460ff166144655760405162461bcd60e51b8152600401610f1c906158b5565b6121bd614a0d565b600054610100900460ff166144945760405162461bcd60e51b8152600401610f1c906158b5565b61449c614a34565b6144a4614417565b6121bd614417565b6127108211156144cf576040516346b7d95d60e11b815260040160405180910390fd5b6001600160a01b0381166144f657604051631a1b629760e21b815260040160405180910390fd5b61019482905561019580546001600160a01b0319166001600160a01b0383161790556040517fd7d086964f00d2604a80288c460231fe9cfc8e9605e838d49017401111f63adb906110bc9084908490615775565b60008260000182815481106145615761456161571e565b9060005260206000200154905092915050565b816001600160a01b0316836001600160a01b0316036145e75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610f1c565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61465e8282612754565b156115f357600082815260fd602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061274d836001600160a01b038416614a6b565b6001600160a01b0384166146f65760405162461bcd60e51b8152600401610f1c906159b6565b33600061470285614b5e565b9050600061470f85614b5e565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156147545760405162461bcd60e51b8152600401610f1c906159fb565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906147939084906156ef565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46147f3848a8a8a8a8a614ba9565b505050505050505050565b60006001600160e01b03198216637965db0b60e01b1480610f4a5750610f4a82614c6b565b614835846001600160a01b0316613b0c565b1561180c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061486e9089908990889088908890600401615a73565b6020604051808303816000875af19250505080156148a9575060408051601f3d908101601f191682019092526148a691810190615ad1565b60015b614955576148b5615aee565b806308c379a0036148ee57506148c9615b0a565b806148d457506148f0565b8060405162461bcd60e51b8152600401610f1c9190614fc4565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610f1c565b6001600160e01b0319811663bc197c8160e01b146149855760405162461bcd60e51b8152600401610f1c90615b93565b50505050505050565b60008181526001830160205260408120546149d557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f4a565b506000610f4a565b600054610100900460ff16614a045760405162461bcd60e51b8152600401610f1c906158b5565b611b3e81613439565b600054610100900460ff1661371a5760405162461bcd60e51b8152600401610f1c906158b5565b600054610100900460ff16614a5b5760405162461bcd60e51b8152600401610f1c906158b5565b614a63614417565b6121bd614c90565b60008181526001830160205260408120548015614b54576000614a8f600183615707565b8554909150600090614aa390600190615707565b9050818114614b08576000866000018281548110614ac357614ac361571e565b9060005260206000200154905080876000018481548110614ae657614ae661571e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614b1957614b196157de565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f4a565b6000915050610f4a565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110614b9857614b9861571e565b602090810291909101015292915050565b614bbb846001600160a01b0316613b0c565b1561180c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190614bf49089908990889088908890600401615bdb565b6020604051808303816000875af1925050508015614c2f575060408051601f3d908101601f19168201909252614c2c91810190615ad1565b60015b614c3b576148b5615aee565b6001600160e01b0319811663f23a6e6160e01b146149855760405162461bcd60e51b8152600401610f1c90615b93565b60006001600160e01b031982166322d7505760e11b1480610f4a5750610f4a82613e68565b600054610100900460ff166132f45760405162461bcd60e51b8152600401610f1c906158b5565b828054828255906000526020600020908101928215614cf2579160200282015b82811115614cf2578235825591602001919060010190614cd7565b5061367b929150614de5565b828054614d0a9061568f565b90600052602060002090601f016020900481019282614d2c5760008555614cf2565b82601f10614d4557805160ff1916838001178555614cf2565b82800160010185558215614cf2579182015b82811115614cf2578251825591602001919060010190614d57565b828054614d7e9061568f565b90600052602060002090601f016020900481019282614da05760008555614cf2565b82601f10614db95782800160ff19823516178555614cf2565b82800160010185558215614cf25791820182811115614cf2578235825591602001919060010190614cd7565b5b8082111561367b5760008155600101614de6565b80356001600160a01b0381168114614e1157600080fd5b919050565b60008060408385031215614e2957600080fd5b614e3283614dfa565b946020939093013593505050565b6001600160e01b031981168114611b3e57600080fd5b600060208284031215614e6857600080fd5b813561274d81614e40565b80356001600160601b0381168114614e1157600080fd5b60008060408385031215614e9d57600080fd5b614ea683614dfa565b9150614eb460208401614e73565b90509250929050565b60008060208385031215614ed057600080fd5b82356001600160401b0380821115614ee757600080fd5b818501915085601f830112614efb57600080fd5b813581811115614f0a57600080fd5b866020828501011115614f1c57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052602160045260246000fd5b6020810160068310614f6657634e487b7160e01b600052602160045260246000fd5b91905290565b60005b83811015614f87578181015183820152602001614f6f565b838111156118a15750506000910152565b60008151808452614fb0816020860160208601614f6c565b601f01601f19169290920160200192915050565b60208152600061274d6020830184614f98565b600060208284031215614fe957600080fd5b5035919050565b60006020828403121561500257600080fd5b61274d82614e73565b60006020828403121561501d57600080fd5b61274d82614dfa565b6000806040838503121561503957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561508357615083615048565b6040525050565b60006001600160401b038211156150a3576150a3615048565b5060051b60200190565b600082601f8301126150be57600080fd5b813560206150cb8261508a565b6040516150d8828261505e565b83815260059390931b85018201928281019150868411156150f857600080fd5b8286015b8481101561511357803583529183019183016150fc565b509695505050505050565b600082601f83011261512f57600080fd5b81356001600160401b0381111561514857615148615048565b60405161515f601f8301601f19166020018261505e565b81815284602083860101111561517457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156151a957600080fd5b6151b286614dfa565b94506151c060208701614dfa565b935060408601356001600160401b03808211156151dc57600080fd5b6151e889838a016150ad565b945060608801359150808211156151fe57600080fd5b61520a89838a016150ad565b9350608088013591508082111561522057600080fd5b5061522d8882890161511e565b9150509295509295909350565b6000806040838503121561524d57600080fd5b82359150614eb460208401614dfa565b600081518084526020808501945080840160005b8381101561528d57815187529582019590820190600101615271565b509495945050505050565b60208152600061274d602083018461525d565b600080604083850312156152be57600080fd5b82356001600160401b03808211156152d557600080fd5b818501915085601f8301126152e957600080fd5b813560206152f68261508a565b604051615303828261505e565b83815260059390931b850182019282810191508984111561532357600080fd5b948201945b838610156153485761533986614dfa565b82529482019490820190615328565b9650508601359250508082111561535e57600080fd5b5061536b858286016150ad565b9150509250929050565b6001600160a01b0391909116815260200190565b600080600080600060a086880312156153a157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008083601f8401126153d657600080fd5b5081356001600160401b038111156153ed57600080fd5b6020830191508360208260051b85010111156117de57600080fd5b600080600080600080600060c0888a03121561542357600080fd5b87356001600160401b038082111561543a57600080fd5b9089019060a0828c03121561544e57600080fd5b9097506020890135965060408901359550606089013594506080890135935060a0890135908082111561548057600080fd5b5061548d8a828b016153c4565b989b979a50959850939692959293505050565b8015158114611b3e57600080fd5b600080604083850312156154c157600080fd5b6154ca83614dfa565b915060208301356154da816154a0565b809150509250929050565b600080600080604085870312156154fb57600080fd5b84356001600160401b038082111561551257600080fd5b61551e888389016153c4565b9096509450602087013591508082111561553757600080fd5b50615544878288016153c4565b95989497509550505050565b6000806020838503121561556357600080fd5b82356001600160401b0381111561557957600080fd5b615585858286016153c4565b90969095509350505050565b600080604083850312156155a457600080fd5b6155ad83614dfa565b9150614eb460208401614dfa565b600080600080600060a086880312156155d357600080fd5b6155dc86614dfa565b94506155ea60208701614dfa565b9350604086013592506060860135915060808601356001600160401b0381111561561357600080fd5b61522d8882890161511e565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b038281168482168083038211156156865761568661564e565b01949350505050565b600181811c908216806156a357607f821691505b6020821081036156c357634e487b7160e01b600052602260045260246000fd5b50919050565b600083516156db818460208801614f6c565b835190830190615686818360208801614f6c565b600082198211156157025761570261564e565b500190565b6000828210156157195761571961564e565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001600160601b038281168482168083038211156156865761568661564e565b60008160001904831182151516156157705761577061564e565b500290565b9182526001600160a01b0316602082015260400190565b6000826157a957634e487b7160e01b600052601260045260246000fd5b500490565b6000816157bd576157bd61564e565b506000190190565b6000600182016157d7576157d761564e565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252810182905260006001600160fb1b0383111561581457600080fd5b8260051b80856040850137600092016040019182525092915050565b6001600160a01b0392831681529116602082015260400190565b60006020828403121561585c57600080fd5b815161274d816154a0565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000808335601e1984360301811261591757600080fd5b8301803591506001600160401b0382111561593157600080fd5b6020019150368190038213156117de57600080fd5b60006001600160801b03838116908316818110156159665761596661564e565b039392505050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000615a58604083018561525d565b8281036020840152615a6a818561525d565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090615a9f9083018661525d565b8281036060840152615ab1818661525d565b90508281036080840152615ac58185614f98565b98975050505050505050565b600060208284031215615ae357600080fd5b815161274d81614e40565b600060033d1115615b075760046000803e5060005160e01c5b90565b600060443d1015615b185790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615b4757505050505090565b8285019150815181811115615b5f5750505050505090565b843d8701016020828501011115615b795750505050505090565b615b886020828601018761505e565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090615c1590830184614f98565b97965050505050505056fe770fadb28e0e3026382976ee8b810cb0eb8666922148dd9e10b20cfb9b477ba8a2646970667358221220ffcc80f14c42eb18525411ddf91602bc9232df8784f6f24d9838375025193d5c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "amountOfUsersWaitingForPremintClaim()": {
        "returns": {
          "_0": "The amount of users that still need to claim their tokens"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchClaimPreMint(uint256)": {
        "params": {
          "numberOfClaims": "The number of claims to do"
        }
      },
      "currentPhase()": {
        "returns": {
          "_0": "The current phase"
        }
      },
      "devMint(uint256)": {
        "params": {
          "amount": "The amount of tokens to mint"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role granted can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize((address,address,uint256,string,string),uint256,uint256,uint256,uint256,uint256[])": {
        "params": {
          "initData": "The data used to initialize the base contract",
          "initialAmountForDevs": "The number of tokens reserved for the devs",
          "initialAmountForPreMint": "The number of tokens reserved for the pre-mint",
          "initialMaxPerAddressDuringMint": "The maximum number of tokens that can be minted per address",
          "initialMaxSupply": "The maximum number of tokens that can be minted",
          "initialTokenSet": "The token set"
        }
      },
      "initializePhases(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "initialPreMintPrice": "The price of a token during the pre-mint",
          "initialPreMintStartTime": "The start time of the pre-mint",
          "initialPublicSaleEndTime": "The end time of the public sale",
          "initialPublicSalePrice": "The price of a token during the public sale",
          "initialPublicSaleStartTime": "The start time of the public sale"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "lockSaleParameters()": {
        "details": "Once locked, it won't be possible to turn it back to false."
      },
      "owner()": {
        "returns": {
          "_0": "The address of the current owner"
        }
      },
      "pause()": {
        "details": "Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "returns": {
          "_0": "The address of the current pending owner"
        }
      },
      "preMint(uint96)": {
        "params": {
          "amount": "The amount of tokens to mint"
        }
      },
      "publicSaleMint(uint256)": {
        "params": {
          "amount": "The amount of tokens to mint"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. - the role renounced can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to renounce"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be the `owner` or have ``role``'s admin role. - the role revoked can't be `DEFAULT_ADMIN`",
        "params": {
          "account": "The address of the account",
          "role": "The role to revoke"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "`safeBatchTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT",
        "params": {
          "amounts": "Amounts to transfer",
          "data": "Data to be used in the transfer callback",
          "from": "Address to transfer from",
          "ids": "TokenIDs to transfer",
          "to": "Address to transfer to"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "`safeTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT",
        "params": {
          "amount": "Amount to transfer",
          "data": "Data to be used in the transfer callback",
          "from": "Address to transfer from",
          "id": "TokenID to transfer",
          "to": "Address to transfer to"
        }
      },
      "seedAllowlist(address[],uint256[])": {
        "params": {
          "addresses": "The addresses to update",
          "amounts": "The amounts to update"
        }
      },
      "setAmountForDevs(uint256)": {
        "params": {
          "newAmountForDevs": "The new amount for devs"
        }
      },
      "setAmountForPreMint(uint256)": {
        "params": {
          "newAmountForPreMint": "The new amount for pre-mint"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "`setApprovalForAll` wrapper to prevent the sender to approve a non-allowed operator",
        "params": {
          "approved": "Whether the operator is approved or not",
          "operator": "Address being approved"
        }
      },
      "setCollectionSize(uint256)": {
        "params": {
          "newCollectionSize": "The new collection size"
        }
      },
      "setMaxPerAddressDuringMint(uint256)": {
        "params": {
          "newMaxAmountPerUser": "The new max per address during mint"
        }
      },
      "setOperatorFilterRegistryAddress(address)": {
        "params": {
          "newOperatorFilterRegistry": "New operator filter registry"
        }
      },
      "setPreMintPrice(uint256)": {
        "params": {
          "newPreMintPrice": "The new pre-mint price"
        }
      },
      "setPreMintStartTime(uint256)": {
        "params": {
          "newPreMintStartTime": "The new pre-mint start time"
        }
      },
      "setPublicSaleEndTime(uint256)": {
        "params": {
          "newPublicSaleEndTime": "The new public sale end time"
        }
      },
      "setPublicSalePrice(uint256)": {
        "params": {
          "newPublicSalePrice": "The new public sale price"
        }
      },
      "setPublicSaleStartTime(uint256)": {
        "params": {
          "newPublicSaleStartTime": "The new public sale start time"
        }
      },
      "setRoyaltyInfo(address,uint96)": {
        "params": {
          "feePercent": "The royalty fee in basis points",
          "receiver": "The address to which the royalties will be sent"
        }
      },
      "setURI(string)": {
        "details": "This sets the URI for revealed tokens Only callable by project owner",
        "params": {
          "newURI": "Base URI to be set"
        }
      },
      "setWithdrawAVAXStartTime(uint256)": {
        "params": {
          "newWithdrawAVAXStartTime": "New public sale end time"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface ID"
        },
        "returns": {
          "_0": "isSupported True if the interface is supported"
        }
      },
      "tokenSet()": {
        "returns": {
          "_0": "The current token set"
        }
      },
      "unpause()": {
        "details": "Sensible part of a contract might be pausable for security reasons. Requirements: - the caller must be the `owner` or have the ``role`` role. - the contrat needs to be unpaused."
      },
      "updateTokenSet(uint256[])": {
        "params": {
          "newTokenSet": "The new token set"
        }
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The token ID"
        },
        "returns": {
          "_0": "uri The token URI"
        }
      },
      "userPendingPreMints(address)": {
        "params": {
          "user": "The user"
        },
        "returns": {
          "_0": "The amount of tokens that still need to be claimed"
        }
      },
      "withdrawAVAX(address)": {
        "params": {
          "to": "Recipient of the earned AVAX"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PROJECT_OWNER_ROLE()": {
        "notice": "Role granted to project owners"
      },
      "allowlist(address)": {
        "notice": "The number of tokens allowed to be minted per address during the pre-mint"
      },
      "amountClaimedDuringPreMint()": {
        "notice": "The number of tokens claimed for the pre-mint"
      },
      "amountForDevs()": {
        "notice": "The number of tokens reserved for the devs"
      },
      "amountForPreMint()": {
        "notice": "The number of tokens reserved for the pre-mint"
      },
      "amountMintedByDevs()": {
        "notice": "The number of tokens minted for the devs"
      },
      "amountMintedDuringPreMint()": {
        "notice": "The number of tokens minted for the pre-mint"
      },
      "amountMintedDuringPublicSale()": {
        "notice": "The number of tokens minted during the public sale"
      },
      "amountOfUsersWaitingForPremintClaim()": {
        "notice": "Returns the amount of users that still need to claim their tokens"
      },
      "batchClaimPreMint(uint256)": {
        "notice": "Mints the tokens bought during pre-mint"
      },
      "becomeOwner()": {
        "notice": "Transfers the ownership to the new owner (`pendingOwner`). Can only be called by the pending owner"
      },
      "claimPremint()": {
        "notice": "Mints the tokens bought during pre-mint"
      },
      "collectionSize()": {
        "notice": "The collection size"
      },
      "currentPhase()": {
        "notice": "Returns the current phase"
      },
      "devMint(uint256)": {
        "notice": "Mints tokens for the devs"
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants `role` to `account`."
      },
      "initialize((address,address,uint256,string,string),uint256,uint256,uint256,uint256,uint256[])": {
        "notice": "Initializes the contract"
      },
      "initializePhases(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initializes the phases"
      },
      "joeFeeCollector()": {
        "notice": "The address to which the fees on the sale will be sent"
      },
      "joeFeePercent()": {
        "notice": "The fees collected by Joepegs on the sale benefits"
      },
      "lockSaleParameters()": {
        "notice": "Updates on the sale parameters can be locked to prevent any changes"
      },
      "locked()": {
        "notice": "This boolean can be turned on to prevent any changes on the sale parameters."
      },
      "maxPerAddressDuringMint()": {
        "notice": "The maximum number of tokens that can be minted per address"
      },
      "name()": {
        "notice": "The name of the collection"
      },
      "numberMinted(address)": {
        "notice": "The number of tokens minted per address"
      },
      "operatorFilterRegistry()": {
        "notice": "Contract filtering allowed operators, preventing unauthorized contract to transfer NFTs By default, Launchpeg contracts are subscribed to OpenSea's Curated Subscription Address at 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6"
      },
      "owner()": {
        "notice": "Returns the address of the current owner"
      },
      "pause()": {
        "notice": "Pauses the contract."
      },
      "pendingOwner()": {
        "notice": "Returns the address of the current pending owner"
      },
      "preMint(uint96)": {
        "notice": "Buys tokens for the pre-mint"
      },
      "preMintPrice()": {
        "notice": "The price of a token during the pre-mint"
      },
      "preMintStartTime()": {
        "notice": "The start time of the pre-mint"
      },
      "publicSaleEndTime()": {
        "notice": "The end time of the public sale"
      },
      "publicSaleMint(uint256)": {
        "notice": "Buys tokens during public sale"
      },
      "publicSalePrice()": {
        "notice": "The price of a token during the public sale"
      },
      "publicSaleStartTime()": {
        "notice": "The start time of the public sale"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account."
      },
      "revokePendingOwner()": {
        "notice": "Revoke the pending owner address. This address will not be able to call {becomeOwner} to become the owner anymore. Can only be called by the owner"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes `role` from `account`."
      },
      "seedAllowlist(address[],uint256[])": {
        "notice": "Updates the allowlist"
      },
      "setAmountForDevs(uint256)": {
        "notice": "Sets a new amount for devs"
      },
      "setAmountForPreMint(uint256)": {
        "notice": "Sets a new amount for pre-mint"
      },
      "setCollectionSize(uint256)": {
        "notice": "Sets a new collection size"
      },
      "setMaxPerAddressDuringMint(uint256)": {
        "notice": "Sets a new max per address during mint"
      },
      "setOperatorFilterRegistryAddress(address)": {
        "notice": "Set the operator filter registry address"
      },
      "setPendingOwner(address)": {
        "notice": "Sets the pending owner address. This address will be able to become the owner of this contract by calling {becomeOwner}"
      },
      "setPreMintPrice(uint256)": {
        "notice": "Sets a new pre-mint price"
      },
      "setPreMintStartTime(uint256)": {
        "notice": "Sets a new pre-mint start time"
      },
      "setPublicSaleEndTime(uint256)": {
        "notice": "Sets a new public sale end time"
      },
      "setPublicSalePrice(uint256)": {
        "notice": "Sets a new public sale price"
      },
      "setPublicSaleStartTime(uint256)": {
        "notice": "Sets a new public sale start time"
      },
      "setRoyaltyInfo(address,uint96)": {
        "notice": "Set the Royalty info"
      },
      "setURI(string)": {
        "notice": "Set the base URI"
      },
      "setWithdrawAVAXStartTime(uint256)": {
        "notice": "Set the withdraw AVAX start time."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns true if the interface is supported"
      },
      "symbol()": {
        "notice": "The symbol of the collection"
      },
      "tokenSet()": {
        "notice": "Returns the current token set"
      },
      "unpause()": {
        "notice": "Unpauses the contract."
      },
      "updateTokenSet(uint256[])": {
        "notice": "Updates the token set"
      },
      "uri(uint256)": {
        "notice": "Returns the token URI"
      },
      "userPendingPreMints(address)": {
        "notice": "Returns the amount of tokens that still need to be claimed by a user"
      },
      "withdrawAVAX(address)": {
        "notice": "Withdraw AVAX to the given recipient"
      },
      "withdrawAVAXStartTime()": {
        "notice": "Start time when funds can be withdrawn"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 825,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 828,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3314,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3533,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1216,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1222,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1224,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 2431,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 2803,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(RoyaltyInfo)2800_storage"
      },
      {
        "astId": 2808,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)2800_storage)"
      },
      {
        "astId": 2988,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1128,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1186,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19755,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 19757,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 273,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_roles",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)268_storage)"
      },
      {
        "astId": 568,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4737_storage)"
      },
      {
        "astId": 232,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1008,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_paused",
        "offset": 0,
        "slot": "353",
        "type": "t_bool"
      },
      {
        "astId": 1113,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10835,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IOperatorFilterRegistry)20506"
      },
      {
        "astId": 10839,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "joeFeePercent",
        "offset": 0,
        "slot": "404",
        "type": "t_uint256"
      },
      {
        "astId": 10843,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "joeFeeCollector",
        "offset": 0,
        "slot": "405",
        "type": "t_address"
      },
      {
        "astId": 10847,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "withdrawAVAXStartTime",
        "offset": 0,
        "slot": "406",
        "type": "t_uint256"
      },
      {
        "astId": 10851,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "locked",
        "offset": 0,
        "slot": "407",
        "type": "t_bool"
      },
      {
        "astId": 10855,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "name",
        "offset": 0,
        "slot": "408",
        "type": "t_string_storage"
      },
      {
        "astId": 10859,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "symbol",
        "offset": 0,
        "slot": "409",
        "type": "t_string_storage"
      },
      {
        "astId": 11513,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "collectionSize",
        "offset": 0,
        "slot": "410",
        "type": "t_uint128"
      },
      {
        "astId": 11517,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "maxPerAddressDuringMint",
        "offset": 16,
        "slot": "410",
        "type": "t_uint128"
      },
      {
        "astId": 11521,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "amountForDevs",
        "offset": 0,
        "slot": "411",
        "type": "t_uint128"
      },
      {
        "astId": 11525,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "amountMintedByDevs",
        "offset": 16,
        "slot": "411",
        "type": "t_uint128"
      },
      {
        "astId": 11529,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "preMintPrice",
        "offset": 0,
        "slot": "412",
        "type": "t_uint128"
      },
      {
        "astId": 11533,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "preMintStartTime",
        "offset": 16,
        "slot": "412",
        "type": "t_uint128"
      },
      {
        "astId": 11537,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "amountForPreMint",
        "offset": 0,
        "slot": "413",
        "type": "t_uint128"
      },
      {
        "astId": 11541,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "amountMintedDuringPreMint",
        "offset": 16,
        "slot": "413",
        "type": "t_uint128"
      },
      {
        "astId": 11545,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "amountClaimedDuringPreMint",
        "offset": 0,
        "slot": "414",
        "type": "t_uint256"
      },
      {
        "astId": 11549,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "publicSalePrice",
        "offset": 0,
        "slot": "415",
        "type": "t_uint128"
      },
      {
        "astId": 11553,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "publicSaleStartTime",
        "offset": 16,
        "slot": "415",
        "type": "t_uint128"
      },
      {
        "astId": 11557,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "publicSaleEndTime",
        "offset": 0,
        "slot": "416",
        "type": "t_uint128"
      },
      {
        "astId": 11561,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "amountMintedDuringPublicSale",
        "offset": 16,
        "slot": "416",
        "type": "t_uint128"
      },
      {
        "astId": 11567,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "allowlist",
        "offset": 0,
        "slot": "417",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11573,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "numberMinted",
        "offset": 0,
        "slot": "418",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11576,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_tokenSet",
        "offset": 0,
        "slot": "419",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11579,
        "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
        "label": "_pendingPreMints",
        "offset": 0,
        "slot": "420",
        "type": "t_struct(PreMintDataSet)19081_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PreMintData)19072_storage)dyn_storage": {
        "base": "t_struct(PreMintData)19072_storage",
        "encoding": "dynamic_array",
        "label": "struct IERC1155LaunchpegSingleBundle.PreMintData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOperatorFilterRegistry)20506": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4737_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4737_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)268_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)2800_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)2800_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4737_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4736,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4422_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PreMintData)19072_storage": {
        "encoding": "inplace",
        "label": "struct IERC1155LaunchpegSingleBundle.PreMintData",
        "members": [
          {
            "astId": 19069,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19071,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "quantity",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PreMintDataSet)19081_storage": {
        "encoding": "inplace",
        "label": "struct IERC1155LaunchpegSingleBundle.PreMintDataSet",
        "members": [
          {
            "astId": 19076,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "preMintDataArr",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(PreMintData)19072_storage)dyn_storage"
          },
          {
            "astId": 19080,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)268_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 267,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)2800_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 2797,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2799,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)4422_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4417,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4421,
            "contract": "contracts/ERC1155SingleBundle.sol:ERC1155SingleBundle",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}