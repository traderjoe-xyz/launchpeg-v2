{
  "address": "0x8fd5abCCb87defFc00B4722463ad4D4C9a212Eb5",
  "abi": [
    {
      "inputs": [],
      "name": "Launchpeg__BatchRevealNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__BatchRevealStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__HasBeenForceRevealed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidBatchRevealSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidCallbackGasLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidKeyHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__InvalidRevealDates",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__IsNotInTheConsumerList",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Launchpeg__Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseLaunchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchSeed",
          "type": "uint256"
        }
      ],
      "name": "Reveal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseLaunchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealBatchSize",
          "type": "uint256"
        }
      ],
      "name": "RevealBatchSizeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseLaunchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealInterval",
          "type": "uint256"
        }
      ],
      "name": "RevealIntervalSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseLaunchpeg",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revealStartTime",
          "type": "uint256"
        }
      ],
      "name": "RevealStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "VRFSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_revealBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealInterval",
          "type": "uint256"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        }
      ],
      "name": "forceReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startId",
          "type": "uint256"
        }
      ],
      "name": "getShuffledTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "hasBatchToReveal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        }
      ],
      "name": "isBatchRevealInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "launchpegToBatchToSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "launchpegToConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collectionSize",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "intCollectionSize",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "revealBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revealStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revealInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "launchpegToHasBeenForceRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "launchpegToLastTokenReveal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "launchpegToNextBatchToReveal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "launchpegToRangeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "launchpegToVrfRequestedForBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "revealNextBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_revealBatchSize",
          "type": "uint256"
        }
      ],
      "name": "setRevealBatchSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_revealInterval",
          "type": "uint256"
        }
      ],
      "name": "setRevealInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseLaunchpeg",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_revealStartTime",
          "type": "uint256"
        }
      ],
      "name": "setRevealStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useVRF",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequestIdToLaunchpeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8913d2c32a5237d4054cc243b99035413d9afb30bc656b0e5ac332471133235b",
  "receipt": {
    "to": null,
    "from": "0x597E2587eCA945fB001BAdF1adF878CcB8e368b6",
    "contractAddress": "0x8fd5abCCb87defFc00B4722463ad4D4C9a212Eb5",
    "transactionIndex": 0,
    "gasUsed": "1938026",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc7771cf09665ab22ff5c3d46eef6f4a6e2e7397dfaa4637a8c9381983557bdb2",
    "transactionHash": "0x8913d2c32a5237d4054cc243b99035413d9afb30bc656b0e5ac332471133235b",
    "logs": [],
    "blockNumber": 26318172,
    "cumulativeGasUsed": "1938026",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6aace975dd9dd5d7c5903517677c8ee9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Launchpeg__BatchRevealNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__BatchRevealStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__HasBeenForceRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidBatchRevealSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidCallbackGasLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidKeyHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__InvalidRevealDates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__IsNotInTheConsumerList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Launchpeg__Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseLaunchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchSeed\",\"type\":\"uint256\"}],\"name\":\"Reveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseLaunchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"}],\"name\":\"RevealBatchSizeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseLaunchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"name\":\"RevealIntervalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseLaunchpeg\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"}],\"name\":\"RevealStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"VRFSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealInterval\",\"type\":\"uint256\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"}],\"name\":\"forceReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"}],\"name\":\"getShuffledTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"hasBatchToReveal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"}],\"name\":\"isBatchRevealInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"launchpegToBatchToSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpegToConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"intCollectionSize\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpegToHasBeenForceRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpegToLastTokenReveal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpegToNextBatchToReveal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpegToRangeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"launchpegToVrfRequestedForBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"revealNextBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_revealBatchSize\",\"type\":\"uint256\"}],\"name\":\"setRevealBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_revealInterval\",\"type\":\"uint256\"}],\"name\":\"setRevealInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseLaunchpeg\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_revealStartTime\",\"type\":\"uint256\"}],\"name\":\"setRevealStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useVRF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestIdToLaunchpeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Reveal(address,uint256,uint256)\":{\"details\":\"Emitted on revealNextBatch() and forceReveal()\",\"params\":{\"baseLaunchpeg\":\"Base launchpeg address\",\"batchNumber\":\"The batch revealed\",\"batchSeed\":\"The random number drawn\"}},\"RevealBatchSizeSet(address,uint256)\":{\"details\":\"Emitted on setRevealBatchSize()\",\"params\":{\"baseLaunchpeg\":\"Base launchpeg address\",\"revealBatchSize\":\"New reveal batch size\"}},\"RevealIntervalSet(address,uint256)\":{\"details\":\"Emitted on setRevealInterval()\",\"params\":{\"baseLaunchpeg\":\"Base launchpeg address\",\"revealInterval\":\"New reveal interval\"}},\"RevealStartTimeSet(address,uint256)\":{\"details\":\"Emitted on setRevealStartTime()\",\"params\":{\"baseLaunchpeg\":\"Base launchpeg address\",\"revealStartTime\":\"New reveal start time\"}},\"VRFSet(address,bytes32,uint64,uint32)\":{\"details\":\"emitted on setVRF()\",\"params\":{\"_callbackGasLimit\":\"Max gas used by the coordinator callback\",\"_keyHash\":\"Keyhash of the gas lane wanted\",\"_subscriptionId\":\"Chainlink subscription ID\",\"_vrfCoordinator\":\"Chainlink coordinator address\"}}},\"kind\":\"dev\",\"methods\":{\"configure(address,uint256,uint256,uint256)\":{\"details\":\"Configure batch reveal for a given launch\",\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_revealBatchSize\":\"Size of the batch reveal\",\"_revealInterval\":\"Batch reveal interval\",\"_revealStartTime\":\"Batch reveal start time\"}},\"forceReveal(address)\":{\"details\":\"Force reveal, should be restricted to owner\"},\"getShuffledTokenId(address,uint256)\":{\"details\":\"Gets the random token URI number from tokenId\",\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_startId\":\"Token Id to consider\"},\"returns\":{\"_0\":\"uriId Revealed Token URI Id\"}},\"hasBatchToReveal(address,uint256)\":{\"details\":\"Returns true if a batch can be revealed\",\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_totalSupply\":\"Number of token already minted\"},\"returns\":{\"_0\":\"hasToRevealInfo Returns a bool saying whether a reveal can be triggered or not and the number of the next batch that will be revealed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revealNextBatch(address,uint256)\":{\"details\":\"Reveals next batch if possibleIf using VRF, the reveal happens on the coordinator callback call\",\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_totalSupply\":\"Number of token already minted\"},\"returns\":{\"_0\":\"isRevealed Returns false if it is not possible to reveal the next batch\"}},\"setRevealBatchSize(address,uint256)\":{\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_revealBatchSize\":\"New reveal batch size\"}},\"setRevealInterval(address,uint256)\":{\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_revealInterval\":\"New batch reveal interval\"}},\"setRevealStartTime(address,uint256)\":{\"params\":{\"_baseLaunchpeg\":\"Base launchpeg address\",\"_revealStartTime\":\"New batch reveal start time\"}},\"setVRF(address,bytes32,uint64,uint32)\":{\"params\":{\"_callbackGasLimit\":\"Max gas used by the coordinator callback\",\"_keyHash\":\"Keyhash of the gas lane wanted\",\"_subscriptionId\":\"Chainlink subscription ID\",\"_vrfCoordinator\":\"Chainlink coordinator address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"launchpegToHasBeenForceRevealed\":{\"details\":\"VRF will not be used anymore if a batch has been force revealed\"},\"launchpegToRangeLength\":{\"details\":\"Size of the array that will store already taken URIs numbers by launchpeg\"},\"launchpegToVrfRequestedForBatch\":{\"details\":\"Prevents people from spamming the random words request and therefore reveal more batches than expected\"}},\"title\":\"BatchReveal\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callbackGasLimit()\":{\"notice\":\"Depends on the number of requested values that you want sent to the fulfillRandomWords() function. Storing each word costs about 20,000 gas, so 100,000 is a safe default for this example contract. Test and adjust this limit based on the network that you select, the size of the request, and the processing of the callback request in the fulfillRandomWords() function.\"},\"initialize()\":{\"notice\":\"Initialize batch reveal\"},\"isBatchRevealInitialized(address)\":{\"notice\":\"Returns true if batch reveal is configured for the given launchpeg Since the collection size is set only when batch reveal is initialized, and the collection size cannot be 0, we assume a 0 value means the batch reveal configuration has not been initialized.\"},\"keyHash()\":{\"notice\":\"The gas lane to use, which specifies the maximum gas price to bump to. For a list of available gas lanes on each network, see https://docs.chain.link/docs/vrf-contracts/#configurations\"},\"launchpegToBatchToSeed(address,uint256)\":{\"notice\":\"Randomized seeds used to shuffle TokenURIs by launchpeg\"},\"launchpegToConfig(address)\":{\"notice\":\"Batch reveal configuration by launchpeg\"},\"launchpegToHasBeenForceRevealed(address)\":{\"notice\":\"True when force revealed has been triggered for the given launchpeg\"},\"launchpegToLastTokenReveal(address)\":{\"notice\":\"Last token that has been revealed by launchpeg\"},\"launchpegToNextBatchToReveal(address)\":{\"notice\":\"Next batch that will be revealed by VRF (if activated) by launchpeg\"},\"launchpegToVrfRequestedForBatch(address,uint256)\":{\"notice\":\"Has the random number for a batch already been asked by launchpeg\"},\"rawFulfillRandomWords(uint256,uint256[])\":{\"notice\":\"rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof. rawFulfillRandomness then calls fulfillRandomness, after validating the origin of the call\"},\"requestConfirmations()\":{\"notice\":\"Number of block confirmations that the coordinator will wait before triggering the callback The default is 3\"},\"setRevealBatchSize(address,uint256)\":{\"notice\":\"Set the reveal batch size. Can only be set after batch reveal has been initialized and before a batch has been revealed.\"},\"setRevealInterval(address,uint256)\":{\"notice\":\"Set the batch reveal interval. Can only be set after batch reveal has been initialized and before a batch has been revealed.\"},\"setRevealStartTime(address,uint256)\":{\"notice\":\"Set the batch reveal start time. Can only be set after batch reveal has been initialized and before a batch has been revealed.\"},\"setVRF(address,bytes32,uint64,uint32)\":{\"notice\":\"Set VRF configuration\"},\"subscriptionId()\":{\"notice\":\"Chainlink subscription ID\"},\"useVRF()\":{\"notice\":\"Contract uses VRF or pseudo-randomness\"},\"vrfRequestIdToLaunchpeg(uint256)\":{\"notice\":\"VRF request ids by launchpeg\"}},\"notice\":\"Implements a gas efficient way of revealing NFT URIs gradually\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BatchReveal.sol\":\"BatchReveal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":60},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/BatchReveal.sol\":{\"content\":\"//SPDX-License-Identifier: CC0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"./chainlink/VRFConsumerBaseV2Upgradeable.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./LaunchpegErrors.sol\\\";\\n\\n// Creator: Tubby Cats\\n/// https://github.com/tubby-cats/batch-nft-reveal\\n\\n/// @title BatchReveal\\n/// @notice Implements a gas efficient way of revealing NFT URIs gradually\\ncontract BatchReveal is\\n    IBatchReveal,\\n    VRFConsumerBaseV2Upgradeable,\\n    OwnableUpgradeable\\n{\\n    /// @notice Batch reveal configuration by launchpeg\\n    mapping(address => BatchRevealConfig) public override launchpegToConfig;\\n\\n    /// @notice VRF request ids by launchpeg\\n    mapping(uint256 => address) public vrfRequestIdToLaunchpeg;\\n\\n    /// @notice Randomized seeds used to shuffle TokenURIs by launchpeg\\n    mapping(address => mapping(uint256 => uint256))\\n        public\\n        override launchpegToBatchToSeed;\\n\\n    /// @notice Last token that has been revealed by launchpeg\\n    mapping(address => uint256) public override launchpegToLastTokenReveal;\\n\\n    /// @dev Size of the array that will store already taken URIs numbers by launchpeg\\n    mapping(address => uint256) public launchpegToRangeLength;\\n\\n    /// @notice Contract uses VRF or pseudo-randomness\\n    bool public override useVRF;\\n\\n    /// @notice Chainlink subscription ID\\n    uint64 public override subscriptionId;\\n\\n    /// @notice The gas lane to use, which specifies the maximum gas price to bump to.\\n    /// For a list of available gas lanes on each network,\\n    /// see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 public override keyHash;\\n\\n    /// @notice Depends on the number of requested values that you want sent to the\\n    /// fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    /// so 100,000 is a safe default for this example contract. Test and adjust\\n    /// this limit based on the network that you select, the size of the request,\\n    /// and the processing of the callback request in the fulfillRandomWords()\\n    /// function.\\n    uint32 public override callbackGasLimit;\\n\\n    /// @notice Number of block confirmations that the coordinator will wait before triggering the callback\\n    /// The default is 3\\n    uint16 public constant override requestConfirmations = 3;\\n\\n    /// @notice Next batch that will be revealed by VRF (if activated) by launchpeg\\n    mapping(address => uint256) public override launchpegToNextBatchToReveal;\\n\\n    /// @notice True when force revealed has been triggered for the given launchpeg\\n    /// @dev VRF will not be used anymore if a batch has been force revealed\\n    mapping(address => bool) public override launchpegToHasBeenForceRevealed;\\n\\n    /// @notice Has the random number for a batch already been asked by launchpeg\\n    /// @dev Prevents people from spamming the random words request\\n    /// and therefore reveal more batches than expected\\n    mapping(address => mapping(uint256 => bool))\\n        public\\n        override launchpegToVrfRequestedForBatch;\\n\\n    struct Range {\\n        int128 start;\\n        int128 end;\\n    }\\n\\n    /// @dev Emitted on revealNextBatch() and forceReveal()\\n    /// @param baseLaunchpeg Base launchpeg address\\n    /// @param batchNumber The batch revealed\\n    /// @param batchSeed The random number drawn\\n    event Reveal(address baseLaunchpeg, uint256 batchNumber, uint256 batchSeed);\\n\\n    /// @dev Emitted on setRevealBatchSize()\\n    /// @param baseLaunchpeg Base launchpeg address\\n    /// @param revealBatchSize New reveal batch size\\n    event RevealBatchSizeSet(address baseLaunchpeg, uint256 revealBatchSize);\\n\\n    /// @dev Emitted on setRevealStartTime()\\n    /// @param baseLaunchpeg Base launchpeg address\\n    /// @param revealStartTime New reveal start time\\n    event RevealStartTimeSet(address baseLaunchpeg, uint256 revealStartTime);\\n\\n    /// @dev Emitted on setRevealInterval()\\n    /// @param baseLaunchpeg Base launchpeg address\\n    /// @param revealInterval New reveal interval\\n    event RevealIntervalSet(address baseLaunchpeg, uint256 revealInterval);\\n\\n    /// @dev emitted on setVRF()\\n    /// @param _vrfCoordinator Chainlink coordinator address\\n    /// @param _keyHash Keyhash of the gas lane wanted\\n    /// @param _subscriptionId Chainlink subscription ID\\n    /// @param _callbackGasLimit Max gas used by the coordinator callback\\n    event VRFSet(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    );\\n\\n    /// @dev Verify that batch reveal is configured for the given launchpeg\\n    modifier batchRevealInitialized(address _baseLaunchpeg) {\\n        if (!isBatchRevealInitialized(_baseLaunchpeg)) {\\n            revert Launchpeg__BatchRevealNotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Verify that batch reveal hasn't started for the given launchpeg\\n    modifier revealNotStarted(address _baseLaunchpeg) {\\n        if (launchpegToLastTokenReveal[_baseLaunchpeg] != 0) {\\n            revert Launchpeg__BatchRevealStarted();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initialize batch reveal\\n    function initialize() external override initializer {\\n        __Ownable_init();\\n    }\\n\\n    /// @dev Configure batch reveal for a given launch\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealBatchSize Size of the batch reveal\\n    /// @param _revealStartTime Batch reveal start time\\n    /// @param _revealInterval Batch reveal interval\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external override onlyOwner revealNotStarted(_baseLaunchpeg) {\\n        uint256 _collectionSize = IBaseLaunchpeg(_baseLaunchpeg)\\n            .collectionSize();\\n        launchpegToConfig[_baseLaunchpeg].collectionSize = _collectionSize;\\n        launchpegToConfig[_baseLaunchpeg].intCollectionSize = int128(\\n            int256(_collectionSize)\\n        );\\n        _setRevealBatchSize(_baseLaunchpeg, _revealBatchSize);\\n        _setRevealStartTime(_baseLaunchpeg, _revealStartTime);\\n        _setRevealInterval(_baseLaunchpeg, _revealInterval);\\n    }\\n\\n    /// @notice Set the reveal batch size. Can only be set after\\n    /// batch reveal has been initialized and before a batch has\\n    /// been revealed.\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealBatchSize New reveal batch size\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    )\\n        public\\n        override\\n        onlyOwner\\n        batchRevealInitialized(_baseLaunchpeg)\\n        revealNotStarted(_baseLaunchpeg)\\n    {\\n        _setRevealBatchSize(_baseLaunchpeg, _revealBatchSize);\\n    }\\n\\n    /// @notice Set the reveal batch size\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealBatchSize New reveal batch size\\n    function _setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) internal {\\n        if (_revealBatchSize == 0) {\\n            revert Launchpeg__InvalidBatchRevealSize();\\n        }\\n        uint256 collectionSize = launchpegToConfig[_baseLaunchpeg]\\n            .collectionSize;\\n        if (\\n            collectionSize % _revealBatchSize != 0 ||\\n            _revealBatchSize > collectionSize\\n        ) {\\n            revert Launchpeg__InvalidBatchRevealSize();\\n        }\\n        launchpegToRangeLength[_baseLaunchpeg] =\\n            (collectionSize / _revealBatchSize) *\\n            2;\\n        launchpegToConfig[_baseLaunchpeg].revealBatchSize = _revealBatchSize;\\n        emit RevealBatchSizeSet(_baseLaunchpeg, _revealBatchSize);\\n    }\\n\\n    /// @notice Set the batch reveal start time. Can only be set after\\n    /// batch reveal has been initialized and before a batch has\\n    /// been revealed.\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealStartTime New batch reveal start time\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    )\\n        public\\n        override\\n        onlyOwner\\n        batchRevealInitialized(_baseLaunchpeg)\\n        revealNotStarted(_baseLaunchpeg)\\n    {\\n        _setRevealStartTime(_baseLaunchpeg, _revealStartTime);\\n    }\\n\\n    /// @notice Set the batch reveal start time.\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealStartTime New batch reveal start time\\n    function _setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) internal {\\n        // probably a mistake if the reveal is more than 100 days in the future\\n        if (_revealStartTime > block.timestamp + 8_640_000) {\\n            revert Launchpeg__InvalidRevealDates();\\n        }\\n        launchpegToConfig[_baseLaunchpeg].revealStartTime = _revealStartTime;\\n        emit RevealStartTimeSet(_baseLaunchpeg, _revealStartTime);\\n    }\\n\\n    /// @notice Set the batch reveal interval. Can only be set after\\n    /// batch reveal has been initialized and before a batch has\\n    /// been revealed.\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealInterval New batch reveal interval\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        public\\n        override\\n        onlyOwner\\n        batchRevealInitialized(_baseLaunchpeg)\\n        revealNotStarted(_baseLaunchpeg)\\n    {\\n        _setRevealInterval(_baseLaunchpeg, _revealInterval);\\n    }\\n\\n    /// @notice Set the batch reveal interval.\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _revealInterval New batch reveal interval\\n    function _setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        internal\\n    {\\n        // probably a mistake if reveal interval is longer than 10 days\\n        if (_revealInterval > 864_000) {\\n            revert Launchpeg__InvalidRevealDates();\\n        }\\n        launchpegToConfig[_baseLaunchpeg].revealInterval = _revealInterval;\\n        emit RevealIntervalSet(_baseLaunchpeg, _revealInterval);\\n    }\\n\\n    /// @notice Set VRF configuration\\n    /// @param _vrfCoordinator Chainlink coordinator address\\n    /// @param _keyHash Keyhash of the gas lane wanted\\n    /// @param _subscriptionId Chainlink subscription ID\\n    /// @param _callbackGasLimit Max gas used by the coordinator callback\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external override onlyOwner {\\n        if (_vrfCoordinator == address(0)) {\\n            revert Launchpeg__InvalidCoordinator();\\n        }\\n\\n        (\\n            ,\\n            uint32 _maxGasLimit,\\n            bytes32[] memory s_provingKeyHashes\\n        ) = VRFCoordinatorV2Interface(_vrfCoordinator).getRequestConfig();\\n\\n        // 20_000 is the cost of storing one word, callback cost will never be lower than that\\n        if (_callbackGasLimit > _maxGasLimit || _callbackGasLimit < 20_000) {\\n            revert Launchpeg__InvalidCallbackGasLimit();\\n        }\\n\\n        bool keyHashFound;\\n        for (uint256 i; i < s_provingKeyHashes.length; i++) {\\n            if (s_provingKeyHashes[i] == _keyHash) {\\n                keyHashFound = true;\\n                break;\\n            }\\n        }\\n\\n        if (!keyHashFound) {\\n            revert Launchpeg__InvalidKeyHash();\\n        }\\n\\n        (, , , address[] memory consumers) = VRFCoordinatorV2Interface(\\n            _vrfCoordinator\\n        ).getSubscription(_subscriptionId);\\n\\n        bool isInConsumerList;\\n        for (uint256 i; i < consumers.length; i++) {\\n            if (consumers[i] == address(this)) {\\n                isInConsumerList = true;\\n                break;\\n            }\\n        }\\n\\n        if (!isInConsumerList) {\\n            revert Launchpeg__IsNotInTheConsumerList();\\n        }\\n\\n        useVRF = true;\\n        setVRFConsumer(_vrfCoordinator);\\n        keyHash = _keyHash;\\n        subscriptionId = _subscriptionId;\\n        callbackGasLimit = _callbackGasLimit;\\n\\n        emit VRFSet(\\n            _vrfCoordinator,\\n            _keyHash,\\n            _subscriptionId,\\n            _callbackGasLimit\\n        );\\n    }\\n\\n    // Forked from openzeppelin\\n    /// @dev Returns the smallest of two numbers.\\n    /// @param _a First number to consider\\n    /// @param _b Second number to consider\\n    /// @return min Minimum between the two params\\n    function _min(int128 _a, int128 _b) internal pure returns (int128) {\\n        return _a < _b ? _a : _b;\\n    }\\n\\n    /// @notice Fills the range array\\n    /// @dev Ranges include the start but not the end [start, end)\\n    /// @param _ranges initial range array\\n    /// @param _start beginning of the array to be added\\n    /// @param _end end of the array to be added\\n    /// @param _lastIndex last position in the range array to consider\\n    /// @param _intCollectionSize collection size\\n    /// @return newLastIndex new lastIndex to consider for the future range to be added\\n    function _addRange(\\n        Range[] memory _ranges,\\n        int128 _start,\\n        int128 _end,\\n        uint256 _lastIndex,\\n        int128 _intCollectionSize\\n    ) private view returns (uint256) {\\n        uint256 positionToAssume = _lastIndex;\\n        for (uint256 j; j < _lastIndex; j++) {\\n            int128 rangeStart = _ranges[j].start;\\n            int128 rangeEnd = _ranges[j].end;\\n            if (_start < rangeStart && positionToAssume == _lastIndex) {\\n                positionToAssume = j;\\n            }\\n            if (\\n                (_start < rangeStart && _end > rangeStart) ||\\n                (rangeStart <= _start && _end <= rangeEnd) ||\\n                (_start < rangeEnd && _end > rangeEnd)\\n            ) {\\n                int128 length = _end - _start;\\n                _start = _min(_start, rangeStart);\\n                _end = _start + length + (rangeEnd - rangeStart);\\n                _ranges[j] = Range(-1, -1); // Delete\\n            }\\n        }\\n        for (uint256 pos = _lastIndex; pos > positionToAssume; pos--) {\\n            _ranges[pos] = _ranges[pos - 1];\\n        }\\n        _ranges[positionToAssume] = Range(\\n            _start,\\n            _min(_end, _intCollectionSize)\\n        );\\n        _lastIndex++;\\n        if (_end > _intCollectionSize) {\\n            _addRange(\\n                _ranges,\\n                0,\\n                _end - _intCollectionSize,\\n                _lastIndex,\\n                _intCollectionSize\\n            );\\n            _lastIndex++;\\n        }\\n        return _lastIndex;\\n    }\\n\\n    /// @dev Adds the last batch into the ranges array\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _lastBatch Batch number to consider\\n    /// @param _revealBatchSize Reveal batch size\\n    /// @param _intCollectionSize Collection size\\n    /// @param _rangeLength Range length\\n    /// @return ranges Ranges array filled with every URI taken by batches smaller or equal to lastBatch\\n    function _buildJumps(\\n        address _baseLaunchpeg,\\n        uint256 _lastBatch,\\n        uint256 _revealBatchSize,\\n        int128 _intCollectionSize,\\n        uint256 _rangeLength\\n    ) private view returns (Range[] memory) {\\n        Range[] memory ranges = new Range[](_rangeLength);\\n        uint256 lastIndex;\\n        for (uint256 i; i < _lastBatch; i++) {\\n            int128 start = int128(\\n                int256(\\n                    _getFreeTokenId(\\n                        _baseLaunchpeg,\\n                        launchpegToBatchToSeed[_baseLaunchpeg][i],\\n                        ranges,\\n                        _intCollectionSize\\n                    )\\n                )\\n            );\\n            int128 end = start + int128(int256(_revealBatchSize));\\n            lastIndex = _addRange(\\n                ranges,\\n                start,\\n                end,\\n                lastIndex,\\n                _intCollectionSize\\n            );\\n        }\\n        return ranges;\\n    }\\n\\n    /// @dev Gets the random token URI number from tokenId\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _startId Token Id to consider\\n    /// @return uriId Revealed Token URI Id\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        int128 intCollectionSize = launchpegToConfig[_baseLaunchpeg]\\n            .intCollectionSize;\\n        uint256 revealBatchSize = launchpegToConfig[_baseLaunchpeg]\\n            .revealBatchSize;\\n        uint256 batch = _startId / revealBatchSize;\\n        Range[] memory ranges = new Range[](\\n            launchpegToRangeLength[_baseLaunchpeg]\\n        );\\n\\n        ranges = _buildJumps(\\n            _baseLaunchpeg,\\n            batch,\\n            revealBatchSize,\\n            intCollectionSize,\\n            launchpegToRangeLength[_baseLaunchpeg]\\n        );\\n\\n        uint256 positionsToMove = (_startId % revealBatchSize) +\\n            launchpegToBatchToSeed[_baseLaunchpeg][batch];\\n\\n        return\\n            _getFreeTokenId(\\n                _baseLaunchpeg,\\n                positionsToMove,\\n                ranges,\\n                intCollectionSize\\n            );\\n    }\\n\\n    /// @dev Gets the shifted URI number from tokenId and range array\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _positionsToMoveStart Token URI offset if none of the URI Ids were taken\\n    /// @param _ranges Ranges array built by _buildJumps()\\n    /// @param _intCollectionSize Collection size\\n    /// @return uriId Revealed Token URI Id\\n    function _getFreeTokenId(\\n        address _baseLaunchpeg,\\n        uint256 _positionsToMoveStart,\\n        Range[] memory _ranges,\\n        int128 _intCollectionSize\\n    ) private view returns (uint256) {\\n        int128 positionsToMove = int128(int256(_positionsToMoveStart));\\n        int128 id;\\n\\n        for (uint256 round = 0; round < 2; round++) {\\n            for (uint256 i; i < launchpegToRangeLength[_baseLaunchpeg]; i++) {\\n                int128 start = _ranges[i].start;\\n                int128 end = _ranges[i].end;\\n                if (id < start) {\\n                    int128 finalId = id + positionsToMove;\\n                    if (finalId < start) {\\n                        return uint256(uint128(finalId));\\n                    } else {\\n                        positionsToMove -= start - id;\\n                        id = end;\\n                    }\\n                } else if (id < end) {\\n                    id = end;\\n                }\\n            }\\n            if ((id + positionsToMove) >= _intCollectionSize) {\\n                positionsToMove -= _intCollectionSize - id;\\n                id = 0;\\n            }\\n        }\\n        return uint256(uint128(id + positionsToMove));\\n    }\\n\\n    /// @dev Sets batch seed for specified batch number\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _batchNumber Batch number that needs to be revealed\\n    /// @param _collectionSize Collection size\\n    /// @param _revealBatchSize Reveal batch size\\n    function _setBatchSeed(\\n        address _baseLaunchpeg,\\n        uint256 _batchNumber,\\n        uint256 _collectionSize,\\n        uint256 _revealBatchSize\\n    ) internal {\\n        uint256 randomness = uint256(\\n            keccak256(\\n                abi.encode(\\n                    msg.sender,\\n                    tx.gasprice,\\n                    block.number,\\n                    block.timestamp,\\n                    block.difficulty,\\n                    blockhash(block.number - 1),\\n                    address(this)\\n                )\\n            )\\n        );\\n\\n        // not perfectly random since the folding doesn't match bounds perfectly, but difference is small\\n        launchpegToBatchToSeed[_baseLaunchpeg][_batchNumber] =\\n            randomness %\\n            (_collectionSize - (_batchNumber * _revealBatchSize));\\n    }\\n\\n    /// @dev Returns true if a batch can be revealed\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _totalSupply Number of token already minted\\n    /// @return hasToRevealInfo Returns a bool saying whether a reveal can be triggered or not\\n    /// and the number of the next batch that will be revealed\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        public\\n        view\\n        override\\n        returns (bool, uint256)\\n    {\\n        uint256 revealBatchSize = launchpegToConfig[_baseLaunchpeg]\\n            .revealBatchSize;\\n        uint256 revealStartTime = launchpegToConfig[_baseLaunchpeg]\\n            .revealStartTime;\\n        uint256 revealInterval = launchpegToConfig[_baseLaunchpeg]\\n            .revealInterval;\\n        uint256 lastTokenRevealed = launchpegToLastTokenReveal[_baseLaunchpeg];\\n        uint256 batchNumber;\\n        unchecked {\\n            batchNumber = lastTokenRevealed / revealBatchSize;\\n        }\\n\\n        // We don't want to reveal other batches if a VRF random words request is pending\\n        if (\\n            block.timestamp < revealStartTime + batchNumber * revealInterval ||\\n            _totalSupply < lastTokenRevealed + revealBatchSize ||\\n            launchpegToVrfRequestedForBatch[_baseLaunchpeg][batchNumber]\\n        ) {\\n            return (false, batchNumber);\\n        }\\n\\n        return (true, batchNumber);\\n    }\\n\\n    /// @dev Reveals next batch if possible\\n    /// @dev If using VRF, the reveal happens on the coordinator callback call\\n    /// @param _baseLaunchpeg Base launchpeg address\\n    /// @param _totalSupply Number of token already minted\\n    /// @return isRevealed Returns false if it is not possible to reveal the next batch\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        if (_baseLaunchpeg != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n\\n        uint256 batchNumber;\\n        bool canReveal;\\n        (canReveal, batchNumber) = hasBatchToReveal(\\n            _baseLaunchpeg,\\n            _totalSupply\\n        );\\n\\n        if (!canReveal) {\\n            return false;\\n        }\\n\\n        if (useVRF) {\\n            uint256 requestId = VRFCoordinatorV2Interface(vrfCoordinator)\\n                .requestRandomWords(\\n                    keyHash,\\n                    subscriptionId,\\n                    requestConfirmations,\\n                    callbackGasLimit,\\n                    1\\n                );\\n            vrfRequestIdToLaunchpeg[requestId] = _baseLaunchpeg;\\n            launchpegToVrfRequestedForBatch[_baseLaunchpeg][batchNumber] = true;\\n        } else {\\n            launchpegToLastTokenReveal[_baseLaunchpeg] += launchpegToConfig[\\n                _baseLaunchpeg\\n            ].revealBatchSize;\\n            _setBatchSeed(\\n                _baseLaunchpeg,\\n                batchNumber,\\n                launchpegToConfig[_baseLaunchpeg].collectionSize,\\n                launchpegToConfig[_baseLaunchpeg].revealBatchSize\\n            );\\n            emit Reveal(\\n                _baseLaunchpeg,\\n                batchNumber,\\n                launchpegToBatchToSeed[_baseLaunchpeg][batchNumber]\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Callback triggered by the VRF coordinator\\n    /// @param _randomWords Array of random numbers provided by the VRF coordinator\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        address baseLaunchpeg = vrfRequestIdToLaunchpeg[_requestId];\\n\\n        if (launchpegToHasBeenForceRevealed[baseLaunchpeg]) {\\n            revert Launchpeg__HasBeenForceRevealed();\\n        }\\n\\n        uint256 revealBatchSize = launchpegToConfig[baseLaunchpeg]\\n            .revealBatchSize;\\n        uint256 collectionSize = launchpegToConfig[baseLaunchpeg]\\n            .collectionSize;\\n        uint256 _batchToReveal = launchpegToNextBatchToReveal[baseLaunchpeg]++;\\n        uint256 _revealBatchSize = revealBatchSize;\\n        uint256 _seed = _randomWords[0] %\\n            (collectionSize - (_batchToReveal * _revealBatchSize));\\n\\n        launchpegToBatchToSeed[baseLaunchpeg][_batchToReveal] = _seed;\\n        launchpegToLastTokenReveal[baseLaunchpeg] += _revealBatchSize;\\n\\n        emit Reveal(\\n            baseLaunchpeg,\\n            _batchToReveal,\\n            launchpegToBatchToSeed[baseLaunchpeg][_batchToReveal]\\n        );\\n    }\\n\\n    /// @dev Force reveal, should be restricted to owner\\n    function forceReveal(address _baseLaunchpeg) external override onlyOwner {\\n        uint256 revealBatchSize = launchpegToConfig[_baseLaunchpeg]\\n            .revealBatchSize;\\n        uint256 batchNumber;\\n        unchecked {\\n            batchNumber =\\n                launchpegToLastTokenReveal[_baseLaunchpeg] /\\n                revealBatchSize;\\n            launchpegToLastTokenReveal[_baseLaunchpeg] += revealBatchSize;\\n        }\\n\\n        _setBatchSeed(\\n            _baseLaunchpeg,\\n            batchNumber,\\n            launchpegToConfig[_baseLaunchpeg].collectionSize,\\n            launchpegToConfig[_baseLaunchpeg].revealBatchSize\\n        );\\n        launchpegToHasBeenForceRevealed[_baseLaunchpeg] = true;\\n        emit Reveal(\\n            _baseLaunchpeg,\\n            batchNumber,\\n            launchpegToBatchToSeed[_baseLaunchpeg][batchNumber]\\n        );\\n    }\\n\\n    /// @notice Returns true if batch reveal is configured for the given launchpeg\\n    /// Since the collection size is set only when batch reveal is initialized,\\n    /// and the collection size cannot be 0, we assume a 0 value means\\n    /// the batch reveal configuration has not been initialized.\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return launchpegToConfig[_baseLaunchpeg].collectionSize != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ff36b9243ca0477f6484f5c6a2db4fa62458656a51f078cfeb331de5656abc\",\"license\":\"CC0\"},\"contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(\\n        string memory name_,\\n        string memory symbol_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (\\n            to.isContract() &&\\n            !_checkContractOnERC721Received(from, to, tokenId, _data)\\n        ) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (\\n                        !_checkContractOnERC721Received(\\n                            address(0),\\n                            to,\\n                            updatedIndex++,\\n                            _data\\n                        )\\n                    ) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n        address from = prevOwnership.addr;\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            IERC721ReceiverUpgradeable(to).onERC721Received(\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        returns (bytes4 retval) {\\n            return\\n                retval ==\\n                IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x69dd0ac627e8ebeddbd96ad094f2da48442ae79e339c3ba0f6e44f2e5cb6b7c0\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// LaunchpegFactory\\nerror LaunchpegFactory__InvalidBatchReveal();\\nerror LaunchpegFactory__InvalidImplementation();\\n\\n// Launchpeg\\nerror Launchpeg__BatchRevealAlreadyInitialized();\\nerror Launchpeg__BatchRevealDisabled();\\nerror Launchpeg__BatchRevealNotInitialized();\\nerror Launchpeg__BatchRevealStarted();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidBatchReveal();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidClaim();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxPerAddressDuringMint();\\nerror Launchpeg__InvalidOwner();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidQuantity();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__InvalidPhases();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__NotInitialized();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WithdrawAVAXNotAvailable();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__AddressZero();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafePausableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\\n// OperatorFilterer\\nerror OperatorNotAllowed(address operator);\\n\",\"keccak256\":\"0x77e97b0b9f7d13ddd4804cc87bfef451eee013341e9db33c96ded4ea409d6e59\",\"license\":\"MIT\"},\"contracts/chainlink/VRFConsumerBaseV2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// ------------------------------------------------------------------------------\\n/// @notice Interface for contracts using VRF randomness\\n///   Forked from chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\n/// ------------------------------------------------------------------------------\\n\\n/// @dev PURPOSE\\n///\\n/// @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n/// @dev to Vera the verifier in such a way that Vera can be sure he's not\\n/// @dev making his output up to suit himself. Reggie provides Vera a public key\\n/// @dev to which he knows the secret key. Each time Vera provides a seed to\\n/// @dev Reggie, he gives back a value which is computed completely\\n/// @dev deterministically from the seed and the secret key.\\n///\\n/// @dev Reggie provides a proof by which Vera can verify that the output was\\n/// @dev correctly computed once Reggie tells it to her, but without that proof,\\n/// @dev the output is indistinguishable to her from a uniform random sample\\n/// @dev from the output space.\\n///\\n/// @dev The purpose of this contract is to make it easy for unrelated contracts\\n/// @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n/// @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n/// @dev 1. The fulfillment came from the VRFCoordinator\\n/// @dev 2. The consumer contract implements fulfillRandomWords.\\n/// @dev USAGE\\n///\\n/// @dev Calling contracts must inherit from VRFConsumerBase, and can\\n/// @dev initialize VRFConsumerBase's attributes in their constructor as\\n/// @dev shown:\\n///\\n/// @dev   contract VRFConsumer {\\n/// @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n/// @dev       VRFConsumerBase(_vrfCoordinator) public {\\n/// @dev         <initialization with other arguments goes here>\\n/// @dev       }\\n/// @dev   }\\n///\\n/// @dev The oracle will have given you an ID for the VRF keypair they have\\n/// @dev committed to (let's call it keyHash). Create subscription, fund it\\n/// @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n/// @dev subscription management functions).\\n/// @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n/// @dev callbackGasLimit, numWords),\\n/// @dev see (VRFCoordinatorInterface for a description of the arguments).\\n///\\n/// @dev Once the VRFCoordinator has received and validated the oracle's response\\n/// @dev to your request, it will call your contract's fulfillRandomWords method.\\n///\\n/// @dev The randomness argument to fulfillRandomWords is a set of random words\\n/// @dev generated from your requestId and the blockHash of the request.\\n///\\n/// @dev If your contract could have concurrent requests open, you can use the\\n/// @dev requestId returned from requestRandomWords to track which response is associated\\n/// @dev with which randomness request.\\n/// @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n/// @dev if your contract could have multiple requests in flight simultaneously.\\n///\\n/// @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n/// @dev differ.\\n///\\n/// ------------------------------------------------------------------------------\\n/// @dev SECURITY CONSIDERATIONS\\n///\\n/// @dev A method with the ability to call your fulfillRandomness method directly\\n/// @dev could spoof a VRF response with any random value, so it's critical that\\n/// @dev it cannot be directly called by anything other than this base contract\\n/// @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n///\\n/// @dev For your users to trust that your contract's random behavior is free\\n/// @dev from malicious interference, it's best if you can write it so that all\\n/// @dev behaviors implied by a VRF response are executed ///during/// your\\n/// @dev fulfillRandomness method. If your contract must store the response (or\\n/// @dev anything derived from it) and use it later, you must ensure that any\\n/// @dev user-significant behavior which depends on that stored value cannot be\\n/// @dev manipulated by a subsequent VRF request.\\n///\\n/// @dev Similarly, both miners and the VRF oracle itself have some influence\\n/// @dev over the order in which VRF responses appear on the blockchain, so if\\n/// @dev your contract could have multiple VRF requests in flight simultaneously,\\n/// @dev you must ensure that the order in which the VRF responses arrive cannot\\n/// @dev be used to manipulate your contract's user-significant behavior.\\n///\\n/// @dev Since the block hash of the block which contains the requestRandomness\\n/// @dev call is mixed into the input to the VRF ///last///, a sufficiently powerful\\n/// @dev miner could, in principle, fork the blockchain to evict the block\\n/// @dev containing the request, forcing the request to be included in a\\n/// @dev different block with a different hash, and therefore a different input\\n/// @dev to the VRF. However, such an attack would incur a substantial economic\\n/// @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n/// @dev until it calls responds to a request. It is for this reason that\\n/// @dev that you can signal to an oracle you'd like them to wait longer before\\n/// @dev responding to the request (however this is not enforced in the contract\\n/// @dev and so remains effective only in the case of unmodified oracle software).\\n///\\n\\nabstract contract VRFConsumerBaseV2Upgradeable {\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address internal vrfCoordinator;\\n\\n    /// @notice Initializes the vrf coordinator address\\n    /// @param _vrfCoordinator address of VRFCoordinator contract\\n    function setVRFConsumer(address _vrfCoordinator) internal {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /// @notice fulfillRandomness handles the VRF response. Your contract must\\n    /// @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n    /// @notice principles to keep in mind when implementing your fulfillRandomness\\n    /// @notice method.\\n    ///\\n    /// @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n    /// @dev signature, and will call it once it has verified the proof\\n    /// @dev associated with the randomness. (It is triggered via a call to\\n    /// @dev rawFulfillRandomness, below.)\\n    ///\\n    /// @param requestId The Id initially returned by requestRandomness\\n    /// @param randomWords the VRF output expanded to the requested number of words\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        virtual;\\n\\n    /// @notice rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    /// proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    /// the origin of the call\\n    function rawFulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0x14ca6ac4f5ca14a6b84a56de0423ba0c64d8920d2cbeb73700b8a6c0d2ff8db7\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"../ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    /// @notice Collection data to initialize Launchpeg\\n    /// @param name ERC721 name\\n    /// @param symbol ERC721 symbol\\n    /// @param maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param collectionSize The collection size (e.g 10000)\\n    /// @param amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        address batchReveal;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 collectionSize;\\n        uint256 amountForDevs;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n    }\\n\\n    /// @notice Collection owner data to initialize Launchpeg\\n    /// @param owner The contract owner\\n    /// @param projectOwner The project owner\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param joeFeeCollector The address to which the fees on the sale will be sent\\n    /// @param joeFeePercent The fees collected by the fee collector on the sale benefits\\n    struct CollectionOwnerData {\\n        address owner;\\n        address projectOwner;\\n        address royaltyReceiver;\\n        address joeFeeCollector;\\n        uint256 joeFeePercent;\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external pure returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeBatchReveal(address _batchReveal) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 _quantity) external payable;\\n\\n    function claimPreMint() external;\\n\\n    function batchClaimPreMint(uint96 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userPendingPreMints(address owner) external view returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function numberMintedWithPreMint(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xc48e90941e198a8102fa2366b6d798ca6f26b577fcd4d95fd55e50f49f58e4ea\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612217806100206000396000f3fe608060405234801561001057600080fd5b50600436106101845760003560e01c80638129fc1c116100d9578063b0fb162f11610087578063b0fb162f1461042a578063b7b1349614610445578063bc2af1b614610458578063d66f3a7914610478578063ed90d3871461048b578063f2fde38b146104ab578063fbbc872b146104be57600080fd5b80638129fc1c1461035e5780638a5b5993146103665780638da5cb5b146103795780639305d53a14610399578063989030af146103c2578063a4c25c99146103ed578063ad9e22af1461040057600080fd5b806324f746971161013657806324f74697146102b15780633e967802146102d657806342517341146102f75780635825fadf1461030a57806361728f391461032d57806367e1460014610336578063715018a61461035657600080fd5b8063060383411461018957806309c1ba2e146101ab57806312244936146101db5780631733377b146101f0578063181d2588146102035780631fe543e31461027057806322ae5b6d14610283575b600080fd5b606a546101969060ff1681565b60405190151581526020015b60405180910390f35b606a546101c39061010090046001600160401b031681565b6040516001600160401b0390911681526020016101a2565b6101ee6101e9366004611ba2565b6104d1565b005b6101966101fe366004611bce565b610579565b610245610211366004611bce565b606560205260009081526040902080546001820154600283015460038401546004909401549293600f9290920b9290919085565b60408051958652600f9490940b6020860152928401919091526060830152608082015260a0016101a2565b6101ee61027e366004611c54565b610596565b610196610291366004611ba2565b606f60209081526000928352604080842090915290825290205460ff1681565b606c546102c19063ffffffff1681565b60405163ffffffff90911681526020016101a2565b6102e96102e4366004611ba2565b6105e4565b6040519081526020016101a2565b6101ee610305366004611cf5565b61071f565b610196610318366004611bce565b606e6020526000908152604090205460ff1681565b6102e9606b5481565b6102e9610344366004611bce565b606d6020526000908152604090205481565b6101ee61084a565b6101ee610885565b6101ee610374366004611ba2565b610959565b6103816109f2565b6040516001600160a01b0390911681526020016101a2565b6103816103a7366004611d30565b6066602052600090815260409020546001600160a01b031681565b6102e96103d0366004611ba2565b606760209081526000928352604080842090915290825290205481565b6101ee6103fb366004611bce565b610a01565b61041361040e366004611ba2565b610b10565b6040805192151583526020830191909152016101a2565b610432600381565b60405161ffff90911681526020016101a2565b6101ee610453366004611ba2565b610bd8565b6102e9610466366004611bce565b60686020526000908152604090205481565b6101ee610486366004611d70565b610c71565b6102e9610499366004611bce565b60696020526000908152604090205481565b6101ee6104b9366004611bce565b610f88565b6101966104cc366004611ba2565b611025565b336104da6109f2565b6001600160a01b0316146105095760405162461bcd60e51b815260040161050090611dc3565b60405180910390fd5b8161051381610579565b6105305760405163632e11e160e11b815260040160405180910390fd5b6001600160a01b0383166000908152606860205260409020548390156105695760405163268eb6a760e21b815260040160405180910390fd5b6105738484611235565b50505050565b6001600160a01b0316600090815260656020526040902054151590565b6000546001600160a01b031633146105d65760005460405163073e64fd60e21b81523360048201526001600160a01b039091166024820152604401610500565b6105e08282611314565b5050565b6001600160a01b03821660009081526065602052604081206001810154600290910154600f9190910b90826106198286611e24565b6001600160a01b038716600090815260696020526040812054919250906001600160401b0381111561064d5761064d611beb565b60405190808252806020026020018201604052801561069257816020015b604080518082019091526000808252602082015281526020019060019003908161066b5790505b5090506106c787838587606960008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611479565b6001600160a01b0388166000908152606760209081526040808320868452909152812054919250906106f98589611e38565b6107039190611e4c565b90506107118882848861155b565b955050505050505b92915050565b336107286109f2565b6001600160a01b03161461074e5760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b0384166000908152606860205260409020548490156107875760405163268eb6a760e21b815260040160405180910390fd5b6000856001600160a01b03166345c0f5336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611e64565b6001600160a01b038716600090815260656020526040902081815560010180546001600160801b0319166001600160801b038316179055905061082e8686611235565b61083886856116be565b6108428684611747565b505050505050565b336108536109f2565b6001600160a01b0316146108795760405162461bcd60e51b815260040161050090611dc3565b61088360006117bb565b565b600054600160a81b900460ff166108a957600054600160a01b900460ff16156108ad565b303b155b6109105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610500565b600054600160a81b900460ff1615801561093a576000805461ffff60a01b191661010160a01b1790555b61094261180d565b8015610956576000805460ff60a81b191690555b50565b336109626109f2565b6001600160a01b0316146109885760405162461bcd60e51b815260040161050090611dc3565b8161099281610579565b6109af5760405163632e11e160e11b815260040160405180910390fd5b6001600160a01b0383166000908152606860205260409020548390156109e85760405163268eb6a760e21b815260040160405180910390fd5b6105738484611747565b6033546001600160a01b031690565b33610a0a6109f2565b6001600160a01b031614610a305760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b0381166000908152606560209081526040808320600201546068909252822054909190829081610a6957610a69611df8565b6001600160a01b0385166000908152606860209081526040808320805488019055606590915290208054600290910154929091049250610aac918591849161183e565b6001600160a01b0383166000908152606e60209081526040808320805460ff1916600117905560678252808320848452909152908190205490516000805160206121c283398151915291610b039186918591611e7d565b60405180910390a1505050565b6001600160a01b03821660009081526065602090815260408083206002810154600382015460049092015460689094529184205484939084848281610b5757610b57611df8565b049050610b648382611e9e565b610b6e9085611e4c565b421080610b835750610b808583611e4c565b88105b80610bb157506001600160a01b0389166000908152606f6020908152604080832084845290915290205460ff165b15610bc657600096509450610bd19350505050565b600196509450505050505b9250929050565b33610be16109f2565b6001600160a01b031614610c075760405162461bcd60e51b815260040161050090611dc3565b81610c1181610579565b610c2e5760405163632e11e160e11b815260040160405180910390fd5b6001600160a01b038316600090815260686020526040902054839015610c675760405163268eb6a760e21b815260040160405180910390fd5b61057384846116be565b33610c7a6109f2565b6001600160a01b031614610ca05760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b038416610cc75760405163148b036560e31b815260040160405180910390fd5b600080856001600160a01b0316620122916040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2f9190810190611ebd565b92509250508163ffffffff168363ffffffff161180610d555750614e208363ffffffff16105b15610d735760405163386883d560e21b815260040160405180910390fd5b6000805b8251811015610dbb5786838281518110610d9357610d93611f7e565b602002602001015103610da95760019150610dbb565b80610db381611f94565b915050610d77565b5080610dda5760405163f0471d8160e01b815260040160405180910390fd5b60405163523e3b4b60e11b81526001600160401b03861660048201526000906001600160a01b0389169063a47c769690602401600060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e529190810190611fad565b93505050506000805b8251811015610eb157306001600160a01b0316838281518110610e8057610e80611f7e565b60200260200101516001600160a01b031603610e9f5760019150610eb1565b80610ea981611f94565b915050610e5b565b5080610ed057604051637af8935960e01b815260040160405180910390fd5b606a8054600080546001600160a01b038d166001600160a01b03199091168117909155606b8b90556001600160401b038a16610100810268ffffffffffffffffff1990931692909217600117909255606c805463ffffffff8a1663ffffffff19909116811790915560408051938452602084018c9052838101929092526060830152517ff3f5a94accd1162546526b6c953c564c76d28a3513d2f9a1ce52df04dff6b9b09181900360800190a1505050505050505050565b33610f916109f2565b6001600160a01b031614610fb75760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b03811661101c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610500565b610956816117bb565b60006001600160a01b038316331461105057604051633059e46160e21b815260040160405180910390fd5b60008061105d8585610b10565b925090508061107157600092505050610719565b606a5460ff16156111725760008054606b54606a54606c546040516305d3b1d360e41b815260048101939093526101009091046001600160401b031660248301526003604483015263ffffffff166064820152600160848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af11580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190611e64565b600090815260666020908152604080832080546001600160a01b0319166001600160a01b038b169081179091558352606f82528083208684529091529020805460ff191660011790555061122a565b6001600160a01b038516600090815260656020908152604080832060020154606890925282208054919290916111a9908490611e4c565b90915550506001600160a01b038516600090815260656020526040902080546002909101546111dc91879185919061183e565b6001600160a01b0385166000908152606760209081526040808320858452909152908190205490516000805160206121c2833981519152916112219188918691611e7d565b60405180910390a15b506001949350505050565b8060000361125657604051636d0ca73b60e11b815260040160405180910390fd5b6001600160a01b0382166000908152606560205260409020546112798282611e38565b15158061128557508082115b156112a357604051636d0ca73b60e11b815260040160405180910390fd5b6112ad8282611e24565b6112b8906002611e9e565b6001600160a01b03841660009081526069602090815260408083209390935560659052819020600201839055517fc45cea90ada88f563f8541c1339ae3c5135feeaf4d2556a38505faef63cdb70290610b03908590859061208e565b6000828152606660209081526040808320546001600160a01b0316808452606e9092529091205460ff161561135c576040516390d5f04560e01b815260040160405180910390fd5b6001600160a01b038116600090815260656020908152604080832060028101549054606d9093529083208054919391908261139683611f94565b9091555090508260006113a98284611e9e565b6113b390856120a7565b876000815181106113c6576113c6611f7e565b60200260200101516113d89190611e38565b6001600160a01b03871660008181526067602090815260408083208884528252808320859055928252606890529081208054929350849290919061141d908490611e4c565b90915550506001600160a01b0386166000908152606760209081526040808320868452909152908190205490516000805160206121c2833981519152916114679189918791611e7d565b60405180910390a15050505050505050565b60606000826001600160401b0381111561149557611495611beb565b6040519080825280602002602001820160405280156114da57816020015b60408051808201909152600080825260208201528152602001906001900390816114b35790505b5090506000805b8781101561154e576001600160a01b038916600090815260676020908152604080832084845290915281205461151a908b90868a61155b565b9050600061152889836120be565b9050611537858383878c6118f3565b93505050808061154690611f94565b9150506114e1565b5090979650505050505050565b60008381805b600281101561169d5760005b6001600160a01b0389166000908152606960205260409020548110156116585760008782815181106115a1576115a1611f7e565b602002602001015160000151905060008883815181106115c3576115c3611f7e565b602002602001015160200151905081600f0b85600f0b12156116315760006115eb87876120be565b905082600f0b81600f0b1215611612576001600160801b031696506116b695505050505050565b61161c868461210f565b611626908861210f565b965081955050611643565b80600f0b85600f0b1215611643578094505b5050808061165090611f94565b91505061156d565b50600f85900b61166884846120be565b600f0b1261168b5761167a828661210f565b611684908461210f565b9250600091505b8061169581611f94565b915050611561565b506116a882826120be565b6001600160801b0316925050505b949350505050565b6116cb426283d600611e4c565b8111156116eb57604051636de655ff60e01b815260040160405180910390fd5b6001600160a01b03821660009081526065602052604090819020600301829055517fbfa9d50c2493c256ccdadfbf65839537d0a493e97ee86341a58a165fe88969079061173b908490849061208e565b60405180910390a15050565b620d2f0081111561176b57604051636de655ff60e01b815260040160405180910390fd5b6001600160a01b03821660009081526065602052604090819020600401829055517f822f3034de4596d2370379d37276293111dc9c8214c3145954d9c728030be7c19061173b908490849061208e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054600160a81b900460ff166118365760405162461bcd60e51b81526004016105009061215f565b610883611b3d565b6000333a4342446118506001846120a7565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08301524060c08201523060e08201526101000160408051601f19818403018152919052805160209091012090506118b08285611e9e565b6118ba90846120a7565b6118c49082611e38565b6001600160a01b0390951660009081526067602090815260408083209683529590529390932093909355505050565b600082815b84811015611a4f57600088828151811061191457611914611f7e565b6020026020010151600001519050600089838151811061193657611936611f7e565b602002602001015160200151905081600f0b89600f0b12801561195857508684145b15611961578293505b81600f0b89600f0b12801561197b575081600f0b88600f0b135b8061199d575088600f0b82600f0b1315801561199d575080600f0b88600f0b13155b806119bd575080600f0b89600f0b1280156119bd575080600f0b88600f0b135b15611a3a5760006119ce8a8a61210f565b90506119da8a84611b6f565b99506119e6838361210f565b6119f0828c6120be565b6119fa91906120be565b98506040518060400160405280600019600f0b8152602001600019600f0b8152508b8581518110611a2d57611a2d611f7e565b6020026020010181905250505b50508080611a4790611f94565b9150506118f8565b50835b81811115611aae5787611a666001836120a7565b81518110611a7657611a76611f7e565b6020026020010151888281518110611a9057611a90611f7e565b60200260200101819052508080611aa6906121aa565b915050611a52565b50604051806040016040528087600f0b8152602001611acd8786611b6f565b600f0b815250878281518110611ae557611ae5611f7e565b60200260200101819052508380611afb90611f94565b94505082600f0b85600f0b1315611b3257611b23876000611b1c868961210f565b87876118f3565b5083611b2e81611f94565b9450505b509195945050505050565b600054600160a81b900460ff16611b665760405162461bcd60e51b81526004016105009061215f565b610883336117bb565b600081600f0b83600f0b12611b845781611b86565b825b9392505050565b6001600160a01b038116811461095657600080fd5b60008060408385031215611bb557600080fd5b8235611bc081611b8d565b946020939093013593505050565b600060208284031215611be057600080fd5b8135611b8681611b8d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611c2957611c29611beb565b604052919050565b60006001600160401b03821115611c4a57611c4a611beb565b5060051b60200190565b60008060408385031215611c6757600080fd5b823591506020808401356001600160401b03811115611c8557600080fd5b8401601f81018613611c9657600080fd5b8035611ca9611ca482611c31565b611c01565b81815260059190911b82018301908381019088831115611cc857600080fd5b928401925b82841015611ce657833582529284019290840190611ccd565b80955050505050509250929050565b60008060008060808587031215611d0b57600080fd5b8435611d1681611b8d565b966020860135965060408601359560600135945092505050565b600060208284031215611d4257600080fd5b5035919050565b6001600160401b038116811461095657600080fd5b63ffffffff8116811461095657600080fd5b60008060008060808587031215611d8657600080fd5b8435611d9181611b8d565b9350602085013592506040850135611da881611d49565b91506060850135611db881611d5e565b939692955090935050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611e3357611e33611df8565b500490565b600082611e4757611e47611df8565b500690565b60008219821115611e5f57611e5f611e0e565b500190565b600060208284031215611e7657600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b6000816000190483118215151615611eb857611eb8611e0e565b500290565b600080600060608486031215611ed257600080fd5b835161ffff81168114611ee457600080fd5b80935050602080850151611ef781611d5e565b60408601519093506001600160401b03811115611f1357600080fd5b8501601f81018713611f2457600080fd5b8051611f32611ca482611c31565b81815260059190911b82018301908381019089831115611f5157600080fd5b928401925b82841015611f6f57835182529284019290840190611f56565b80955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600060018201611fa657611fa6611e0e565b5060010190565b60008060008060808587031215611fc357600080fd5b84516001600160601b0381168114611fda57600080fd5b80945050602080860151611fed81611d49565b6040870151909450611ffe81611b8d565b60608701519093506001600160401b0381111561201a57600080fd5b8601601f8101881361202b57600080fd5b8051612039611ca482611c31565b81815260059190911b8201830190838101908a83111561205857600080fd5b928401925b8284101561207f57835161207081611b8d565b8252928401929084019061205d565b979a9699509497505050505050565b6001600160a01b03929092168252602082015260400190565b6000828210156120b9576120b9611e0e565b500390565b6000600f82810b9084900b828212801560016001607f1b03849003831316156120e9576120e9611e0e565b60016001607f1b0319839003821281161561210657612106611e0e565b50019392505050565b6000600f82810b9084900b828112801560016001607f1b031983018412161561213a5761213a611e0e565b60016001607f1b038201831381161561215557612155611e0e565b5090039392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816121b9576121b9611e0e565b50600019019056febd515cb7fe6810ea1d996c4efb3231c8b281498ca8062a4ec905d41943824bdfa26469706673582212204b2bd96c3b7e20f679e5fee230028fdecc53c4d5fa3432ef245653f787669b9b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101845760003560e01c80638129fc1c116100d9578063b0fb162f11610087578063b0fb162f1461042a578063b7b1349614610445578063bc2af1b614610458578063d66f3a7914610478578063ed90d3871461048b578063f2fde38b146104ab578063fbbc872b146104be57600080fd5b80638129fc1c1461035e5780638a5b5993146103665780638da5cb5b146103795780639305d53a14610399578063989030af146103c2578063a4c25c99146103ed578063ad9e22af1461040057600080fd5b806324f746971161013657806324f74697146102b15780633e967802146102d657806342517341146102f75780635825fadf1461030a57806361728f391461032d57806367e1460014610336578063715018a61461035657600080fd5b8063060383411461018957806309c1ba2e146101ab57806312244936146101db5780631733377b146101f0578063181d2588146102035780631fe543e31461027057806322ae5b6d14610283575b600080fd5b606a546101969060ff1681565b60405190151581526020015b60405180910390f35b606a546101c39061010090046001600160401b031681565b6040516001600160401b0390911681526020016101a2565b6101ee6101e9366004611ba2565b6104d1565b005b6101966101fe366004611bce565b610579565b610245610211366004611bce565b606560205260009081526040902080546001820154600283015460038401546004909401549293600f9290920b9290919085565b60408051958652600f9490940b6020860152928401919091526060830152608082015260a0016101a2565b6101ee61027e366004611c54565b610596565b610196610291366004611ba2565b606f60209081526000928352604080842090915290825290205460ff1681565b606c546102c19063ffffffff1681565b60405163ffffffff90911681526020016101a2565b6102e96102e4366004611ba2565b6105e4565b6040519081526020016101a2565b6101ee610305366004611cf5565b61071f565b610196610318366004611bce565b606e6020526000908152604090205460ff1681565b6102e9606b5481565b6102e9610344366004611bce565b606d6020526000908152604090205481565b6101ee61084a565b6101ee610885565b6101ee610374366004611ba2565b610959565b6103816109f2565b6040516001600160a01b0390911681526020016101a2565b6103816103a7366004611d30565b6066602052600090815260409020546001600160a01b031681565b6102e96103d0366004611ba2565b606760209081526000928352604080842090915290825290205481565b6101ee6103fb366004611bce565b610a01565b61041361040e366004611ba2565b610b10565b6040805192151583526020830191909152016101a2565b610432600381565b60405161ffff90911681526020016101a2565b6101ee610453366004611ba2565b610bd8565b6102e9610466366004611bce565b60686020526000908152604090205481565b6101ee610486366004611d70565b610c71565b6102e9610499366004611bce565b60696020526000908152604090205481565b6101ee6104b9366004611bce565b610f88565b6101966104cc366004611ba2565b611025565b336104da6109f2565b6001600160a01b0316146105095760405162461bcd60e51b815260040161050090611dc3565b60405180910390fd5b8161051381610579565b6105305760405163632e11e160e11b815260040160405180910390fd5b6001600160a01b0383166000908152606860205260409020548390156105695760405163268eb6a760e21b815260040160405180910390fd5b6105738484611235565b50505050565b6001600160a01b0316600090815260656020526040902054151590565b6000546001600160a01b031633146105d65760005460405163073e64fd60e21b81523360048201526001600160a01b039091166024820152604401610500565b6105e08282611314565b5050565b6001600160a01b03821660009081526065602052604081206001810154600290910154600f9190910b90826106198286611e24565b6001600160a01b038716600090815260696020526040812054919250906001600160401b0381111561064d5761064d611beb565b60405190808252806020026020018201604052801561069257816020015b604080518082019091526000808252602082015281526020019060019003908161066b5790505b5090506106c787838587606960008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611479565b6001600160a01b0388166000908152606760209081526040808320868452909152812054919250906106f98589611e38565b6107039190611e4c565b90506107118882848861155b565b955050505050505b92915050565b336107286109f2565b6001600160a01b03161461074e5760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b0384166000908152606860205260409020548490156107875760405163268eb6a760e21b815260040160405180910390fd5b6000856001600160a01b03166345c0f5336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611e64565b6001600160a01b038716600090815260656020526040902081815560010180546001600160801b0319166001600160801b038316179055905061082e8686611235565b61083886856116be565b6108428684611747565b505050505050565b336108536109f2565b6001600160a01b0316146108795760405162461bcd60e51b815260040161050090611dc3565b61088360006117bb565b565b600054600160a81b900460ff166108a957600054600160a01b900460ff16156108ad565b303b155b6109105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610500565b600054600160a81b900460ff1615801561093a576000805461ffff60a01b191661010160a01b1790555b61094261180d565b8015610956576000805460ff60a81b191690555b50565b336109626109f2565b6001600160a01b0316146109885760405162461bcd60e51b815260040161050090611dc3565b8161099281610579565b6109af5760405163632e11e160e11b815260040160405180910390fd5b6001600160a01b0383166000908152606860205260409020548390156109e85760405163268eb6a760e21b815260040160405180910390fd5b6105738484611747565b6033546001600160a01b031690565b33610a0a6109f2565b6001600160a01b031614610a305760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b0381166000908152606560209081526040808320600201546068909252822054909190829081610a6957610a69611df8565b6001600160a01b0385166000908152606860209081526040808320805488019055606590915290208054600290910154929091049250610aac918591849161183e565b6001600160a01b0383166000908152606e60209081526040808320805460ff1916600117905560678252808320848452909152908190205490516000805160206121c283398151915291610b039186918591611e7d565b60405180910390a1505050565b6001600160a01b03821660009081526065602090815260408083206002810154600382015460049092015460689094529184205484939084848281610b5757610b57611df8565b049050610b648382611e9e565b610b6e9085611e4c565b421080610b835750610b808583611e4c565b88105b80610bb157506001600160a01b0389166000908152606f6020908152604080832084845290915290205460ff165b15610bc657600096509450610bd19350505050565b600196509450505050505b9250929050565b33610be16109f2565b6001600160a01b031614610c075760405162461bcd60e51b815260040161050090611dc3565b81610c1181610579565b610c2e5760405163632e11e160e11b815260040160405180910390fd5b6001600160a01b038316600090815260686020526040902054839015610c675760405163268eb6a760e21b815260040160405180910390fd5b61057384846116be565b33610c7a6109f2565b6001600160a01b031614610ca05760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b038416610cc75760405163148b036560e31b815260040160405180910390fd5b600080856001600160a01b0316620122916040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2f9190810190611ebd565b92509250508163ffffffff168363ffffffff161180610d555750614e208363ffffffff16105b15610d735760405163386883d560e21b815260040160405180910390fd5b6000805b8251811015610dbb5786838281518110610d9357610d93611f7e565b602002602001015103610da95760019150610dbb565b80610db381611f94565b915050610d77565b5080610dda5760405163f0471d8160e01b815260040160405180910390fd5b60405163523e3b4b60e11b81526001600160401b03861660048201526000906001600160a01b0389169063a47c769690602401600060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e529190810190611fad565b93505050506000805b8251811015610eb157306001600160a01b0316838281518110610e8057610e80611f7e565b60200260200101516001600160a01b031603610e9f5760019150610eb1565b80610ea981611f94565b915050610e5b565b5080610ed057604051637af8935960e01b815260040160405180910390fd5b606a8054600080546001600160a01b038d166001600160a01b03199091168117909155606b8b90556001600160401b038a16610100810268ffffffffffffffffff1990931692909217600117909255606c805463ffffffff8a1663ffffffff19909116811790915560408051938452602084018c9052838101929092526060830152517ff3f5a94accd1162546526b6c953c564c76d28a3513d2f9a1ce52df04dff6b9b09181900360800190a1505050505050505050565b33610f916109f2565b6001600160a01b031614610fb75760405162461bcd60e51b815260040161050090611dc3565b6001600160a01b03811661101c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610500565b610956816117bb565b60006001600160a01b038316331461105057604051633059e46160e21b815260040160405180910390fd5b60008061105d8585610b10565b925090508061107157600092505050610719565b606a5460ff16156111725760008054606b54606a54606c546040516305d3b1d360e41b815260048101939093526101009091046001600160401b031660248301526003604483015263ffffffff166064820152600160848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af11580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190611e64565b600090815260666020908152604080832080546001600160a01b0319166001600160a01b038b169081179091558352606f82528083208684529091529020805460ff191660011790555061122a565b6001600160a01b038516600090815260656020908152604080832060020154606890925282208054919290916111a9908490611e4c565b90915550506001600160a01b038516600090815260656020526040902080546002909101546111dc91879185919061183e565b6001600160a01b0385166000908152606760209081526040808320858452909152908190205490516000805160206121c2833981519152916112219188918691611e7d565b60405180910390a15b506001949350505050565b8060000361125657604051636d0ca73b60e11b815260040160405180910390fd5b6001600160a01b0382166000908152606560205260409020546112798282611e38565b15158061128557508082115b156112a357604051636d0ca73b60e11b815260040160405180910390fd5b6112ad8282611e24565b6112b8906002611e9e565b6001600160a01b03841660009081526069602090815260408083209390935560659052819020600201839055517fc45cea90ada88f563f8541c1339ae3c5135feeaf4d2556a38505faef63cdb70290610b03908590859061208e565b6000828152606660209081526040808320546001600160a01b0316808452606e9092529091205460ff161561135c576040516390d5f04560e01b815260040160405180910390fd5b6001600160a01b038116600090815260656020908152604080832060028101549054606d9093529083208054919391908261139683611f94565b9091555090508260006113a98284611e9e565b6113b390856120a7565b876000815181106113c6576113c6611f7e565b60200260200101516113d89190611e38565b6001600160a01b03871660008181526067602090815260408083208884528252808320859055928252606890529081208054929350849290919061141d908490611e4c565b90915550506001600160a01b0386166000908152606760209081526040808320868452909152908190205490516000805160206121c2833981519152916114679189918791611e7d565b60405180910390a15050505050505050565b60606000826001600160401b0381111561149557611495611beb565b6040519080825280602002602001820160405280156114da57816020015b60408051808201909152600080825260208201528152602001906001900390816114b35790505b5090506000805b8781101561154e576001600160a01b038916600090815260676020908152604080832084845290915281205461151a908b90868a61155b565b9050600061152889836120be565b9050611537858383878c6118f3565b93505050808061154690611f94565b9150506114e1565b5090979650505050505050565b60008381805b600281101561169d5760005b6001600160a01b0389166000908152606960205260409020548110156116585760008782815181106115a1576115a1611f7e565b602002602001015160000151905060008883815181106115c3576115c3611f7e565b602002602001015160200151905081600f0b85600f0b12156116315760006115eb87876120be565b905082600f0b81600f0b1215611612576001600160801b031696506116b695505050505050565b61161c868461210f565b611626908861210f565b965081955050611643565b80600f0b85600f0b1215611643578094505b5050808061165090611f94565b91505061156d565b50600f85900b61166884846120be565b600f0b1261168b5761167a828661210f565b611684908461210f565b9250600091505b8061169581611f94565b915050611561565b506116a882826120be565b6001600160801b0316925050505b949350505050565b6116cb426283d600611e4c565b8111156116eb57604051636de655ff60e01b815260040160405180910390fd5b6001600160a01b03821660009081526065602052604090819020600301829055517fbfa9d50c2493c256ccdadfbf65839537d0a493e97ee86341a58a165fe88969079061173b908490849061208e565b60405180910390a15050565b620d2f0081111561176b57604051636de655ff60e01b815260040160405180910390fd5b6001600160a01b03821660009081526065602052604090819020600401829055517f822f3034de4596d2370379d37276293111dc9c8214c3145954d9c728030be7c19061173b908490849061208e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054600160a81b900460ff166118365760405162461bcd60e51b81526004016105009061215f565b610883611b3d565b6000333a4342446118506001846120a7565b604080516001600160a01b0390971660208801528601949094526060850192909252608084015260a08301524060c08201523060e08201526101000160408051601f19818403018152919052805160209091012090506118b08285611e9e565b6118ba90846120a7565b6118c49082611e38565b6001600160a01b0390951660009081526067602090815260408083209683529590529390932093909355505050565b600082815b84811015611a4f57600088828151811061191457611914611f7e565b6020026020010151600001519050600089838151811061193657611936611f7e565b602002602001015160200151905081600f0b89600f0b12801561195857508684145b15611961578293505b81600f0b89600f0b12801561197b575081600f0b88600f0b135b8061199d575088600f0b82600f0b1315801561199d575080600f0b88600f0b13155b806119bd575080600f0b89600f0b1280156119bd575080600f0b88600f0b135b15611a3a5760006119ce8a8a61210f565b90506119da8a84611b6f565b99506119e6838361210f565b6119f0828c6120be565b6119fa91906120be565b98506040518060400160405280600019600f0b8152602001600019600f0b8152508b8581518110611a2d57611a2d611f7e565b6020026020010181905250505b50508080611a4790611f94565b9150506118f8565b50835b81811115611aae5787611a666001836120a7565b81518110611a7657611a76611f7e565b6020026020010151888281518110611a9057611a90611f7e565b60200260200101819052508080611aa6906121aa565b915050611a52565b50604051806040016040528087600f0b8152602001611acd8786611b6f565b600f0b815250878281518110611ae557611ae5611f7e565b60200260200101819052508380611afb90611f94565b94505082600f0b85600f0b1315611b3257611b23876000611b1c868961210f565b87876118f3565b5083611b2e81611f94565b9450505b509195945050505050565b600054600160a81b900460ff16611b665760405162461bcd60e51b81526004016105009061215f565b610883336117bb565b600081600f0b83600f0b12611b845781611b86565b825b9392505050565b6001600160a01b038116811461095657600080fd5b60008060408385031215611bb557600080fd5b8235611bc081611b8d565b946020939093013593505050565b600060208284031215611be057600080fd5b8135611b8681611b8d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611c2957611c29611beb565b604052919050565b60006001600160401b03821115611c4a57611c4a611beb565b5060051b60200190565b60008060408385031215611c6757600080fd5b823591506020808401356001600160401b03811115611c8557600080fd5b8401601f81018613611c9657600080fd5b8035611ca9611ca482611c31565b611c01565b81815260059190911b82018301908381019088831115611cc857600080fd5b928401925b82841015611ce657833582529284019290840190611ccd565b80955050505050509250929050565b60008060008060808587031215611d0b57600080fd5b8435611d1681611b8d565b966020860135965060408601359560600135945092505050565b600060208284031215611d4257600080fd5b5035919050565b6001600160401b038116811461095657600080fd5b63ffffffff8116811461095657600080fd5b60008060008060808587031215611d8657600080fd5b8435611d9181611b8d565b9350602085013592506040850135611da881611d49565b91506060850135611db881611d5e565b939692955090935050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611e3357611e33611df8565b500490565b600082611e4757611e47611df8565b500690565b60008219821115611e5f57611e5f611e0e565b500190565b600060208284031215611e7657600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b6000816000190483118215151615611eb857611eb8611e0e565b500290565b600080600060608486031215611ed257600080fd5b835161ffff81168114611ee457600080fd5b80935050602080850151611ef781611d5e565b60408601519093506001600160401b03811115611f1357600080fd5b8501601f81018713611f2457600080fd5b8051611f32611ca482611c31565b81815260059190911b82018301908381019089831115611f5157600080fd5b928401925b82841015611f6f57835182529284019290840190611f56565b80955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600060018201611fa657611fa6611e0e565b5060010190565b60008060008060808587031215611fc357600080fd5b84516001600160601b0381168114611fda57600080fd5b80945050602080860151611fed81611d49565b6040870151909450611ffe81611b8d565b60608701519093506001600160401b0381111561201a57600080fd5b8601601f8101881361202b57600080fd5b8051612039611ca482611c31565b81815260059190911b8201830190838101908a83111561205857600080fd5b928401925b8284101561207f57835161207081611b8d565b8252928401929084019061205d565b979a9699509497505050505050565b6001600160a01b03929092168252602082015260400190565b6000828210156120b9576120b9611e0e565b500390565b6000600f82810b9084900b828212801560016001607f1b03849003831316156120e9576120e9611e0e565b60016001607f1b0319839003821281161561210657612106611e0e565b50019392505050565b6000600f82810b9084900b828112801560016001607f1b031983018412161561213a5761213a611e0e565b60016001607f1b038201831381161561215557612155611e0e565b5090039392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816121b9576121b9611e0e565b50600019019056febd515cb7fe6810ea1d996c4efb3231c8b281498ca8062a4ec905d41943824bdfa26469706673582212204b2bd96c3b7e20f679e5fee230028fdecc53c4d5fa3432ef245653f787669b9b64736f6c634300080d0033",
  "devdoc": {
    "events": {
      "Reveal(address,uint256,uint256)": {
        "details": "Emitted on revealNextBatch() and forceReveal()",
        "params": {
          "baseLaunchpeg": "Base launchpeg address",
          "batchNumber": "The batch revealed",
          "batchSeed": "The random number drawn"
        }
      },
      "RevealBatchSizeSet(address,uint256)": {
        "details": "Emitted on setRevealBatchSize()",
        "params": {
          "baseLaunchpeg": "Base launchpeg address",
          "revealBatchSize": "New reveal batch size"
        }
      },
      "RevealIntervalSet(address,uint256)": {
        "details": "Emitted on setRevealInterval()",
        "params": {
          "baseLaunchpeg": "Base launchpeg address",
          "revealInterval": "New reveal interval"
        }
      },
      "RevealStartTimeSet(address,uint256)": {
        "details": "Emitted on setRevealStartTime()",
        "params": {
          "baseLaunchpeg": "Base launchpeg address",
          "revealStartTime": "New reveal start time"
        }
      },
      "VRFSet(address,bytes32,uint64,uint32)": {
        "details": "emitted on setVRF()",
        "params": {
          "_callbackGasLimit": "Max gas used by the coordinator callback",
          "_keyHash": "Keyhash of the gas lane wanted",
          "_subscriptionId": "Chainlink subscription ID",
          "_vrfCoordinator": "Chainlink coordinator address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "configure(address,uint256,uint256,uint256)": {
        "details": "Configure batch reveal for a given launch",
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_revealBatchSize": "Size of the batch reveal",
          "_revealInterval": "Batch reveal interval",
          "_revealStartTime": "Batch reveal start time"
        }
      },
      "forceReveal(address)": {
        "details": "Force reveal, should be restricted to owner"
      },
      "getShuffledTokenId(address,uint256)": {
        "details": "Gets the random token URI number from tokenId",
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_startId": "Token Id to consider"
        },
        "returns": {
          "_0": "uriId Revealed Token URI Id"
        }
      },
      "hasBatchToReveal(address,uint256)": {
        "details": "Returns true if a batch can be revealed",
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_totalSupply": "Number of token already minted"
        },
        "returns": {
          "_0": "hasToRevealInfo Returns a bool saying whether a reveal can be triggered or not and the number of the next batch that will be revealed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revealNextBatch(address,uint256)": {
        "details": "Reveals next batch if possibleIf using VRF, the reveal happens on the coordinator callback call",
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_totalSupply": "Number of token already minted"
        },
        "returns": {
          "_0": "isRevealed Returns false if it is not possible to reveal the next batch"
        }
      },
      "setRevealBatchSize(address,uint256)": {
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_revealBatchSize": "New reveal batch size"
        }
      },
      "setRevealInterval(address,uint256)": {
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_revealInterval": "New batch reveal interval"
        }
      },
      "setRevealStartTime(address,uint256)": {
        "params": {
          "_baseLaunchpeg": "Base launchpeg address",
          "_revealStartTime": "New batch reveal start time"
        }
      },
      "setVRF(address,bytes32,uint64,uint32)": {
        "params": {
          "_callbackGasLimit": "Max gas used by the coordinator callback",
          "_keyHash": "Keyhash of the gas lane wanted",
          "_subscriptionId": "Chainlink subscription ID",
          "_vrfCoordinator": "Chainlink coordinator address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "launchpegToHasBeenForceRevealed": {
        "details": "VRF will not be used anymore if a batch has been force revealed"
      },
      "launchpegToRangeLength": {
        "details": "Size of the array that will store already taken URIs numbers by launchpeg"
      },
      "launchpegToVrfRequestedForBatch": {
        "details": "Prevents people from spamming the random words request and therefore reveal more batches than expected"
      }
    },
    "title": "BatchReveal",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callbackGasLimit()": {
        "notice": "Depends on the number of requested values that you want sent to the fulfillRandomWords() function. Storing each word costs about 20,000 gas, so 100,000 is a safe default for this example contract. Test and adjust this limit based on the network that you select, the size of the request, and the processing of the callback request in the fulfillRandomWords() function."
      },
      "initialize()": {
        "notice": "Initialize batch reveal"
      },
      "isBatchRevealInitialized(address)": {
        "notice": "Returns true if batch reveal is configured for the given launchpeg Since the collection size is set only when batch reveal is initialized, and the collection size cannot be 0, we assume a 0 value means the batch reveal configuration has not been initialized."
      },
      "keyHash()": {
        "notice": "The gas lane to use, which specifies the maximum gas price to bump to. For a list of available gas lanes on each network, see https://docs.chain.link/docs/vrf-contracts/#configurations"
      },
      "launchpegToBatchToSeed(address,uint256)": {
        "notice": "Randomized seeds used to shuffle TokenURIs by launchpeg"
      },
      "launchpegToConfig(address)": {
        "notice": "Batch reveal configuration by launchpeg"
      },
      "launchpegToHasBeenForceRevealed(address)": {
        "notice": "True when force revealed has been triggered for the given launchpeg"
      },
      "launchpegToLastTokenReveal(address)": {
        "notice": "Last token that has been revealed by launchpeg"
      },
      "launchpegToNextBatchToReveal(address)": {
        "notice": "Next batch that will be revealed by VRF (if activated) by launchpeg"
      },
      "launchpegToVrfRequestedForBatch(address,uint256)": {
        "notice": "Has the random number for a batch already been asked by launchpeg"
      },
      "rawFulfillRandomWords(uint256,uint256[])": {
        "notice": "rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof. rawFulfillRandomness then calls fulfillRandomness, after validating the origin of the call"
      },
      "requestConfirmations()": {
        "notice": "Number of block confirmations that the coordinator will wait before triggering the callback The default is 3"
      },
      "setRevealBatchSize(address,uint256)": {
        "notice": "Set the reveal batch size. Can only be set after batch reveal has been initialized and before a batch has been revealed."
      },
      "setRevealInterval(address,uint256)": {
        "notice": "Set the batch reveal interval. Can only be set after batch reveal has been initialized and before a batch has been revealed."
      },
      "setRevealStartTime(address,uint256)": {
        "notice": "Set the batch reveal start time. Can only be set after batch reveal has been initialized and before a batch has been revealed."
      },
      "setVRF(address,bytes32,uint64,uint32)": {
        "notice": "Set VRF configuration"
      },
      "subscriptionId()": {
        "notice": "Chainlink subscription ID"
      },
      "useVRF()": {
        "notice": "Contract uses VRF or pseudo-randomness"
      },
      "vrfRequestIdToLaunchpeg(uint256)": {
        "notice": "VRF request ids by launchpeg"
      }
    },
    "notice": "Implements a gas efficient way of revealing NFT URIs gradually",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11388,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 810,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 813,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1710,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 671,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 783,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5491,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToConfig",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(BatchRevealConfig)12378_storage)"
      },
      {
        "astId": 5496,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "vrfRequestIdToLaunchpeg",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5504,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToBatchToSeed",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5510,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToLastTokenReveal",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5515,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToRangeLength",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5519,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "useVRF",
        "offset": 0,
        "slot": "106",
        "type": "t_bool"
      },
      {
        "astId": 5523,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "subscriptionId",
        "offset": 1,
        "slot": "106",
        "type": "t_uint64"
      },
      {
        "astId": 5527,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "keyHash",
        "offset": 0,
        "slot": "107",
        "type": "t_bytes32"
      },
      {
        "astId": 5531,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "108",
        "type": "t_uint32"
      },
      {
        "astId": 5542,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToNextBatchToReveal",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5548,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToHasBeenForceRevealed",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5556,
        "contract": "contracts/BatchReveal.sol:BatchReveal",
        "label": "launchpegToVrfRequestedForBatch",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BatchRevealConfig)12378_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBatchReveal.BatchRevealConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchRevealConfig)12378_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BatchRevealConfig)12378_storage": {
        "encoding": "inplace",
        "label": "struct IBatchReveal.BatchRevealConfig",
        "members": [
          {
            "astId": 12366,
            "contract": "contracts/BatchReveal.sol:BatchReveal",
            "label": "collectionSize",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12368,
            "contract": "contracts/BatchReveal.sol:BatchReveal",
            "label": "intCollectionSize",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          },
          {
            "astId": 12371,
            "contract": "contracts/BatchReveal.sol:BatchReveal",
            "label": "revealBatchSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12374,
            "contract": "contracts/BatchReveal.sol:BatchReveal",
            "label": "revealStartTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12377,
            "contract": "contracts/BatchReveal.sol:BatchReveal",
            "label": "revealInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}