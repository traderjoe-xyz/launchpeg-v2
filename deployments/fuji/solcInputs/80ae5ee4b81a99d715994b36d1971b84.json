{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981Upgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\n    function __ERC2981_init() internal onlyInitializing {\n    }\n\n    function __ERC2981_init_unchained() internal onlyInitializing {\n    }\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981Upgradeable\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/BaseLaunchpeg.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\nimport \"./ERC721AUpgradeable.sol\";\nimport \"operator-filter-registry/src/IOperatorFilterRegistry.sol\";\n\nimport \"./LaunchpegErrors.sol\";\nimport \"./interfaces/IBaseLaunchpeg.sol\";\nimport \"./interfaces/IBatchReveal.sol\";\nimport \"./utils/SafePausableUpgradeable.sol\";\n\n/// @title BaseLaunchpeg\n/// @author Trader Joe\n/// @notice Implements the functionalities shared between Launchpeg and FlatLaunchpeg contracts.\nabstract contract BaseLaunchpeg is\n    IBaseLaunchpeg,\n    ERC721AUpgradeable,\n    SafePausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ERC2981Upgradeable\n{\n    using StringsUpgradeable for uint256;\n\n    /// @dev Structure for pre-mint data\n    struct PreMintData {\n        // address to mint NFTs to\n        address sender;\n        // No. of NFTs to mint\n        uint96 quantity;\n    }\n\n    /// @dev Structure for a set of pre-mint data.\n    struct PreMintDataSet {\n        // pre-mint data array\n        PreMintData[] preMintDataArr;\n        // maps a user address to the index of the user's pre-mint data in the\n        // `preMintDataArr` array. Plus 1 because index 0 means data does not\n        // exist for that user.\n        mapping(address => uint256) indexes;\n    }\n\n    /// @notice Role granted to project owners\n    bytes32 public constant override PROJECT_OWNER_ROLE =\n        keccak256(\"PROJECT_OWNER_ROLE\");\n\n    /// @notice Percentage base point\n    uint256 public constant BASIS_POINT_PRECISION = 10_000;\n\n    /// @notice The collection size (e.g 10000)\n    uint256 public override collectionSize;\n\n    /// @notice Amount of NFTs reserved for the project owner (e.g 200)\n    /// @dev It can be minted any time via `devMint`\n    uint256 public override amountForDevs;\n\n    /// @notice Amount of NFTs available for the allowlist mint (e.g 1000)\n    uint256 public override amountForAllowlist;\n\n    /// @notice Max amount of NFTs an address can mint in public phases\n    uint256 public override maxPerAddressDuringMint;\n\n    /// @notice The fees collected by Joepegs on the sale benefits\n    /// @dev In basis points e.g 100 for 1%\n    uint256 public override joeFeePercent;\n\n    /// @notice The address to which the fees on the sale will be sent\n    address public override joeFeeCollector;\n\n    /// @notice Batch reveal contract\n    IBatchReveal public batchReveal;\n\n    /// @notice Token URI after collection reveal\n    string public override baseURI;\n\n    /// @notice Token URI before the collection reveal\n    string public override unrevealedURI;\n\n    /// @notice The amount of NFTs each allowed address can mint during\n    /// the pre-mint or allowlist mint\n    mapping(address => uint256) public override allowlist;\n\n    /// @notice Tracks the amount of NFTs minted by `projectOwner`\n    uint256 public override amountMintedByDevs;\n\n    /// @notice Tracks the amount of NFTs minted in the Pre-Mint phase\n    uint256 public override amountMintedDuringPreMint;\n\n    /// @notice Tracks the amount of pre-minted NFTs that have been claimed\n    uint256 public override amountClaimedDuringPreMint;\n\n    /// @notice Tracks the amount of NFTs minted on Allowlist phase\n    uint256 public override amountMintedDuringAllowlist;\n\n    /// @notice Tracks the amount of NFTs minted on Public Sale phase\n    uint256 public override amountMintedDuringPublicSale;\n\n    /// @notice Start time of the pre-mint in seconds\n    uint256 public override preMintStartTime;\n\n    /// @notice Start time of the allowlist mint in seconds\n    uint256 public override allowlistStartTime;\n\n    /// @notice Start time of the public sale in seconds\n    /// @dev A timestamp greater than the allowlist mint start\n    uint256 public override publicSaleStartTime;\n\n    /// @notice End time of the public sale in seconds\n    /// @dev A timestamp greater than the public sale start\n    uint256 public override publicSaleEndTime;\n\n    /// @notice Start time when funds can be withdrawn\n    uint256 public override withdrawAVAXStartTime;\n\n    /// @notice Contract filtering allowed operators, preventing unauthorized contract to transfer NFTs\n    /// By default, Launchpeg contracts are subscribed to OpenSea's Curated Subscription Address at 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    /// @dev Set of pending pre-mint data (user address and quantity)\n    PreMintDataSet private _pendingPreMints;\n\n    /// @dev Emitted on initializeJoeFee()\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\n    /// @param feeCollector The address to which the fees on the sale will be sent\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\n\n    /// @dev Emitted on devMint()\n    /// @param sender The address that minted\n    /// @param quantity Amount of NFTs minted\n    event DevMint(address indexed sender, uint256 quantity);\n\n    /// @dev Emitted on preMint()\n    /// @param sender The address that minted\n    /// @param quantity Amount of NFTs minted\n    /// @param price Price of 1 NFT\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\n\n    /// @dev Emitted on auctionMint(), claimPreMint(), batchClaimPreMint(),\n    /// allowlistMint(), publicSaleMint()\n    /// @param sender The address that minted\n    /// @param quantity Amount of NFTs minted\n    /// @param price Price in AVAX for the NFTs\n    /// @param startTokenId The token ID of the first minted NFT:\n    /// if `startTokenId` = 100 and `quantity` = 2, `sender` minted 100 and 101\n    /// @param phase The phase in which the mint occurs\n    event Mint(\n        address indexed sender,\n        uint256 quantity,\n        uint256 price,\n        uint256 startTokenId,\n        Phase phase\n    );\n\n    /// @dev Emitted on withdrawAVAX()\n    /// @param sender The address that withdrew the tokens\n    /// @param amount Amount of AVAX transfered to `sender`\n    /// @param fee Amount of AVAX paid to the fee collector\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\n\n    /// @dev Emitted on setBaseURI()\n    /// @param baseURI The new base URI\n    event BaseURISet(string baseURI);\n\n    /// @dev Emitted on setUnrevealedURI()\n    /// @param unrevealedURI The new base URI\n    event UnrevealedURISet(string unrevealedURI);\n\n    /// @dev Emitted on seedAllowlist()\n    event AllowlistSeeded();\n\n    /// @dev Emitted on _setDefaultRoyalty()\n    /// @param receiver Royalty fee collector\n    /// @param feePercent Royalty fee percent in basis point\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\n\n    /// @dev Emitted on setPreMintStartTime()\n    /// @param preMintStartTime New pre-mint start time\n    event PreMintStartTimeSet(uint256 preMintStartTime);\n\n    /// @dev Emitted on setAllowlistStartTime()\n    /// @param allowlistStartTime New allowlist start time\n    event AllowlistStartTimeSet(uint256 allowlistStartTime);\n\n    /// @dev Emitted on setPublicSaleStartTime()\n    /// @param publicSaleStartTime New public sale start time\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\n\n    /// @dev Emitted on setPublicSaleEndTime()\n    /// @param publicSaleEndTime New public sale end time\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\n\n    /// @dev Emitted on setWithdrawAVAXStartTime()\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\n\n    /// @dev Emitted on updateOperatorFilterRegistryAddress()\n    /// @param operatorFilterRegistry New operator filter registry\n    event OperatorFilterRegistryUpdated(\n        IOperatorFilterRegistry indexed operatorFilterRegistry\n    );\n\n    modifier isEOA() {\n        if (tx.origin != msg.sender) {\n            revert Launchpeg__Unauthorized();\n        }\n        _;\n    }\n\n    /// @notice Checks if the current phase matches the required phase\n    modifier atPhase(Phase _phase) {\n        if (currentPhase() != _phase) {\n            revert Launchpeg__WrongPhase();\n        }\n        _;\n    }\n\n    /// @notice Pre-mints can be claimed from the allowlist phase\n    /// (including after sale ends)\n    modifier isClaimPreMintAvailable() {\n        if (block.timestamp < allowlistStartTime) {\n            revert Launchpeg__WrongPhase();\n        }\n        _;\n    }\n\n    /// @notice Phase time can be updated if it has been initialized and\n    // the time has not passed\n    modifier isTimeUpdateAllowed(uint256 _phaseTime) {\n        if (_phaseTime == 0) {\n            revert Launchpeg__NotInitialized();\n        }\n        if (_phaseTime <= block.timestamp) {\n            revert Launchpeg__WrongPhase();\n        }\n        _;\n    }\n\n    /// @notice Checks if new time is equal to or after block timestamp\n    modifier isNotBeforeBlockTimestamp(uint256 _newTime) {\n        if (_newTime < block.timestamp) {\n            revert Launchpeg__InvalidPhases();\n        }\n        _;\n    }\n\n    /// @notice Allow spending tokens from addresses with balance\n    /// Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n    /// from an EOA.\n    modifier onlyAllowedOperator(address from) virtual {\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /// @notice Allow approving tokens transfers\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /// @dev BaseLaunchpeg initialization\n    /// @param _collectionData Launchpeg collection data\n    /// @param _ownerData Launchpeg owner data\n    function initializeBaseLaunchpeg(\n        CollectionData calldata _collectionData,\n        CollectionOwnerData calldata _ownerData\n    ) internal onlyInitializing {\n        __SafePausable_init();\n        __ReentrancyGuard_init();\n        __ERC2981_init();\n        __ERC721A_init(_collectionData.name, _collectionData.symbol);\n\n        if (_ownerData.owner == address(0)) {\n            revert Launchpeg__InvalidOwner();\n        }\n        if (_ownerData.projectOwner == address(0)) {\n            revert Launchpeg__InvalidProjectOwner();\n        }\n        if (\n            _collectionData.collectionSize == 0 ||\n            _collectionData.amountForDevs + _collectionData.amountForAllowlist >\n            _collectionData.collectionSize\n        ) {\n            revert Launchpeg__LargerCollectionSizeNeeded();\n        }\n        if (\n            _collectionData.maxPerAddressDuringMint >\n            _collectionData.collectionSize\n        ) {\n            revert Launchpeg__InvalidMaxPerAddressDuringMint();\n        }\n\n        // Initialize the operator filter registry and subcribe to OpenSea's list\n        IOperatorFilterRegistry _operatorFilterRegistry = IOperatorFilterRegistry(\n                0x000000000000AAeB6D7670E522A718067333cd4E\n            );\n        if (address(_operatorFilterRegistry).code.length > 0) {\n            _operatorFilterRegistry.registerAndSubscribe(\n                address(this),\n                0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\n            );\n        }\n        _updateOperatorFilterRegistryAddress(_operatorFilterRegistry);\n\n        // Default royalty is 5%\n        _setDefaultRoyalty(_ownerData.royaltyReceiver, 500);\n        _initializeJoeFee(_ownerData.joeFeePercent, _ownerData.joeFeeCollector);\n\n        batchReveal = IBatchReveal(_collectionData.batchReveal);\n        collectionSize = _collectionData.collectionSize;\n        maxPerAddressDuringMint = _collectionData.maxPerAddressDuringMint;\n        amountForDevs = _collectionData.amountForDevs;\n        amountForAllowlist = _collectionData.amountForAllowlist;\n\n        grantRole(PAUSER_ROLE, msg.sender);\n        grantRole(PROJECT_OWNER_ROLE, _ownerData.projectOwner);\n        _transferOwnership(_ownerData.owner);\n    }\n\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\n    /// @param _joeFeePercent The fees collected by Joepegs on the sale benefits\n    /// @param _joeFeeCollector The address to which the fees on the sale will be sent\n    function _initializeJoeFee(uint256 _joeFeePercent, address _joeFeeCollector)\n        internal\n    {\n        if (_joeFeePercent > BASIS_POINT_PRECISION) {\n            revert Launchpeg__InvalidPercent();\n        }\n        if (_joeFeeCollector == address(0)) {\n            revert Launchpeg__InvalidJoeFeeCollector();\n        }\n        joeFeePercent = _joeFeePercent;\n        joeFeeCollector = _joeFeeCollector;\n        emit JoeFeeInitialized(_joeFeePercent, _joeFeeCollector);\n    }\n\n    /// @notice Initialize batch reveal. Leave undefined to disable\n    /// batch reveal for the collection.\n    /// @dev Can only be set once. Cannot be initialized once sale has ended.\n    /// @param _batchReveal Batch reveal contract address\n    function initializeBatchReveal(address _batchReveal)\n        external\n        override\n        onlyOwner\n    {\n        if (address(batchReveal) != address(0)) {\n            revert Launchpeg__BatchRevealAlreadyInitialized();\n        }\n        // Disable once sale has ended\n        if (publicSaleEndTime > 0 && block.timestamp >= publicSaleEndTime) {\n            revert Launchpeg__WrongPhase();\n        }\n        batchReveal = IBatchReveal(_batchReveal);\n    }\n\n    /// @notice Set the royalty fee\n    /// @param _receiver Royalty fee collector\n    /// @param _feePercent Royalty fee percent in basis point\n    function setRoyaltyInfo(address _receiver, uint96 _feePercent)\n        external\n        override\n        onlyOwner\n    {\n        // Royalty fees are limited to 25%\n        if (_feePercent > 2_500) {\n            revert Launchpeg__InvalidRoyaltyInfo();\n        }\n        _setDefaultRoyalty(_receiver, _feePercent);\n        emit DefaultRoyaltySet(_receiver, _feePercent);\n    }\n\n    /// @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n    /// address, checks will be bypassed. OnlyOwner\n    /// @param _newRegistry The address of the new OperatorFilterRegistry\n    function updateOperatorFilterRegistryAddress(\n        IOperatorFilterRegistry _newRegistry\n    ) external onlyOwner {\n        _updateOperatorFilterRegistryAddress(_newRegistry);\n    }\n\n    /// @notice Set amount of NFTs mintable per address during the allowlist phase\n    /// @param _addresses List of addresses allowed to mint during the allowlist phase\n    /// @param _numNfts List of NFT quantities mintable per address\n    function seedAllowlist(\n        address[] calldata _addresses,\n        uint256[] calldata _numNfts\n    ) external override onlyOwner {\n        uint256 addressesLength = _addresses.length;\n        if (addressesLength != _numNfts.length) {\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\n        }\n        for (uint256 i; i < addressesLength; i++) {\n            allowlist[_addresses[i]] = _numNfts[i];\n        }\n\n        emit AllowlistSeeded();\n    }\n\n    /// @notice Set the base URI\n    /// @dev This sets the URI for revealed tokens\n    /// Only callable by project owner\n    /// @param _baseURI Base URI to be set\n    function setBaseURI(string calldata _baseURI) external override onlyOwner {\n        baseURI = _baseURI;\n        emit BaseURISet(baseURI);\n    }\n\n    /// @notice Set the unrevealed URI\n    /// @dev Only callable by project owner\n    /// @param _unrevealedURI Unrevealed URI to be set\n    function setUnrevealedURI(string calldata _unrevealedURI)\n        external\n        override\n        onlyOwner\n    {\n        unrevealedURI = _unrevealedURI;\n        emit UnrevealedURISet(unrevealedURI);\n    }\n\n    /// @notice Set the allowlist start time. Can only be set after phases\n    /// have been initialized.\n    /// @dev Only callable by owner\n    /// @param _allowlistStartTime New allowlist start time\n    function setAllowlistStartTime(uint256 _allowlistStartTime)\n        external\n        override\n        onlyOwner\n        isTimeUpdateAllowed(allowlistStartTime)\n        isNotBeforeBlockTimestamp(_allowlistStartTime)\n    {\n        if (\n            _allowlistStartTime < preMintStartTime ||\n            publicSaleStartTime < _allowlistStartTime\n        ) {\n            revert Launchpeg__InvalidPhases();\n        }\n        allowlistStartTime = _allowlistStartTime;\n        emit AllowlistStartTimeSet(_allowlistStartTime);\n    }\n\n    /// @notice Set the public sale start time. Can only be set after phases\n    /// have been initialized.\n    /// @dev Only callable by owner\n    /// @param _publicSaleStartTime New public sale start time\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime)\n        external\n        override\n        onlyOwner\n        isTimeUpdateAllowed(publicSaleStartTime)\n        isNotBeforeBlockTimestamp(_publicSaleStartTime)\n    {\n        if (\n            _publicSaleStartTime < allowlistStartTime ||\n            publicSaleEndTime < _publicSaleStartTime\n        ) {\n            revert Launchpeg__InvalidPhases();\n        }\n\n        publicSaleStartTime = _publicSaleStartTime;\n        emit PublicSaleStartTimeSet(_publicSaleStartTime);\n    }\n\n    /// @notice Set the public sale end time. Can only be set after phases\n    /// have been initialized.\n    /// @dev Only callable by owner\n    /// @param _publicSaleEndTime New public sale end time\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime)\n        external\n        override\n        onlyOwner\n        isTimeUpdateAllowed(publicSaleEndTime)\n        isNotBeforeBlockTimestamp(_publicSaleEndTime)\n    {\n        if (_publicSaleEndTime < publicSaleStartTime) {\n            revert Launchpeg__InvalidPhases();\n        }\n        publicSaleEndTime = _publicSaleEndTime;\n        emit PublicSaleEndTimeSet(_publicSaleEndTime);\n    }\n\n    /// @notice Set the withdraw AVAX start time.\n    /// @param _withdrawAVAXStartTime New public sale end time\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime)\n        external\n        override\n        onlyOwner\n        isNotBeforeBlockTimestamp(_withdrawAVAXStartTime)\n    {\n        withdrawAVAXStartTime = _withdrawAVAXStartTime;\n        emit WithdrawAVAXStartTimeSet(_withdrawAVAXStartTime);\n    }\n\n    /// @notice The remaining no. of pre-minted NFTs for the user address\n    /// @param _user user address\n    function userPendingPreMints(address _user)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 idx = _pendingPreMints.indexes[_user];\n        if (idx == 0) {\n            return 0;\n        }\n        return _pendingPreMints.preMintDataArr[idx - 1].quantity;\n    }\n\n    /// @notice Mint NFTs to the project owner\n    /// @dev Can only mint up to `amountForDevs`\n    /// @param _quantity Quantity of NFTs to mint\n    function devMint(uint256 _quantity)\n        external\n        override\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\n        whenNotPaused\n    {\n        if (_totalSupplyWithPreMint() + _quantity > collectionSize) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n        if (amountMintedByDevs + _quantity > amountForDevs) {\n            revert Launchpeg__MaxSupplyForDevReached();\n        }\n        amountMintedByDevs = amountMintedByDevs + _quantity;\n        _batchMint(msg.sender, _quantity, maxPerAddressDuringMint);\n        emit DevMint(msg.sender, _quantity);\n    }\n\n    /// @notice Mint NFTs during the pre-mint\n    /// @param _quantity Quantity of NFTs to mint\n    function preMint(uint96 _quantity)\n        external\n        payable\n        override\n        whenNotPaused\n        atPhase(Phase.PreMint)\n    {\n        if (_quantity == 0) {\n            revert Launchpeg__InvalidQuantity();\n        }\n        if (_quantity > allowlist[msg.sender]) {\n            revert Launchpeg__NotEligibleForAllowlistMint();\n        }\n        if (amountMintedDuringPreMint + _quantity > amountForAllowlist) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n        allowlist[msg.sender] -= _quantity;\n        amountMintedDuringPreMint += _quantity;\n        _addPreMint(msg.sender, _quantity);\n        uint256 price = _getPreMintPrice();\n        uint256 totalCost = price * _quantity;\n        emit PreMint(msg.sender, _quantity, price);\n        _refundIfOver(totalCost);\n    }\n\n    /// @notice Claim pre-minted NFTs\n    function claimPreMint()\n        external\n        override\n        whenNotPaused\n        isClaimPreMintAvailable\n    {\n        uint256 quantity = userPendingPreMints(msg.sender);\n        if (quantity == 0) {\n            revert Launchpeg__InvalidClaim();\n        }\n        _removePreMint(msg.sender, uint96(quantity));\n        amountClaimedDuringPreMint += quantity;\n        uint256 price = _getPreMintPrice();\n        _batchMint(msg.sender, quantity, maxPerAddressDuringMint);\n        emit Mint(\n            msg.sender,\n            quantity,\n            price,\n            _totalMinted() - quantity,\n            Phase.PreMint\n        );\n    }\n\n    /// @notice Claim pre-minted NFTs for users\n    /// @param _maxQuantity Max quantity of NFTs to mint\n    function batchClaimPreMint(uint96 _maxQuantity)\n        external\n        override\n        whenNotPaused\n        isClaimPreMintAvailable\n    {\n        if (_maxQuantity == 0) {\n            revert Launchpeg__InvalidQuantity();\n        }\n        if (amountMintedDuringPreMint == amountClaimedDuringPreMint) {\n            revert Launchpeg__InvalidClaim();\n        }\n        uint256 maxBatchSize = maxPerAddressDuringMint;\n        uint256 price = _getPreMintPrice();\n        uint96 remQuantity = _maxQuantity;\n        uint96 mintQuantity;\n        for (\n            uint256 len = _pendingPreMints.preMintDataArr.length;\n            len > 0 && remQuantity > 0;\n\n        ) {\n            PreMintData memory preMintData = _pendingPreMints.preMintDataArr[\n                len - 1\n            ];\n            if (preMintData.quantity > remQuantity) {\n                mintQuantity = remQuantity;\n            } else {\n                mintQuantity = preMintData.quantity;\n                --len;\n            }\n            _removePreMint(preMintData.sender, mintQuantity);\n            remQuantity -= mintQuantity;\n            _batchMint(preMintData.sender, mintQuantity, maxBatchSize);\n            emit Mint(\n                preMintData.sender,\n                mintQuantity,\n                price,\n                _totalMinted() - mintQuantity,\n                Phase.PreMint\n            );\n        }\n        amountClaimedDuringPreMint += (_maxQuantity - remQuantity);\n    }\n\n    /// @notice Mint NFTs during the allowlist mint\n    /// @param _quantity Quantity of NFTs to mint\n    function allowlistMint(uint256 _quantity)\n        external\n        payable\n        override\n        whenNotPaused\n        atPhase(Phase.Allowlist)\n    {\n        if (_quantity > allowlist[msg.sender]) {\n            revert Launchpeg__NotEligibleForAllowlistMint();\n        }\n        if (\n            amountMintedDuringPreMint +\n                amountMintedDuringAllowlist +\n                _quantity >\n            amountForAllowlist\n        ) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n        allowlist[msg.sender] -= _quantity;\n        uint256 price = _getAllowlistPrice();\n        uint256 totalCost = price * _quantity;\n\n        _batchMint(msg.sender, _quantity, maxPerAddressDuringMint);\n        amountMintedDuringAllowlist += _quantity;\n        emit Mint(\n            msg.sender,\n            _quantity,\n            price,\n            _totalMinted() - _quantity,\n            Phase.Allowlist\n        );\n        _refundIfOver(totalCost);\n    }\n\n    /// @notice Mint NFTs during the public sale\n    /// @param _quantity Quantity of NFTs to mint\n    function publicSaleMint(uint256 _quantity)\n        external\n        payable\n        override\n        isEOA\n        whenNotPaused\n        atPhase(Phase.PublicSale)\n    {\n        if (\n            numberMintedWithPreMint(msg.sender) + _quantity >\n            maxPerAddressDuringMint\n        ) {\n            revert Launchpeg__CanNotMintThisMany();\n        }\n        // ensure sufficient supply for devs. note we can skip this check\n        // in prior phases as long as they do not exceed the phase allocation\n        // and the total phase allocations do not exceed collection size\n        uint256 remainingDevAmt = amountForDevs - amountMintedByDevs;\n        if (\n            _totalSupplyWithPreMint() + remainingDevAmt + _quantity >\n            collectionSize\n        ) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n        uint256 price = _getPublicSalePrice();\n        uint256 total = price * _quantity;\n\n        _mint(msg.sender, _quantity, \"\", false);\n        amountMintedDuringPublicSale += _quantity;\n        emit Mint(\n            msg.sender,\n            _quantity,\n            price,\n            _totalMinted() - _quantity,\n            Phase.PublicSale\n        );\n        _refundIfOver(total);\n    }\n\n    /// @dev Returns pre-mint price. Used by mint methods.\n    function _getPreMintPrice() internal view virtual returns (uint256);\n\n    /// @dev Returns allowlist price. Used by mint methods.\n    function _getAllowlistPrice() internal view virtual returns (uint256);\n\n    /// @dev Returns public sale price. Used by mint methods.\n    function _getPublicSalePrice() internal view virtual returns (uint256);\n\n    /// @notice Withdraw AVAX to the given recipient\n    /// @param _to Recipient of the earned AVAX\n    function withdrawAVAX(address _to)\n        external\n        override\n        onlyOwnerOrRole(PROJECT_OWNER_ROLE)\n        nonReentrant\n        whenNotPaused\n    {\n        if (\n            withdrawAVAXStartTime > block.timestamp ||\n            withdrawAVAXStartTime == 0\n        ) {\n            revert Launchpeg__WithdrawAVAXNotAvailable();\n        }\n\n        uint256 amount = address(this).balance;\n        uint256 fee;\n        bool sent;\n\n        if (joeFeePercent > 0) {\n            fee = (amount * joeFeePercent) / BASIS_POINT_PRECISION;\n            amount = amount - fee;\n\n            (sent, ) = joeFeeCollector.call{value: fee}(\"\");\n            if (!sent) {\n                revert Launchpeg__TransferFailed();\n            }\n        }\n\n        (sent, ) = _to.call{value: amount}(\"\");\n        if (!sent) {\n            revert Launchpeg__TransferFailed();\n        }\n\n        emit AvaxWithdraw(_to, amount, fee);\n    }\n\n    /// @notice Returns the ownership data of a specific token ID\n    /// @param _tokenId Token ID\n    /// @return TokenOwnership Ownership struct for a specific token ID\n    function getOwnershipData(uint256 _tokenId)\n        external\n        view\n        override\n        returns (TokenOwnership memory)\n    {\n        return _ownershipOf(_tokenId);\n    }\n\n    /// @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// @param _id Token id\n    /// @return URI Token URI\n    function tokenURI(uint256 _id)\n        public\n        view\n        override(ERC721AUpgradeable, IERC721MetadataUpgradeable)\n        returns (string memory)\n    {\n        if (address(batchReveal) == address(0)) {\n            return string(abi.encodePacked(baseURI, _id.toString()));\n        } else if (\n            _id >= batchReveal.launchpegToLastTokenReveal(address(this))\n        ) {\n            return unrevealedURI;\n        } else {\n            return\n                string(\n                    abi.encodePacked(\n                        baseURI,\n                        batchReveal\n                            .getShuffledTokenId(address(this), _id)\n                            .toString()\n                    )\n                );\n        }\n    }\n\n    /// @notice Returns the number of NFTs minted by a specific address\n    /// @param _owner The owner of the NFTs\n    /// @return numberMinted Number of NFTs minted\n    function numberMinted(address _owner)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _numberMinted(_owner);\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by\n    /// `interfaceId`. See the corresponding\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// to learn more about how these IDs are created.\n    /// This function call must use less than 30 000 gas.\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\n    /// @return isInterfaceSupported True if the considered interface is supported\n    function supportsInterface(bytes4 _interfaceId)\n        public\n        view\n        virtual\n        override(\n            ERC721AUpgradeable,\n            ERC2981Upgradeable,\n            IERC165Upgradeable,\n            SafePausableUpgradeable\n        )\n        returns (bool)\n    {\n        return\n            _interfaceId == type(IBaseLaunchpeg).interfaceId ||\n            ERC721AUpgradeable.supportsInterface(_interfaceId) ||\n            ERC2981Upgradeable.supportsInterface(_interfaceId) ||\n            ERC165Upgradeable.supportsInterface(_interfaceId) ||\n            SafePausableUpgradeable.supportsInterface(_interfaceId) ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\n    /// @param _price The price paid by the sender for minting NFTs\n    function _refundIfOver(uint256 _price) internal {\n        if (msg.value < _price) {\n            revert Launchpeg__NotEnoughAVAX(msg.value);\n        }\n        if (msg.value > _price) {\n            (bool success, ) = msg.sender.call{value: msg.value - _price}(\"\");\n            if (!success) {\n                revert Launchpeg__TransferFailed();\n            }\n        }\n    }\n\n    /// @notice Returns the current phase\n    /// @return phase Current phase\n    function currentPhase() public view virtual override returns (Phase);\n\n    /// @notice Reveals the next batch if the reveal conditions are met\n    function revealNextBatch() external override isEOA whenNotPaused {\n        if (address(batchReveal) == address(0)) {\n            revert Launchpeg__BatchRevealDisabled();\n        }\n        if (!batchReveal.revealNextBatch(address(this), totalSupply())) {\n            revert Launchpeg__RevealNextBatchNotAvailable();\n        }\n    }\n\n    /// @notice Tells you if a batch can be revealed\n    /// @return bool Whether reveal can be triggered or not\n    /// @return uint256 The number of the next batch that will be revealed\n    function hasBatchToReveal() external view override returns (bool, uint256) {\n        if (address(batchReveal) == address(0)) {\n            return (false, 0);\n        }\n        return batchReveal.hasBatchToReveal(address(this), totalSupply());\n    }\n\n    /// @dev Total supply including pre-mints\n    function _totalSupplyWithPreMint() internal view returns (uint256) {\n        return\n            totalSupply() +\n            amountMintedDuringPreMint -\n            amountClaimedDuringPreMint;\n    }\n\n    /// @notice Number minted by user including pre-mints\n    function numberMintedWithPreMint(address _owner)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _numberMinted(_owner) + userPendingPreMints(_owner);\n    }\n\n    /// @dev Adds pre-mint data to the pre-mint data set\n    /// @param _sender address to mint NFTs to\n    /// @param _quantity No. of NFTs to add to mint quantity\n    function _addPreMint(address _sender, uint96 _quantity) private {\n        PreMintDataSet storage set = _pendingPreMints;\n        uint256 idx = set.indexes[_sender];\n        // user exists in set\n        if (idx != 0) {\n            set.preMintDataArr[idx - 1].quantity += _quantity;\n        } else {\n            PreMintData memory preMintData = PreMintData({\n                sender: _sender,\n                quantity: _quantity\n            });\n            set.preMintDataArr.push(preMintData);\n            set.indexes[_sender] = set.preMintDataArr.length;\n        }\n    }\n\n    /// @dev Removes pre-mint data from the pre-mint data set\n    /// @param _sender address to mint NFTs to\n    /// @param _quantity No. of NFTs to remove from mint quantity\n    function _removePreMint(address _sender, uint96 _quantity) private {\n        PreMintDataSet storage set = _pendingPreMints;\n        uint256 idx = set.indexes[_sender];\n        // user exists in set\n        if (idx != 0) {\n            uint96 currQuantity = set.preMintDataArr[idx - 1].quantity;\n            uint96 newQuantity = (currQuantity > _quantity)\n                ? currQuantity - _quantity\n                : 0;\n            // remove from set\n            if (newQuantity == 0) {\n                uint256 toDeleteIdx = idx - 1;\n                uint256 lastIdx = set.preMintDataArr.length - 1;\n                if (toDeleteIdx != lastIdx) {\n                    PreMintData memory lastPreMintData = set.preMintDataArr[\n                        lastIdx\n                    ];\n                    set.preMintDataArr[toDeleteIdx] = lastPreMintData;\n                    set.indexes[lastPreMintData.sender] = idx;\n                }\n                set.preMintDataArr.pop();\n                delete set.indexes[_sender];\n            } else {\n                set.preMintDataArr[idx - 1].quantity = newQuantity;\n            }\n        }\n    }\n\n    /// @dev Mint in batches of up to `_maxBatchSize`. Used to control\n    /// gas costs for subsequent transfers in ERC721A contracts.\n    /// @param _sender address to mint NFTs to\n    /// @param _quantity No. of NFTs to mint\n    /// @param _maxBatchSize Max no. of NFTs to mint in a batch\n    function _batchMint(\n        address _sender,\n        uint256 _quantity,\n        uint256 _maxBatchSize\n    ) private {\n        uint256 numChunks = _quantity / _maxBatchSize;\n        for (uint256 i; i < numChunks; ++i) {\n            _mint(_sender, _maxBatchSize, \"\", false);\n        }\n        uint256 remainingQty = _quantity % _maxBatchSize;\n        if (remainingQty != 0) {\n            _mint(_sender, remainingQty, \"\", false);\n        }\n    }\n\n    /// @dev Update the address that the contract will make OperatorFilter checks against. When set to the zero\n    /// address, checks will be bypassed.\n    /// @param _newRegistry The address of the new OperatorFilterRegistry\n    function _updateOperatorFilterRegistryAddress(\n        IOperatorFilterRegistry _newRegistry\n    ) private {\n        operatorFilterRegistry = _newRegistry;\n        emit OperatorFilterRegistryUpdated(_newRegistry);\n    }\n\n    /// @dev Checks if the address (the operator) trying to transfer the NFT is allowed\n    /// @param operator Address of the operator\n    function _checkFilterOperator(address operator) internal view virtual {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry).code.length > 0) {\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n\n    /// @dev `setApprovalForAll` wrapper to prevent the sender to approve a non-allowed operator\n    /// @param operator Address being approved\n    /// @param approved Whether the operator is approved or not\n    function setApprovalForAll(address operator, bool approved)\n        public\n        override(ERC721AUpgradeable, IERC721Upgradeable)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /// @dev `aprove` wrapper to prevent the sender to approve a non-allowed operator\n    /// @param operator Address being approved\n    /// @param tokenId TokenID approved\n    function approve(address operator, uint256 tokenId)\n        public\n        override(ERC721AUpgradeable, IERC721Upgradeable)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }\n\n    /// @dev `transferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\n    /// @param from Address to transfer from\n    /// @param to Address to transfer to\n    /// @param tokenId TokenID to transfer\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n        override(ERC721AUpgradeable, IERC721Upgradeable)\n        onlyAllowedOperator(from)\n    {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    /// @dev `safeTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\n    /// @param from Address to transfer from\n    /// @param to Address to transfer to\n    /// @param tokenId TokenID to transfer\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    )\n        public\n        override(ERC721AUpgradeable, IERC721Upgradeable)\n        onlyAllowedOperator(from)\n    {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    /// @dev `safeTransferFrom` wrapper to prevent a non-allowed operator to transfer the NFT\n    /// @param from Address to transfer from\n    /// @param to Address to transfer to\n    /// @param tokenId TokenID to transfer\n    /// @param data Data to send along with a safe transfer check\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    )\n        public\n        override(ERC721AUpgradeable, IERC721Upgradeable)\n        onlyAllowedOperator(from)\n    {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n}\n"
    },
    "contracts/BatchReveal.sol": {
      "content": "//SPDX-License-Identifier: CC0\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\nimport \"./chainlink/VRFConsumerBaseV2Upgradeable.sol\";\nimport \"./interfaces/IBatchReveal.sol\";\nimport \"./interfaces/IBaseLaunchpeg.sol\";\nimport \"./LaunchpegErrors.sol\";\n\n// Creator: Tubby Cats\n/// https://github.com/tubby-cats/batch-nft-reveal\n\n/// @title BatchReveal\n/// @notice Implements a gas efficient way of revealing NFT URIs gradually\ncontract BatchReveal is\n    IBatchReveal,\n    VRFConsumerBaseV2Upgradeable,\n    OwnableUpgradeable\n{\n    /// @notice Batch reveal configuration by launchpeg\n    mapping(address => BatchRevealConfig) public override launchpegToConfig;\n\n    /// @notice VRF request ids by launchpeg\n    mapping(uint256 => address) public vrfRequestIdToLaunchpeg;\n\n    /// @notice Randomized seeds used to shuffle TokenURIs by launchpeg\n    mapping(address => mapping(uint256 => uint256))\n        public\n        override launchpegToBatchToSeed;\n\n    /// @notice Last token that has been revealed by launchpeg\n    mapping(address => uint256) public override launchpegToLastTokenReveal;\n\n    /// @dev Size of the array that will store already taken URIs numbers by launchpeg\n    mapping(address => uint256) public launchpegToRangeLength;\n\n    /// @notice Contract uses VRF or pseudo-randomness\n    bool public override useVRF;\n\n    /// @notice Chainlink subscription ID\n    uint64 public override subscriptionId;\n\n    /// @notice The gas lane to use, which specifies the maximum gas price to bump to.\n    /// For a list of available gas lanes on each network,\n    /// see https://docs.chain.link/docs/vrf-contracts/#configurations\n    bytes32 public override keyHash;\n\n    /// @notice Depends on the number of requested values that you want sent to the\n    /// fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n    /// so 100,000 is a safe default for this example contract. Test and adjust\n    /// this limit based on the network that you select, the size of the request,\n    /// and the processing of the callback request in the fulfillRandomWords()\n    /// function.\n    uint32 public override callbackGasLimit;\n\n    /// @notice Number of block confirmations that the coordinator will wait before triggering the callback\n    /// The default is 3\n    uint16 public constant override requestConfirmations = 3;\n\n    /// @notice Next batch that will be revealed by VRF (if activated) by launchpeg\n    mapping(address => uint256) public override launchpegToNextBatchToReveal;\n\n    /// @notice True when force revealed has been triggered for the given launchpeg\n    /// @dev VRF will not be used anymore if a batch has been force revealed\n    mapping(address => bool) public override launchpegToHasBeenForceRevealed;\n\n    /// @notice Has the random number for a batch already been asked by launchpeg\n    /// @dev Prevents people from spamming the random words request\n    /// and therefore reveal more batches than expected\n    mapping(address => mapping(uint256 => bool))\n        public\n        override launchpegToVrfRequestedForBatch;\n\n    struct Range {\n        int128 start;\n        int128 end;\n    }\n\n    /// @dev Emitted on revealNextBatch() and forceReveal()\n    /// @param baseLaunchpeg Base launchpeg address\n    /// @param batchNumber The batch revealed\n    /// @param batchSeed The random number drawn\n    event Reveal(address baseLaunchpeg, uint256 batchNumber, uint256 batchSeed);\n\n    /// @dev Emitted on setRevealBatchSize()\n    /// @param baseLaunchpeg Base launchpeg address\n    /// @param revealBatchSize New reveal batch size\n    event RevealBatchSizeSet(address baseLaunchpeg, uint256 revealBatchSize);\n\n    /// @dev Emitted on setRevealStartTime()\n    /// @param baseLaunchpeg Base launchpeg address\n    /// @param revealStartTime New reveal start time\n    event RevealStartTimeSet(address baseLaunchpeg, uint256 revealStartTime);\n\n    /// @dev Emitted on setRevealInterval()\n    /// @param baseLaunchpeg Base launchpeg address\n    /// @param revealInterval New reveal interval\n    event RevealIntervalSet(address baseLaunchpeg, uint256 revealInterval);\n\n    /// @dev emitted on setVRF()\n    /// @param _vrfCoordinator Chainlink coordinator address\n    /// @param _keyHash Keyhash of the gas lane wanted\n    /// @param _subscriptionId Chainlink subscription ID\n    /// @param _callbackGasLimit Max gas used by the coordinator callback\n    event VRFSet(\n        address _vrfCoordinator,\n        bytes32 _keyHash,\n        uint64 _subscriptionId,\n        uint32 _callbackGasLimit\n    );\n\n    /// @dev Verify that batch reveal is configured for the given launchpeg\n    modifier batchRevealInitialized(address _baseLaunchpeg) {\n        if (!isBatchRevealInitialized(_baseLaunchpeg)) {\n            revert Launchpeg__BatchRevealNotInitialized();\n        }\n        _;\n    }\n\n    /// @dev Verify that batch reveal hasn't started for the given launchpeg\n    modifier revealNotStarted(address _baseLaunchpeg) {\n        if (launchpegToLastTokenReveal[_baseLaunchpeg] != 0) {\n            revert Launchpeg__BatchRevealStarted();\n        }\n        _;\n    }\n\n    /// @notice Initialize batch reveal\n    function initialize() external override initializer {\n        __Ownable_init();\n    }\n\n    /// @dev Configure batch reveal for a given launch\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealBatchSize Size of the batch reveal\n    /// @param _revealStartTime Batch reveal start time\n    /// @param _revealInterval Batch reveal interval\n    function configure(\n        address _baseLaunchpeg,\n        uint256 _revealBatchSize,\n        uint256 _revealStartTime,\n        uint256 _revealInterval\n    ) external override onlyOwner revealNotStarted(_baseLaunchpeg) {\n        uint256 _collectionSize = IBaseLaunchpeg(_baseLaunchpeg)\n            .collectionSize();\n        launchpegToConfig[_baseLaunchpeg].collectionSize = _collectionSize;\n        launchpegToConfig[_baseLaunchpeg].intCollectionSize = int128(\n            int256(_collectionSize)\n        );\n        _setRevealBatchSize(_baseLaunchpeg, _revealBatchSize);\n        _setRevealStartTime(_baseLaunchpeg, _revealStartTime);\n        _setRevealInterval(_baseLaunchpeg, _revealInterval);\n    }\n\n    /// @notice Set the reveal batch size. Can only be set after\n    /// batch reveal has been initialized and before a batch has\n    /// been revealed.\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealBatchSize New reveal batch size\n    function setRevealBatchSize(\n        address _baseLaunchpeg,\n        uint256 _revealBatchSize\n    )\n        public\n        override\n        onlyOwner\n        batchRevealInitialized(_baseLaunchpeg)\n        revealNotStarted(_baseLaunchpeg)\n    {\n        _setRevealBatchSize(_baseLaunchpeg, _revealBatchSize);\n    }\n\n    /// @notice Set the reveal batch size\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealBatchSize New reveal batch size\n    function _setRevealBatchSize(\n        address _baseLaunchpeg,\n        uint256 _revealBatchSize\n    ) internal {\n        if (_revealBatchSize == 0) {\n            revert Launchpeg__InvalidBatchRevealSize();\n        }\n        uint256 collectionSize = launchpegToConfig[_baseLaunchpeg]\n            .collectionSize;\n        if (\n            collectionSize % _revealBatchSize != 0 ||\n            _revealBatchSize > collectionSize\n        ) {\n            revert Launchpeg__InvalidBatchRevealSize();\n        }\n        launchpegToRangeLength[_baseLaunchpeg] =\n            (collectionSize / _revealBatchSize) *\n            2;\n        launchpegToConfig[_baseLaunchpeg].revealBatchSize = _revealBatchSize;\n        emit RevealBatchSizeSet(_baseLaunchpeg, _revealBatchSize);\n    }\n\n    /// @notice Set the batch reveal start time. Can only be set after\n    /// batch reveal has been initialized and before a batch has\n    /// been revealed.\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealStartTime New batch reveal start time\n    function setRevealStartTime(\n        address _baseLaunchpeg,\n        uint256 _revealStartTime\n    )\n        public\n        override\n        onlyOwner\n        batchRevealInitialized(_baseLaunchpeg)\n        revealNotStarted(_baseLaunchpeg)\n    {\n        _setRevealStartTime(_baseLaunchpeg, _revealStartTime);\n    }\n\n    /// @notice Set the batch reveal start time.\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealStartTime New batch reveal start time\n    function _setRevealStartTime(\n        address _baseLaunchpeg,\n        uint256 _revealStartTime\n    ) internal {\n        // probably a mistake if the reveal is more than 100 days in the future\n        if (_revealStartTime > block.timestamp + 8_640_000) {\n            revert Launchpeg__InvalidRevealDates();\n        }\n        launchpegToConfig[_baseLaunchpeg].revealStartTime = _revealStartTime;\n        emit RevealStartTimeSet(_baseLaunchpeg, _revealStartTime);\n    }\n\n    /// @notice Set the batch reveal interval. Can only be set after\n    /// batch reveal has been initialized and before a batch has\n    /// been revealed.\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealInterval New batch reveal interval\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\n        public\n        override\n        onlyOwner\n        batchRevealInitialized(_baseLaunchpeg)\n        revealNotStarted(_baseLaunchpeg)\n    {\n        _setRevealInterval(_baseLaunchpeg, _revealInterval);\n    }\n\n    /// @notice Set the batch reveal interval.\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _revealInterval New batch reveal interval\n    function _setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\n        internal\n    {\n        // probably a mistake if reveal interval is longer than 10 days\n        if (_revealInterval > 864_000) {\n            revert Launchpeg__InvalidRevealDates();\n        }\n        launchpegToConfig[_baseLaunchpeg].revealInterval = _revealInterval;\n        emit RevealIntervalSet(_baseLaunchpeg, _revealInterval);\n    }\n\n    /// @notice Set VRF configuration\n    /// @param _vrfCoordinator Chainlink coordinator address\n    /// @param _keyHash Keyhash of the gas lane wanted\n    /// @param _subscriptionId Chainlink subscription ID\n    /// @param _callbackGasLimit Max gas used by the coordinator callback\n    function setVRF(\n        address _vrfCoordinator,\n        bytes32 _keyHash,\n        uint64 _subscriptionId,\n        uint32 _callbackGasLimit\n    ) external override onlyOwner {\n        if (_vrfCoordinator == address(0)) {\n            revert Launchpeg__InvalidCoordinator();\n        }\n\n        (\n            ,\n            uint32 _maxGasLimit,\n            bytes32[] memory s_provingKeyHashes\n        ) = VRFCoordinatorV2Interface(_vrfCoordinator).getRequestConfig();\n\n        // 20_000 is the cost of storing one word, callback cost will never be lower than that\n        if (_callbackGasLimit > _maxGasLimit || _callbackGasLimit < 20_000) {\n            revert Launchpeg__InvalidCallbackGasLimit();\n        }\n\n        bool keyHashFound;\n        for (uint256 i; i < s_provingKeyHashes.length; i++) {\n            if (s_provingKeyHashes[i] == _keyHash) {\n                keyHashFound = true;\n                break;\n            }\n        }\n\n        if (!keyHashFound) {\n            revert Launchpeg__InvalidKeyHash();\n        }\n\n        (, , , address[] memory consumers) = VRFCoordinatorV2Interface(\n            _vrfCoordinator\n        ).getSubscription(_subscriptionId);\n\n        bool isInConsumerList;\n        for (uint256 i; i < consumers.length; i++) {\n            if (consumers[i] == address(this)) {\n                isInConsumerList = true;\n                break;\n            }\n        }\n\n        if (!isInConsumerList) {\n            revert Launchpeg__IsNotInTheConsumerList();\n        }\n\n        useVRF = true;\n        setVRFConsumer(_vrfCoordinator);\n        keyHash = _keyHash;\n        subscriptionId = _subscriptionId;\n        callbackGasLimit = _callbackGasLimit;\n\n        emit VRFSet(\n            _vrfCoordinator,\n            _keyHash,\n            _subscriptionId,\n            _callbackGasLimit\n        );\n    }\n\n    // Forked from openzeppelin\n    /// @dev Returns the smallest of two numbers.\n    /// @param _a First number to consider\n    /// @param _b Second number to consider\n    /// @return min Minimum between the two params\n    function _min(int128 _a, int128 _b) internal pure returns (int128) {\n        return _a < _b ? _a : _b;\n    }\n\n    /// @notice Fills the range array\n    /// @dev Ranges include the start but not the end [start, end)\n    /// @param _ranges initial range array\n    /// @param _start beginning of the array to be added\n    /// @param _end end of the array to be added\n    /// @param _lastIndex last position in the range array to consider\n    /// @param _intCollectionSize collection size\n    /// @return newLastIndex new lastIndex to consider for the future range to be added\n    function _addRange(\n        Range[] memory _ranges,\n        int128 _start,\n        int128 _end,\n        uint256 _lastIndex,\n        int128 _intCollectionSize\n    ) private view returns (uint256) {\n        uint256 positionToAssume = _lastIndex;\n        for (uint256 j; j < _lastIndex; j++) {\n            int128 rangeStart = _ranges[j].start;\n            int128 rangeEnd = _ranges[j].end;\n            if (_start < rangeStart && positionToAssume == _lastIndex) {\n                positionToAssume = j;\n            }\n            if (\n                (_start < rangeStart && _end > rangeStart) ||\n                (rangeStart <= _start && _end <= rangeEnd) ||\n                (_start < rangeEnd && _end > rangeEnd)\n            ) {\n                int128 length = _end - _start;\n                _start = _min(_start, rangeStart);\n                _end = _start + length + (rangeEnd - rangeStart);\n                _ranges[j] = Range(-1, -1); // Delete\n            }\n        }\n        for (uint256 pos = _lastIndex; pos > positionToAssume; pos--) {\n            _ranges[pos] = _ranges[pos - 1];\n        }\n        _ranges[positionToAssume] = Range(\n            _start,\n            _min(_end, _intCollectionSize)\n        );\n        _lastIndex++;\n        if (_end > _intCollectionSize) {\n            _addRange(\n                _ranges,\n                0,\n                _end - _intCollectionSize,\n                _lastIndex,\n                _intCollectionSize\n            );\n            _lastIndex++;\n        }\n        return _lastIndex;\n    }\n\n    /// @dev Adds the last batch into the ranges array\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _lastBatch Batch number to consider\n    /// @param _revealBatchSize Reveal batch size\n    /// @param _intCollectionSize Collection size\n    /// @param _rangeLength Range length\n    /// @return ranges Ranges array filled with every URI taken by batches smaller or equal to lastBatch\n    function _buildJumps(\n        address _baseLaunchpeg,\n        uint256 _lastBatch,\n        uint256 _revealBatchSize,\n        int128 _intCollectionSize,\n        uint256 _rangeLength\n    ) private view returns (Range[] memory) {\n        Range[] memory ranges = new Range[](_rangeLength);\n        uint256 lastIndex;\n        for (uint256 i; i < _lastBatch; i++) {\n            int128 start = int128(\n                int256(\n                    _getFreeTokenId(\n                        _baseLaunchpeg,\n                        launchpegToBatchToSeed[_baseLaunchpeg][i],\n                        ranges,\n                        _intCollectionSize\n                    )\n                )\n            );\n            int128 end = start + int128(int256(_revealBatchSize));\n            lastIndex = _addRange(\n                ranges,\n                start,\n                end,\n                lastIndex,\n                _intCollectionSize\n            );\n        }\n        return ranges;\n    }\n\n    /// @dev Gets the random token URI number from tokenId\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _startId Token Id to consider\n    /// @return uriId Revealed Token URI Id\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        int128 intCollectionSize = launchpegToConfig[_baseLaunchpeg]\n            .intCollectionSize;\n        uint256 revealBatchSize = launchpegToConfig[_baseLaunchpeg]\n            .revealBatchSize;\n        uint256 batch = _startId / revealBatchSize;\n        Range[] memory ranges = new Range[](\n            launchpegToRangeLength[_baseLaunchpeg]\n        );\n\n        ranges = _buildJumps(\n            _baseLaunchpeg,\n            batch,\n            revealBatchSize,\n            intCollectionSize,\n            launchpegToRangeLength[_baseLaunchpeg]\n        );\n\n        uint256 positionsToMove = (_startId % revealBatchSize) +\n            launchpegToBatchToSeed[_baseLaunchpeg][batch];\n\n        return\n            _getFreeTokenId(\n                _baseLaunchpeg,\n                positionsToMove,\n                ranges,\n                intCollectionSize\n            );\n    }\n\n    /// @dev Gets the shifted URI number from tokenId and range array\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _positionsToMoveStart Token URI offset if none of the URI Ids were taken\n    /// @param _ranges Ranges array built by _buildJumps()\n    /// @param _intCollectionSize Collection size\n    /// @return uriId Revealed Token URI Id\n    function _getFreeTokenId(\n        address _baseLaunchpeg,\n        uint256 _positionsToMoveStart,\n        Range[] memory _ranges,\n        int128 _intCollectionSize\n    ) private view returns (uint256) {\n        int128 positionsToMove = int128(int256(_positionsToMoveStart));\n        int128 id;\n\n        for (uint256 round = 0; round < 2; round++) {\n            for (uint256 i; i < launchpegToRangeLength[_baseLaunchpeg]; i++) {\n                int128 start = _ranges[i].start;\n                int128 end = _ranges[i].end;\n                if (id < start) {\n                    int128 finalId = id + positionsToMove;\n                    if (finalId < start) {\n                        return uint256(uint128(finalId));\n                    } else {\n                        positionsToMove -= start - id;\n                        id = end;\n                    }\n                } else if (id < end) {\n                    id = end;\n                }\n            }\n            if ((id + positionsToMove) >= _intCollectionSize) {\n                positionsToMove -= _intCollectionSize - id;\n                id = 0;\n            }\n        }\n        return uint256(uint128(id + positionsToMove));\n    }\n\n    /// @dev Sets batch seed for specified batch number\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _batchNumber Batch number that needs to be revealed\n    /// @param _collectionSize Collection size\n    /// @param _revealBatchSize Reveal batch size\n    function _setBatchSeed(\n        address _baseLaunchpeg,\n        uint256 _batchNumber,\n        uint256 _collectionSize,\n        uint256 _revealBatchSize\n    ) internal {\n        uint256 randomness = uint256(\n            keccak256(\n                abi.encode(\n                    msg.sender,\n                    tx.gasprice,\n                    block.number,\n                    block.timestamp,\n                    block.difficulty,\n                    blockhash(block.number - 1),\n                    address(this)\n                )\n            )\n        );\n\n        // not perfectly random since the folding doesn't match bounds perfectly, but difference is small\n        launchpegToBatchToSeed[_baseLaunchpeg][_batchNumber] =\n            randomness %\n            (_collectionSize - (_batchNumber * _revealBatchSize));\n    }\n\n    /// @dev Returns true if a batch can be revealed\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _totalSupply Number of token already minted\n    /// @return hasToRevealInfo Returns a bool saying whether a reveal can be triggered or not\n    /// and the number of the next batch that will be revealed\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\n        public\n        view\n        override\n        returns (bool, uint256)\n    {\n        uint256 revealBatchSize = launchpegToConfig[_baseLaunchpeg]\n            .revealBatchSize;\n        uint256 revealStartTime = launchpegToConfig[_baseLaunchpeg]\n            .revealStartTime;\n        uint256 revealInterval = launchpegToConfig[_baseLaunchpeg]\n            .revealInterval;\n        uint256 lastTokenRevealed = launchpegToLastTokenReveal[_baseLaunchpeg];\n        uint256 batchNumber;\n        unchecked {\n            batchNumber = lastTokenRevealed / revealBatchSize;\n        }\n\n        // We don't want to reveal other batches if a VRF random words request is pending\n        if (\n            block.timestamp < revealStartTime + batchNumber * revealInterval ||\n            _totalSupply < lastTokenRevealed + revealBatchSize ||\n            launchpegToVrfRequestedForBatch[_baseLaunchpeg][batchNumber]\n        ) {\n            return (false, batchNumber);\n        }\n\n        return (true, batchNumber);\n    }\n\n    /// @dev Reveals next batch if possible\n    /// @dev If using VRF, the reveal happens on the coordinator callback call\n    /// @param _baseLaunchpeg Base launchpeg address\n    /// @param _totalSupply Number of token already minted\n    /// @return isRevealed Returns false if it is not possible to reveal the next batch\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\n        external\n        override\n        returns (bool)\n    {\n        if (_baseLaunchpeg != msg.sender) {\n            revert Launchpeg__Unauthorized();\n        }\n\n        uint256 batchNumber;\n        bool canReveal;\n        (canReveal, batchNumber) = hasBatchToReveal(\n            _baseLaunchpeg,\n            _totalSupply\n        );\n\n        if (!canReveal) {\n            return false;\n        }\n\n        if (useVRF) {\n            uint256 requestId = VRFCoordinatorV2Interface(vrfCoordinator)\n                .requestRandomWords(\n                    keyHash,\n                    subscriptionId,\n                    requestConfirmations,\n                    callbackGasLimit,\n                    1\n                );\n            vrfRequestIdToLaunchpeg[requestId] = _baseLaunchpeg;\n            launchpegToVrfRequestedForBatch[_baseLaunchpeg][batchNumber] = true;\n        } else {\n            launchpegToLastTokenReveal[_baseLaunchpeg] += launchpegToConfig[\n                _baseLaunchpeg\n            ].revealBatchSize;\n            _setBatchSeed(\n                _baseLaunchpeg,\n                batchNumber,\n                launchpegToConfig[_baseLaunchpeg].collectionSize,\n                launchpegToConfig[_baseLaunchpeg].revealBatchSize\n            );\n            emit Reveal(\n                _baseLaunchpeg,\n                batchNumber,\n                launchpegToBatchToSeed[_baseLaunchpeg][batchNumber]\n            );\n        }\n\n        return true;\n    }\n\n    /// @dev Callback triggered by the VRF coordinator\n    /// @param _randomWords Array of random numbers provided by the VRF coordinator\n    function fulfillRandomWords(\n        uint256 _requestId,\n        uint256[] memory _randomWords\n    ) internal override {\n        address baseLaunchpeg = vrfRequestIdToLaunchpeg[_requestId];\n\n        if (launchpegToHasBeenForceRevealed[baseLaunchpeg]) {\n            revert Launchpeg__HasBeenForceRevealed();\n        }\n\n        uint256 revealBatchSize = launchpegToConfig[baseLaunchpeg]\n            .revealBatchSize;\n        uint256 collectionSize = launchpegToConfig[baseLaunchpeg]\n            .collectionSize;\n        uint256 _batchToReveal = launchpegToNextBatchToReveal[baseLaunchpeg]++;\n        uint256 _revealBatchSize = revealBatchSize;\n        uint256 _seed = _randomWords[0] %\n            (collectionSize - (_batchToReveal * _revealBatchSize));\n\n        launchpegToBatchToSeed[baseLaunchpeg][_batchToReveal] = _seed;\n        launchpegToLastTokenReveal[baseLaunchpeg] += _revealBatchSize;\n\n        emit Reveal(\n            baseLaunchpeg,\n            _batchToReveal,\n            launchpegToBatchToSeed[baseLaunchpeg][_batchToReveal]\n        );\n    }\n\n    /// @dev Force reveal, should be restricted to owner\n    function forceReveal(address _baseLaunchpeg) external override onlyOwner {\n        uint256 revealBatchSize = launchpegToConfig[_baseLaunchpeg]\n            .revealBatchSize;\n        uint256 batchNumber;\n        unchecked {\n            batchNumber =\n                launchpegToLastTokenReveal[_baseLaunchpeg] /\n                revealBatchSize;\n            launchpegToLastTokenReveal[_baseLaunchpeg] += revealBatchSize;\n        }\n\n        _setBatchSeed(\n            _baseLaunchpeg,\n            batchNumber,\n            launchpegToConfig[_baseLaunchpeg].collectionSize,\n            launchpegToConfig[_baseLaunchpeg].revealBatchSize\n        );\n        launchpegToHasBeenForceRevealed[_baseLaunchpeg] = true;\n        emit Reveal(\n            _baseLaunchpeg,\n            batchNumber,\n            launchpegToBatchToSeed[_baseLaunchpeg][batchNumber]\n        );\n    }\n\n    /// @notice Returns true if batch reveal is configured for the given launchpeg\n    /// Since the collection size is set only when batch reveal is initialized,\n    /// and the collection size cannot be 0, we assume a 0 value means\n    /// the batch reveal configuration has not been initialized.\n    function isBatchRevealInitialized(address _baseLaunchpeg)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return launchpegToConfig[_baseLaunchpeg].collectionSize != 0;\n    }\n}\n"
    },
    "contracts/chainlink/VRFConsumerBaseV2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// ------------------------------------------------------------------------------\n/// @notice Interface for contracts using VRF randomness\n///   Forked from chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\n/// ------------------------------------------------------------------------------\n\n/// @dev PURPOSE\n///\n/// @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n/// @dev to Vera the verifier in such a way that Vera can be sure he's not\n/// @dev making his output up to suit himself. Reggie provides Vera a public key\n/// @dev to which he knows the secret key. Each time Vera provides a seed to\n/// @dev Reggie, he gives back a value which is computed completely\n/// @dev deterministically from the seed and the secret key.\n///\n/// @dev Reggie provides a proof by which Vera can verify that the output was\n/// @dev correctly computed once Reggie tells it to her, but without that proof,\n/// @dev the output is indistinguishable to her from a uniform random sample\n/// @dev from the output space.\n///\n/// @dev The purpose of this contract is to make it easy for unrelated contracts\n/// @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n/// @dev simple access to a verifiable source of randomness. It ensures 2 things:\n/// @dev 1. The fulfillment came from the VRFCoordinator\n/// @dev 2. The consumer contract implements fulfillRandomWords.\n/// @dev USAGE\n///\n/// @dev Calling contracts must inherit from VRFConsumerBase, and can\n/// @dev initialize VRFConsumerBase's attributes in their constructor as\n/// @dev shown:\n///\n/// @dev   contract VRFConsumer {\n/// @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n/// @dev       VRFConsumerBase(_vrfCoordinator) public {\n/// @dev         <initialization with other arguments goes here>\n/// @dev       }\n/// @dev   }\n///\n/// @dev The oracle will have given you an ID for the VRF keypair they have\n/// @dev committed to (let's call it keyHash). Create subscription, fund it\n/// @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n/// @dev subscription management functions).\n/// @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n/// @dev callbackGasLimit, numWords),\n/// @dev see (VRFCoordinatorInterface for a description of the arguments).\n///\n/// @dev Once the VRFCoordinator has received and validated the oracle's response\n/// @dev to your request, it will call your contract's fulfillRandomWords method.\n///\n/// @dev The randomness argument to fulfillRandomWords is a set of random words\n/// @dev generated from your requestId and the blockHash of the request.\n///\n/// @dev If your contract could have concurrent requests open, you can use the\n/// @dev requestId returned from requestRandomWords to track which response is associated\n/// @dev with which randomness request.\n/// @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n/// @dev if your contract could have multiple requests in flight simultaneously.\n///\n/// @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n/// @dev differ.\n///\n/// ------------------------------------------------------------------------------\n/// @dev SECURITY CONSIDERATIONS\n///\n/// @dev A method with the ability to call your fulfillRandomness method directly\n/// @dev could spoof a VRF response with any random value, so it's critical that\n/// @dev it cannot be directly called by anything other than this base contract\n/// @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n///\n/// @dev For your users to trust that your contract's random behavior is free\n/// @dev from malicious interference, it's best if you can write it so that all\n/// @dev behaviors implied by a VRF response are executed ///during/// your\n/// @dev fulfillRandomness method. If your contract must store the response (or\n/// @dev anything derived from it) and use it later, you must ensure that any\n/// @dev user-significant behavior which depends on that stored value cannot be\n/// @dev manipulated by a subsequent VRF request.\n///\n/// @dev Similarly, both miners and the VRF oracle itself have some influence\n/// @dev over the order in which VRF responses appear on the blockchain, so if\n/// @dev your contract could have multiple VRF requests in flight simultaneously,\n/// @dev you must ensure that the order in which the VRF responses arrive cannot\n/// @dev be used to manipulate your contract's user-significant behavior.\n///\n/// @dev Since the block hash of the block which contains the requestRandomness\n/// @dev call is mixed into the input to the VRF ///last///, a sufficiently powerful\n/// @dev miner could, in principle, fork the blockchain to evict the block\n/// @dev containing the request, forcing the request to be included in a\n/// @dev different block with a different hash, and therefore a different input\n/// @dev to the VRF. However, such an attack would incur a substantial economic\n/// @dev cost. This cost scales with the number of blocks the VRF oracle waits\n/// @dev until it calls responds to a request. It is for this reason that\n/// @dev that you can signal to an oracle you'd like them to wait longer before\n/// @dev responding to the request (however this is not enforced in the contract\n/// @dev and so remains effective only in the case of unmodified oracle software).\n///\n\nabstract contract VRFConsumerBaseV2Upgradeable {\n    error OnlyCoordinatorCanFulfill(address have, address want);\n    address internal vrfCoordinator;\n\n    /// @notice Initializes the vrf coordinator address\n    /// @param _vrfCoordinator address of VRFCoordinator contract\n    function setVRFConsumer(address _vrfCoordinator) internal {\n        vrfCoordinator = _vrfCoordinator;\n    }\n\n    /// @notice fulfillRandomness handles the VRF response. Your contract must\n    /// @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n    /// @notice principles to keep in mind when implementing your fulfillRandomness\n    /// @notice method.\n    ///\n    /// @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n    /// @dev signature, and will call it once it has verified the proof\n    /// @dev associated with the randomness. (It is triggered via a call to\n    /// @dev rawFulfillRandomness, below.)\n    ///\n    /// @param requestId The Id initially returned by requestRandomness\n    /// @param randomWords the VRF output expanded to the requested number of words\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\n        internal\n        virtual;\n\n    /// @notice rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    /// proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    /// the origin of the call\n    function rawFulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) external {\n        if (msg.sender != vrfCoordinator) {\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n        }\n        fulfillRandomWords(requestId, randomWords);\n    }\n}\n"
    },
    "contracts/ERC1155LaunchpegBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {AccessControlEnumerableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport {ERC1155Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport {ERC2981Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport {IOperatorFilterRegistry} from \"operator-filter-registry/src/IOperatorFilterRegistry.sol\";\n\nimport \"./LaunchpegErrors.sol\";\nimport {SafePausableUpgradeable} from \"./utils/SafePausableUpgradeable.sol\";\n\nimport {IERC1155LaunchpegBase} from \"./interfaces/IERC1155LaunchpegBase.sol\";\n\nabstract contract ERC1155LaunchpegBase is\n    IERC1155LaunchpegBase,\n    ERC1155Upgradeable,\n    ERC2981Upgradeable,\n    ReentrancyGuardUpgradeable,\n    SafePausableUpgradeable\n{\n    using StringsUpgradeable for uint256;\n\n    /// @notice Percentage base point\n    uint256 private constant BASIS_POINT_PRECISION = 10_000;\n\n    /// @notice Role granted to project owners\n    bytes32 public constant PROJECT_OWNER_ROLE =\n        keccak256(\"PROJECT_OWNER_ROLE\");\n\n    /// @notice Contract filtering allowed operators, preventing unauthorized contract to transfer NFTs\n    /// By default, Launchpeg contracts are subscribed to OpenSea's Curated Subscription Address at 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\n\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    /// @notice The fees collected by Joepegs on the sale benefits\n    /// @dev In basis points e.g 100 for 1%\n    uint256 public joeFeePercent;\n\n    /// @notice The address to which the fees on the sale will be sent\n    address public joeFeeCollector;\n\n    /// @notice Start time when funds can be withdrawn\n    uint256 public withdrawAVAXStartTime;\n\n    /// @notice This boolean can be turned on to prevent any changes on the sale parameters.\n    /// @dev Once set to true, it shouldn't be possible to turn it back to false.\n    bool public locked;\n\n    string public name;\n\n    string public symbol;\n\n    struct InitData {\n        address owner;\n        address royaltyReceiver;\n        uint256 joeFeePercent;\n        string collectionName;\n        string collectionSymbol;\n    }\n\n    enum Phase {\n        NotStarted,\n        DutchAuction,\n        PreMint,\n        Allowlist,\n        PublicSale,\n        Ended\n    }\n\n    /// @dev Emitted on updateOperatorFilterRegistryAddress()\n    /// @param operatorFilterRegistry New operator filter registry\n    event OperatorFilterRegistryUpdated(address operatorFilterRegistry);\n\n    /// @dev Emitted on _setDefaultRoyalty()\n    /// @param receiver Royalty fee collector\n    /// @param feePercent Royalty fee percent in basis point\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\n\n    /// @dev Emitted on setWithdrawAVAXStartTime()\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\n\n    /// @dev Emitted on initializeJoeFee()\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\n    /// @param feeCollector The address to which the fees on the sale will be sent\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\n\n    /// @dev Emitted on withdrawAVAX()\n    /// @param sender The address that withdrew the tokens\n    /// @param amount Amount of AVAX transfered to `sender`\n    /// @param fee Amount of AVAX paid to the fee collector\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\n\n    /// @dev Emitted on setURI()\n    /// @param uri The new base URI\n    event URISet(string uri);\n\n    event SaleParametersLocked();\n\n    /// @notice Allow spending tokens from addresses with balance\n    /// Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n    /// from an EOA.\n    modifier onlyAllowedOperator(address from) virtual {\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /// @notice Allow approving tokens transfers\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    modifier contractNotLocked() {\n        if (locked) {\n            revert Launchpeg__SaleParametersLocked();\n        }\n        _;\n    }\n\n    /// @notice Checks if the current phase matches the required phase\n    modifier atPhase(Phase phase) {\n        if (currentPhase() != phase) {\n            revert Launchpeg__WrongPhase();\n        }\n        _;\n    }\n\n    function __ERC1155LaunchpegBase_init(\n        InitData calldata initData\n    ) internal onlyInitializing {\n        __ERC1155_init(\"\");\n        __ERC2981_init();\n        __ReentrancyGuard_init();\n        __SafeAccessControlEnumerable_init();\n\n        // Default royalty is 5%\n        _setDefaultRoyalty(initData.royaltyReceiver, 500);\n\n        // Initialize the operator filter registry and subscribe to OpenSea's list\n        IOperatorFilterRegistry _operatorFilterRegistry = IOperatorFilterRegistry(\n                0x000000000000AAeB6D7670E522A718067333cd4E\n            );\n\n        if (address(_operatorFilterRegistry).code.length > 0) {\n            _operatorFilterRegistry.registerAndSubscribe(\n                address(this),\n                0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\n            );\n        }\n\n        _updateOperatorFilterRegistryAddress(_operatorFilterRegistry);\n\n        name = initData.collectionName;\n        symbol = initData.collectionSymbol;\n\n        _initializeJoeFee(initData.joeFeePercent, initData.owner);\n\n        grantRole(PROJECT_OWNER_ROLE, initData.royaltyReceiver);\n        _transferOwnership(initData.owner);\n    }\n\n    /// @notice Returns the current phase\n    /// @return phase Current phase\n    function currentPhase() public view virtual returns (Phase);\n\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(\n            SafePausableUpgradeable,\n            ERC1155Upgradeable,\n            ERC2981Upgradeable\n        )\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC1155LaunchpegBase).interfaceId ||\n            ERC1155Upgradeable.supportsInterface(interfaceId) ||\n            ERC2981Upgradeable.supportsInterface(interfaceId) ||\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\n    }\n\n    /// @notice Set the base URI\n    /// @dev This sets the URI for revealed tokens\n    /// Only callable by project owner\n    /// @param newURI Base URI to be set\n    function setURI(string calldata newURI) external onlyOwner {\n        _setURI(newURI);\n        emit URISet(newURI);\n    }\n\n    /// @notice Set the withdraw AVAX start time.\n    /// @param newWithdrawAVAXStartTime New public sale end time\n    function setWithdrawAVAXStartTime(\n        uint256 newWithdrawAVAXStartTime\n    ) external onlyOwner {\n        withdrawAVAXStartTime = newWithdrawAVAXStartTime;\n        emit WithdrawAVAXStartTimeSet(newWithdrawAVAXStartTime);\n    }\n\n    function setRoyaltyInfo(\n        address receiver,\n        uint96 feePercent\n    ) external onlyOwner {\n        // Royalty fees are limited to 25%\n        if (feePercent > 2_500) {\n            revert Launchpeg__InvalidRoyaltyInfo();\n        }\n        _setDefaultRoyalty(receiver, feePercent);\n        emit DefaultRoyaltySet(receiver, feePercent);\n    }\n\n    /// @notice Set the operator filter registry address\n    /// @param newOperatorFilterRegistry New operator filter registry\n    function setOperatorFilterRegistryAddress(\n        address newOperatorFilterRegistry\n    ) external onlyOwner {\n        _updateOperatorFilterRegistryAddress(\n            IOperatorFilterRegistry(newOperatorFilterRegistry)\n        );\n    }\n\n    function lockSaleParameters() external onlyOwner {\n        locked = true;\n\n        emit SaleParametersLocked();\n    }\n\n    /// @notice Withdraw AVAX to the given recipient\n    /// @param to Recipient of the earned AVAX\n    function withdrawAVAX(\n        address to\n    ) external onlyOwnerOrRole(PROJECT_OWNER_ROLE) nonReentrant {\n        if (\n            block.timestamp < withdrawAVAXStartTime ||\n            withdrawAVAXStartTime == 0\n        ) {\n            revert Launchpeg__WithdrawAVAXNotAvailable();\n        }\n\n        uint256 amount = address(this).balance;\n        uint256 fee;\n        bool sent;\n\n        if (joeFeePercent > 0) {\n            fee = (amount * joeFeePercent) / BASIS_POINT_PRECISION;\n            amount = amount - fee;\n\n            (sent, ) = joeFeeCollector.call{value: fee}(\"\");\n            if (!sent) {\n                revert Launchpeg__TransferFailed();\n            }\n        }\n\n        (sent, ) = to.call{value: amount}(\"\");\n        if (!sent) {\n            revert Launchpeg__TransferFailed();\n        }\n\n        emit AvaxWithdraw(to, amount, fee);\n    }\n\n    function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public virtual override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, id, amount, data);\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override onlyAllowedOperator(from) {\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\n    /// @param newJoeFeePercent The fees collected by Joepegs on the sale benefits\n    /// @param newJoeFeeCollector The address to which the fees on the sale will be sent\n    function _initializeJoeFee(\n        uint256 newJoeFeePercent,\n        address newJoeFeeCollector\n    ) internal {\n        if (newJoeFeePercent > BASIS_POINT_PRECISION) {\n            revert Launchpeg__InvalidPercent();\n        }\n        if (newJoeFeeCollector == address(0)) {\n            revert Launchpeg__InvalidJoeFeeCollector();\n        }\n        joeFeePercent = newJoeFeePercent;\n        joeFeeCollector = newJoeFeeCollector;\n        emit JoeFeeInitialized(newJoeFeePercent, newJoeFeeCollector);\n    }\n\n    /**\n     * @dev Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     * address, checks will be bypassed.\n     * @param newRegistry The address of the new OperatorFilterRegistry\n     */\n    function _updateOperatorFilterRegistryAddress(\n        IOperatorFilterRegistry newRegistry\n    ) private {\n        operatorFilterRegistry = newRegistry;\n        emit OperatorFilterRegistryUpdated(address(newRegistry));\n    }\n\n    /// @dev Checks if the address (the operator) trying to transfer the NFT is allowed\n    /// @param operator Address of the operator\n    function _checkFilterOperator(address operator) internal view virtual {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry).code.length > 0) {\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\n    /// @param price The price paid by the sender for minting NFTs\n    function _refundIfOver(uint256 price) internal {\n        if (msg.value < price) {\n            revert Launchpeg__NotEnoughAVAX(msg.value);\n        }\n        if (msg.value > price) {\n            (bool success, ) = msg.sender.call{value: msg.value - price}(\"\");\n            if (!success) {\n                revert Launchpeg__TransferFailed();\n            }\n        }\n    }\n}\n"
    },
    "contracts/ERC1155SingleBundle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./LaunchpegErrors.sol\";\nimport {ERC1155LaunchpegBase} from \"./ERC1155LaunchpegBase.sol\";\nimport {IERC1155LaunchpegSingleBundle} from \"./interfaces/IERC1155LaunchpegSingleBundle.sol\";\n\ncontract ERC1155SingleBundle is\n    IERC1155LaunchpegSingleBundle,\n    ERC1155LaunchpegBase\n{\n    struct PreMintData {\n        address sender;\n        uint96 quantity;\n    }\n\n    struct PreMintDataSet {\n        PreMintData[] preMintDataArr;\n        mapping(address => uint256) indexes;\n    }\n\n    uint256 public collectionSize;\n    uint256 public maxPerAddressDuringMint;\n\n    uint256 public preMintPrice;\n    uint256 public publicSalePrice;\n\n    uint256 public preMintStartTime;\n    uint256 public publicSaleStartTime;\n    uint256 public publicSaleEndTime;\n\n    uint256 public amountForDevs;\n    uint256 public amountForPreMint;\n\n    uint256 public amountMintedByDevs;\n    uint256 public amountMintedDuringPreMint;\n    uint256 public amountClaimedDuringPreMint;\n    uint256 public amountMintedDuringPublicSale;\n\n    mapping(address => uint256) public allowlist;\n    mapping(address => uint256) public numberMinted;\n\n    uint256[] private _tokenSet;\n    PreMintDataSet private _pendingPreMints;\n\n    event AllowlistSeeded();\n    event PreMintStartTimeSet(uint256 preMintStartTime);\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\n    event AmountForDevsSet(uint256 amountForDevs);\n    event AmountForPreMintSet(uint256 amountForPreMint);\n    event PreMintPriceSet(uint256 preMintPrice);\n    event PublicSalePriceSet(uint256 publicSalePrice);\n    event MaxPerAddressDuringMintSet(uint256 maxPerAddressDuringMint);\n    event CollectionSizeSet(uint256 collectionSize);\n    event PhaseInitialized(\n        uint256 preMintStartTime,\n        uint256 publicSaleStartTime,\n        uint256 publicSaleEndTime,\n        uint256 preMintPrice,\n        uint256 salePrice,\n        uint256 withdrawAVAXStartTime\n    );\n    event DevMint(address indexed sender, uint256 quantity);\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\n    event TokenSetUpdated(uint256[] tokenSet);\n\n    modifier isEOA() {\n        if (tx.origin != msg.sender) {\n            revert Launchpeg__Unauthorized();\n        }\n        _;\n    }\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        InitData calldata initData,\n        uint256 initialMaxSupply,\n        uint256 initialAmountForDevs,\n        uint256 initialAmountForPreMint,\n        uint256 initialMaxPerAddressDuringMint,\n        uint256[] calldata initialTokenSet\n    ) external initializer {\n        __ERC1155LaunchpegBase_init(initData);\n\n        if (amountForDevs + amountForPreMint > collectionSize) {\n            revert Launchpeg__LargerCollectionSizeNeeded();\n        }\n\n        collectionSize = initialMaxSupply;\n        maxPerAddressDuringMint = initialMaxPerAddressDuringMint;\n\n        amountForDevs = initialAmountForDevs;\n        amountForPreMint = initialAmountForPreMint;\n        _tokenSet = initialTokenSet;\n    }\n\n    function initializePhases(\n        uint256 initialPreMintStartTime,\n        uint256 initialPublicSaleStartTime,\n        uint256 initialPublicSaleEndTime,\n        uint256 initialPreMintPrice,\n        uint256 initialPublicSalePrice\n    ) external onlyOwner atPhase(Phase.NotStarted) {\n        if (\n            initialPreMintStartTime < block.timestamp ||\n            initialPublicSaleStartTime < initialPreMintStartTime ||\n            initialPublicSaleEndTime < initialPublicSaleStartTime\n        ) {\n            revert Launchpeg__InvalidPhases();\n        }\n\n        if (initialPreMintPrice > initialPublicSalePrice) {\n            revert Launchpeg__InvalidAllowlistPrice();\n        }\n\n        preMintPrice = initialPreMintPrice;\n        publicSalePrice = initialPublicSalePrice;\n        preMintStartTime = initialPreMintStartTime;\n\n        publicSaleStartTime = initialPublicSaleStartTime;\n        publicSaleEndTime = initialPublicSaleEndTime;\n\n        withdrawAVAXStartTime = initialPublicSaleStartTime + 3 days;\n\n        emit PhaseInitialized(\n            preMintStartTime,\n            publicSaleStartTime,\n            publicSaleEndTime,\n            initialPreMintPrice,\n            initialPublicSalePrice,\n            initialPublicSaleStartTime + 3 days\n        );\n    }\n\n    function tokenSet() external view returns (uint256[] memory) {\n        return _tokenSet;\n    }\n\n    function currentPhase() public view override returns (Phase) {\n        if (\n            preMintStartTime == 0 ||\n            publicSaleStartTime == 0 ||\n            publicSaleEndTime == 0 ||\n            block.timestamp < preMintStartTime\n        ) {\n            return Phase.NotStarted;\n        } else if (\n            amountMintedDuringPreMint + amountMintedDuringPublicSale ==\n            collectionSize\n        ) {\n            return Phase.Ended;\n        } else if (\n            block.timestamp >= preMintStartTime &&\n            block.timestamp < publicSaleStartTime\n        ) {\n            return Phase.PreMint;\n        } else if (\n            block.timestamp >= publicSaleStartTime &&\n            block.timestamp < publicSaleEndTime\n        ) {\n            return Phase.PublicSale;\n        }\n        return Phase.Ended;\n    }\n\n    function amountOfUsersWaitingForPremintClaim()\n        external\n        view\n        returns (uint256)\n    {\n        return _pendingPreMints.preMintDataArr.length;\n    }\n\n    function userPendingPreMints(address user) public view returns (uint256) {\n        uint256 userIndex = _pendingPreMints.indexes[user];\n\n        if (userIndex == 0) {\n            return 0;\n        }\n\n        return _pendingPreMints.preMintDataArr[userIndex - 1].quantity;\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override returns (bool) {\n        return\n            interfaceId == type(IERC1155LaunchpegSingleBundle).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function devMint(\n        uint256 amount\n    ) external whenNotPaused onlyOwnerOrRole(PROJECT_OWNER_ROLE) nonReentrant {\n        uint256 amountAlreadyMinted = amountMintedByDevs;\n\n        if (amountAlreadyMinted + amount > amountForDevs)\n            revert Launchpeg__MaxSupplyForDevReached();\n\n        amountMintedByDevs = amountAlreadyMinted + amount;\n\n        _mint(msg.sender, amount);\n\n        emit DevMint(msg.sender, amount);\n    }\n\n    function preMint(\n        uint96 amount\n    ) external payable whenNotPaused atPhase(Phase.PreMint) nonReentrant {\n        if (amount == 0) {\n            revert Launchpeg__InvalidQuantity();\n        }\n\n        uint256 userAllowlistAmount = allowlist[msg.sender];\n        if (amount > userAllowlistAmount) {\n            revert Launchpeg__NotEligibleForAllowlistMint();\n        }\n\n        uint256 amountAlreadyPreMinted = amountMintedDuringPreMint;\n        if (amountAlreadyPreMinted + amount > amountForPreMint) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n\n        PreMintDataSet storage pmDataSet = _pendingPreMints;\n        uint256 userIndex = pmDataSet.indexes[msg.sender];\n\n        if (userIndex != 0) {\n            pmDataSet.preMintDataArr[userIndex - 1].quantity += amount;\n        } else {\n            PreMintData memory preMintData = PreMintData({\n                sender: msg.sender,\n                quantity: amount\n            });\n            pmDataSet.preMintDataArr.push(preMintData);\n            pmDataSet.indexes[msg.sender] = pmDataSet.preMintDataArr.length;\n        }\n\n        amountMintedDuringPreMint = amountAlreadyPreMinted + amount;\n        allowlist[msg.sender] = userAllowlistAmount - amount;\n\n        uint256 totalPrice = preMintPrice * amount;\n        _refundIfOver(totalPrice);\n\n        emit PreMint(msg.sender, amount, totalPrice);\n    }\n\n    function claimPremint() external whenNotPaused nonReentrant {\n        if (block.timestamp < publicSaleStartTime) {\n            revert Launchpeg__WrongPhase();\n        }\n\n        PreMintDataSet storage pmDataSet = _pendingPreMints;\n\n        uint96 preMintQuantity;\n        uint256 userIndex = pmDataSet.indexes[msg.sender];\n\n        if (userIndex != 0)\n            preMintQuantity = pmDataSet.preMintDataArr[userIndex - 1].quantity;\n\n        if (preMintQuantity != 0) {\n            uint256 lastIndex = pmDataSet.preMintDataArr.length - 1;\n            if (lastIndex != userIndex - 1) {\n                PreMintData memory lastPreMintData = pmDataSet.preMintDataArr[\n                    lastIndex\n                ];\n                pmDataSet.preMintDataArr[userIndex - 1] = lastPreMintData;\n                pmDataSet.indexes[lastPreMintData.sender] = userIndex;\n            }\n            pmDataSet.preMintDataArr.pop();\n            delete pmDataSet.indexes[msg.sender];\n        } else {\n            revert Launchpeg__InvalidClaim();\n        }\n\n        amountClaimedDuringPreMint += preMintQuantity;\n\n        _mint(msg.sender, preMintQuantity);\n    }\n\n    function batchClaimPreMint(\n        uint256 numberOfClaims\n    ) external whenNotPaused nonReentrant {\n        if (block.timestamp < publicSaleStartTime) {\n            revert Launchpeg__WrongPhase();\n        }\n\n        uint256 initialRemainingPreMints = _pendingPreMints\n            .preMintDataArr\n            .length;\n\n        uint256 remainingPreMints = initialRemainingPreMints;\n        uint256 tokenPreMinted = 0;\n\n        while (remainingPreMints > 0 && numberOfClaims > 0) {\n            PreMintData memory preMintData = _pendingPreMints.preMintDataArr[\n                remainingPreMints - 1\n            ];\n\n            delete _pendingPreMints.indexes[preMintData.sender];\n\n            tokenPreMinted += preMintData.quantity;\n            remainingPreMints--;\n            numberOfClaims--;\n\n            _mint(preMintData.sender, preMintData.quantity);\n        }\n\n        amountClaimedDuringPreMint += tokenPreMinted;\n\n        // Removing the pre-minted tokens from the array all at once\n        PreMintData[] storage preMintDataArr = _pendingPreMints.preMintDataArr;\n        assembly {\n            sstore(preMintDataArr.slot, remainingPreMints)\n        }\n    }\n\n    function publicSaleMint(\n        uint256 amount\n    )\n        external\n        payable\n        whenNotPaused\n        atPhase(Phase.PublicSale)\n        nonReentrant\n        isEOA\n    {\n        if (\n            numberMinted[msg.sender] +\n                userPendingPreMints(msg.sender) +\n                amount >\n            maxPerAddressDuringMint\n        ) {\n            revert Launchpeg__CanNotMintThisMany();\n        }\n\n        if (amount > _availableSupply()) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n\n        amountMintedDuringPublicSale += amount;\n\n        _mint(msg.sender, amount);\n        _refundIfOver(publicSalePrice * amount);\n    }\n\n    function updateTokenSet(uint256[] calldata newTokenSet) external onlyOwner {\n        _tokenSet = newTokenSet;\n        emit TokenSetUpdated(newTokenSet);\n    }\n\n    function seedAllowlist(\n        address[] calldata addresses,\n        uint256[] calldata amounts\n    ) external onlyOwner {\n        uint256 addressesLength = addresses.length;\n        if (addressesLength != amounts.length) {\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\n        }\n        for (uint256 i; i < addressesLength; i++) {\n            allowlist[addresses[i]] = amounts[i];\n        }\n\n        emit AllowlistSeeded();\n    }\n\n    function setPreMintStartTime(\n        uint256 newPreMintStartTime\n    ) external onlyOwner contractNotLocked {\n        if (newPreMintStartTime > publicSaleStartTime)\n            revert Launchpeg__InvalidPhases();\n\n        preMintStartTime = newPreMintStartTime;\n        emit PreMintStartTimeSet(newPreMintStartTime);\n    }\n\n    function setPublicSaleStartTime(\n        uint256 newPublicSaleStartTime\n    ) external onlyOwner contractNotLocked {\n        if (newPublicSaleStartTime > publicSaleEndTime)\n            revert Launchpeg__InvalidPhases();\n\n        publicSaleStartTime = newPublicSaleStartTime;\n        emit PublicSaleStartTimeSet(newPublicSaleStartTime);\n    }\n\n    function setPublicSaleEndTime(\n        uint256 newPublicSaleEndTime\n    ) external onlyOwner contractNotLocked {\n        if (newPublicSaleEndTime < publicSaleStartTime)\n            revert Launchpeg__InvalidPhases();\n\n        publicSaleEndTime = newPublicSaleEndTime;\n        emit PublicSaleEndTimeSet(newPublicSaleEndTime);\n    }\n\n    function setAmountForDevs(\n        uint256 newAmountForDevs\n    ) external onlyOwner contractNotLocked {\n        if (amountMintedByDevs > newAmountForDevs) {\n            revert Launchpeg__MaxSupplyForDevReached();\n        }\n\n        amountForDevs = newAmountForDevs;\n        emit AmountForDevsSet(newAmountForDevs);\n    }\n\n    function setAmountForPreMint(\n        uint256 newAmountForPreMint\n    ) external onlyOwner contractNotLocked {\n        if (amountMintedDuringPreMint > newAmountForPreMint) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n\n        amountForPreMint = newAmountForPreMint;\n        emit AmountForPreMintSet(newAmountForPreMint);\n    }\n\n    function setPreMintPrice(\n        uint256 newPreMintPrice\n    ) external onlyOwner contractNotLocked {\n        if (newPreMintPrice > publicSalePrice)\n            revert Launchpeg__InvalidAllowlistPrice();\n\n        preMintPrice = newPreMintPrice;\n        emit PreMintPriceSet(newPreMintPrice);\n    }\n\n    function setPublicSalePrice(\n        uint256 newPublicSalePrice\n    ) external onlyOwner contractNotLocked {\n        if (newPublicSalePrice < preMintPrice)\n            revert Launchpeg__InvalidAllowlistPrice();\n\n        publicSalePrice = newPublicSalePrice;\n        emit PublicSalePriceSet(newPublicSalePrice);\n    }\n\n    function setCollectionSize(\n        uint256 newCollectionSize\n    ) external onlyOwner contractNotLocked {\n        if (\n            newCollectionSize < amountForDevs + amountForPreMint ||\n            newCollectionSize <\n            amountMintedDuringPreMint +\n                amountMintedDuringPublicSale +\n                amountForDevs\n        ) revert Launchpeg__LargerCollectionSizeNeeded();\n\n        collectionSize = newCollectionSize;\n        emit CollectionSizeSet(newCollectionSize);\n    }\n\n    function setMaxPerAddressDuringMint(\n        uint256 newMaxAmountPerUser\n    ) external onlyOwner contractNotLocked {\n        maxPerAddressDuringMint = newMaxAmountPerUser;\n        emit MaxPerAddressDuringMintSet(newMaxAmountPerUser);\n    }\n\n    function _availableSupply() internal view returns (uint256) {\n        return\n            collectionSize -\n            amountMintedDuringPreMint -\n            amountMintedDuringPublicSale -\n            amountForDevs;\n    }\n\n    function _mint(address to, uint256 amount) internal {\n        numberMinted[to] += amount;\n\n        uint256 tokenAmount = _tokenSet.length;\n        uint256[] memory amounts = new uint256[](tokenAmount);\n        for (uint i = 0; i < tokenAmount; i++) {\n            amounts[i] = amount;\n        }\n\n        _mintBatch(to, _tokenSet, amounts, \"\");\n    }\n}\n"
    },
    "contracts/ERC721AUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721AUpgradeable is\n    Initializable,\n    ContextUpgradeable,\n    ERC165Upgradeable,\n    IERC721Upgradeable,\n    IERC721MetadataUpgradeable\n{\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    function __ERC721A_init(string memory name_, string memory symbol_)\n        internal\n        onlyInitializing\n    {\n        __ERC721A_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721A_init_unchained(\n        string memory name_,\n        string memory symbol_\n    ) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Upgradeable, IERC165Upgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId)\n        internal\n        view\n        returns (TokenOwnership memory)\n    {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length != 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        override\n        returns (address)\n    {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (\n            to.isContract() &&\n            !_checkContractOnERC721Received(from, to, tokenId, _data)\n        ) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex &&\n            !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, \"\");\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (\n                        !_checkContractOnERC721Received(\n                            address(0),\n                            to,\n                            updatedIndex++,\n                            _data\n                        )\n                    ) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev This is equivalent to _burn(tokenId, false)\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n        address from = prevOwnership.addr;\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try\n            IERC721ReceiverUpgradeable(to).onERC721Received(\n                _msgSender(),\n                from,\n                tokenId,\n                _data\n            )\n        returns (bytes4 retval) {\n            return\n                retval ==\n                IERC721ReceiverUpgradeable(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[42] private __gap;\n}\n"
    },
    "contracts/FlatLaunchpeg.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IFlatLaunchpeg.sol\";\nimport \"./BaseLaunchpeg.sol\";\n\n/// @title FlatLaunchpeg\n/// @author Trader Joe\n/// @notice Implements a simple minting NFT contract with an allowlist and public sale phase.\ncontract FlatLaunchpeg is BaseLaunchpeg, IFlatLaunchpeg {\n    /// @notice Price of one NFT for people on the mint list\n    /// @dev allowlistPrice is scaled to 1e18\n    uint256 public override allowlistPrice;\n\n    /// @notice Price of one NFT during the public sale\n    /// @dev salePrice is scaled to 1e18\n    uint256 public override salePrice;\n\n    /// @dev Emitted on initializePhases()\n    /// @param preMintStartTime Pre-mint start time in seconds\n    /// @param allowlistStartTime Allowlist mint start time in seconds\n    /// @param publicSaleStartTime Public sale start time in seconds\n    /// @param publicSaleEndTime Public sale end time in seconds\n    /// @param allowlistPrice Price of the allowlist sale in Avax\n    /// @param salePrice Price of the public sale in Avax\n    event PhaseInitialized(\n        uint256 preMintStartTime,\n        uint256 allowlistStartTime,\n        uint256 publicSaleStartTime,\n        uint256 publicSaleEndTime,\n        uint256 allowlistPrice,\n        uint256 salePrice\n    );\n\n    /// @notice FlatLaunchpeg initialization\n    /// Can only be called once\n    /// @param _collectionData Launchpeg collection data\n    /// @param _ownerData Launchpeg owner data\n    function initialize(\n        CollectionData calldata _collectionData,\n        CollectionOwnerData calldata _ownerData\n    ) external override initializer {\n        initializeBaseLaunchpeg(_collectionData, _ownerData);\n    }\n\n    /// @notice Initialize the two phases of the sale\n    /// @dev Can only be called once\n    /// @param _preMintStartTime Pre-mint start time in seconds\n    /// @param _allowlistStartTime Allowlist mint start time in seconds\n    /// @param _publicSaleStartTime Public sale start time in seconds\n    /// @param _publicSaleEndTime Public sale end time in seconds\n    /// @param _allowlistPrice Price of the allowlist sale in Avax\n    /// @param _salePrice Price of the public sale in Avax\n    function initializePhases(\n        uint256 _preMintStartTime,\n        uint256 _allowlistStartTime,\n        uint256 _publicSaleStartTime,\n        uint256 _publicSaleEndTime,\n        uint256 _allowlistPrice,\n        uint256 _salePrice\n    ) external override onlyOwner atPhase(Phase.NotStarted) {\n        if (\n            _preMintStartTime < block.timestamp ||\n            _allowlistStartTime < _preMintStartTime ||\n            _publicSaleStartTime < _allowlistStartTime ||\n            _publicSaleEndTime < _publicSaleStartTime\n        ) {\n            revert Launchpeg__InvalidPhases();\n        }\n\n        if (_allowlistPrice > _salePrice) {\n            revert Launchpeg__InvalidAllowlistPrice();\n        }\n\n        salePrice = _salePrice;\n        allowlistPrice = _allowlistPrice;\n\n        preMintStartTime = _preMintStartTime;\n        allowlistStartTime = _allowlistStartTime;\n        publicSaleStartTime = _publicSaleStartTime;\n        publicSaleEndTime = _publicSaleEndTime;\n\n        emit PhaseInitialized(\n            preMintStartTime,\n            allowlistStartTime,\n            publicSaleStartTime,\n            publicSaleEndTime,\n            allowlistPrice,\n            salePrice\n        );\n    }\n\n    /// @notice Set the pre-mint start time. Can only be set after phases\n    /// have been initialized.\n    /// @dev Only callable by owner\n    /// @param _preMintStartTime New pre-mint start time\n    function setPreMintStartTime(\n        uint256 _preMintStartTime\n    )\n        external\n        override\n        onlyOwner\n        isTimeUpdateAllowed(preMintStartTime)\n        isNotBeforeBlockTimestamp(_preMintStartTime)\n    {\n        if (allowlistStartTime < _preMintStartTime) {\n            revert Launchpeg__InvalidPhases();\n        }\n        preMintStartTime = _preMintStartTime;\n        emit PreMintStartTimeSet(_preMintStartTime);\n    }\n\n    /// @notice Returns the current phase\n    /// @return phase Current phase\n    function currentPhase()\n        public\n        view\n        override(IBaseLaunchpeg, BaseLaunchpeg)\n        returns (Phase)\n    {\n        if (\n            preMintStartTime == 0 ||\n            allowlistStartTime == 0 ||\n            publicSaleStartTime == 0 ||\n            publicSaleEndTime == 0 ||\n            block.timestamp < preMintStartTime\n        ) {\n            return Phase.NotStarted;\n        } else if (totalSupply() >= collectionSize) {\n            return Phase.Ended;\n        } else if (\n            block.timestamp >= preMintStartTime &&\n            block.timestamp < allowlistStartTime\n        ) {\n            return Phase.PreMint;\n        } else if (\n            block.timestamp >= allowlistStartTime &&\n            block.timestamp < publicSaleStartTime\n        ) {\n            return Phase.Allowlist;\n        } else if (\n            block.timestamp >= publicSaleStartTime &&\n            block.timestamp < publicSaleEndTime\n        ) {\n            return Phase.PublicSale;\n        }\n        return Phase.Ended;\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by\n    /// `interfaceId`. See the corresponding\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// to learn more about how these IDs are created.\n    /// This function call must use less than 30 000 gas.\n    /// @param _interfaceId InterfaceId to consider. Comes from type(Interface).interfaceId\n    /// @return isInterfaceSupported True if the considered interface is supported\n    function supportsInterface(\n        bytes4 _interfaceId\n    )\n        public\n        view\n        virtual\n        override(BaseLaunchpeg, IERC165Upgradeable)\n        returns (bool)\n    {\n        return\n            _interfaceId == type(IFlatLaunchpeg).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @dev Returns pre-mint price. Used by mint methods.\n    function _getPreMintPrice() internal view override returns (uint256) {\n        return allowlistPrice;\n    }\n\n    /// @dev Returns allowlist price. Used by mint methods.\n    function _getAllowlistPrice() internal view override returns (uint256) {\n        return allowlistPrice;\n    }\n\n    /// @dev Returns public sale price. Used by mint methods.\n    function _getPublicSalePrice() internal view override returns (uint256) {\n        return salePrice;\n    }\n}\n"
    },
    "contracts/interfaces/IBaseLaunchpeg.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\";\n\nimport \"../ERC721AUpgradeable.sol\";\n\n/// @title IBaseLaunchpeg\n/// @author Trader Joe\n/// @notice Defines the basic interface of BaseLaunchpeg\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\n    enum Phase {\n        NotStarted,\n        DutchAuction,\n        PreMint,\n        Allowlist,\n        PublicSale,\n        Ended\n    }\n\n    /// @notice Collection data to initialize Launchpeg\n    /// @param name ERC721 name\n    /// @param symbol ERC721 symbol\n    /// @param maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\n    /// @param collectionSize The collection size (e.g 10000)\n    /// @param amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\n    /// @param amountForAuction Amount of NFTs available for the auction (e.g 8000)\n    /// @param amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\n    struct CollectionData {\n        string name;\n        string symbol;\n        address batchReveal;\n        uint256 maxPerAddressDuringMint;\n        uint256 collectionSize;\n        uint256 amountForDevs;\n        uint256 amountForAuction;\n        uint256 amountForAllowlist;\n    }\n\n    /// @notice Collection owner data to initialize Launchpeg\n    /// @param owner The contract owner\n    /// @param projectOwner The project owner\n    /// @param royaltyReceiver Royalty fee collector\n    /// @param joeFeeCollector The address to which the fees on the sale will be sent\n    /// @param joeFeePercent The fees collected by the fee collector on the sale benefits\n    struct CollectionOwnerData {\n        address owner;\n        address projectOwner;\n        address royaltyReceiver;\n        address joeFeeCollector;\n        uint256 joeFeePercent;\n    }\n\n    function PROJECT_OWNER_ROLE() external pure returns (bytes32);\n\n    function collectionSize() external view returns (uint256);\n\n    function unrevealedURI() external view returns (string memory);\n\n    function baseURI() external view returns (string memory);\n\n    function amountForDevs() external view returns (uint256);\n\n    function amountForAllowlist() external view returns (uint256);\n\n    function maxPerAddressDuringMint() external view returns (uint256);\n\n    function joeFeePercent() external view returns (uint256);\n\n    function joeFeeCollector() external view returns (address);\n\n    function allowlist(address) external view returns (uint256);\n\n    function amountMintedByDevs() external view returns (uint256);\n\n    function amountMintedDuringPreMint() external view returns (uint256);\n\n    function amountClaimedDuringPreMint() external view returns (uint256);\n\n    function amountMintedDuringAllowlist() external view returns (uint256);\n\n    function amountMintedDuringPublicSale() external view returns (uint256);\n\n    function preMintStartTime() external view returns (uint256);\n\n    function allowlistStartTime() external view returns (uint256);\n\n    function publicSaleStartTime() external view returns (uint256);\n\n    function publicSaleEndTime() external view returns (uint256);\n\n    function withdrawAVAXStartTime() external view returns (uint256);\n\n    function allowlistPrice() external view returns (uint256);\n\n    function salePrice() external view returns (uint256);\n\n    function initializeBatchReveal(address _batchReveal) external;\n\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\n\n    function seedAllowlist(\n        address[] memory _addresses,\n        uint256[] memory _numSlots\n    ) external;\n\n    function setBaseURI(string calldata baseURI) external;\n\n    function setUnrevealedURI(string calldata baseURI) external;\n\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\n\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\n\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\n\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\n\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\n\n    function devMint(uint256 quantity) external;\n\n    function preMint(uint96 _quantity) external payable;\n\n    function claimPreMint() external;\n\n    function batchClaimPreMint(uint96 _maxQuantity) external;\n\n    function allowlistMint(uint256 _quantity) external payable;\n\n    function publicSaleMint(uint256 _quantity) external payable;\n\n    function withdrawAVAX(address to) external;\n\n    function getOwnershipData(uint256 tokenId)\n        external\n        view\n        returns (ERC721AUpgradeable.TokenOwnership memory);\n\n    function userPendingPreMints(address owner) external view returns (uint256);\n\n    function numberMinted(address owner) external view returns (uint256);\n\n    function numberMintedWithPreMint(address _owner)\n        external\n        view\n        returns (uint256);\n\n    function currentPhase() external view returns (Phase);\n\n    function revealNextBatch() external;\n\n    function hasBatchToReveal() external view returns (bool, uint256);\n}\n"
    },
    "contracts/interfaces/IBaseLaunchpegV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title IBaseLaunchpegV1\n/// @author Trader Joe\n/// @notice Defines the legacy methods in Launchpeg V1 contracts\ninterface IBaseLaunchpegV1 {\n    /** IBaseLaunchpeg */\n    function projectOwner() external view returns (address);\n\n    /** ILaunchpeg */\n    function getAllowlistPrice() external view returns (uint256);\n\n    function getPublicSalePrice() external view returns (uint256);\n\n    /** IBatchReveal */\n    function revealBatchSize() external view returns (uint256);\n\n    function lastTokenRevealed() external view returns (uint256);\n\n    function revealStartTime() external view returns (uint256);\n\n    function revealInterval() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBatchReveal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title IBatchReveal\n/// @author Trader Joe\n/// @notice Defines the basic interface of BatchReveal\ninterface IBatchReveal {\n    struct BatchRevealConfig {\n        uint256 collectionSize;\n        int128 intCollectionSize;\n        /// @notice Size of the batch reveal\n        /// @dev Must divide collectionSize\n        uint256 revealBatchSize;\n        /// @notice Timestamp for the start of the reveal process\n        /// @dev Can be set to zero for immediate reveal after token mint\n        uint256 revealStartTime;\n        /// @notice Time interval for gradual reveal\n        /// @dev Can be set to zero in order to reveal the collection all at once\n        uint256 revealInterval;\n    }\n\n    function initialize() external;\n\n    function configure(\n        address _baseLaunchpeg,\n        uint256 _revealBatchSize,\n        uint256 _revealStartTime,\n        uint256 _revealInterval\n    ) external;\n\n    function setRevealBatchSize(\n        address _baseLaunchpeg,\n        uint256 _revealBatchSize\n    ) external;\n\n    function setRevealStartTime(\n        address _baseLaunchpeg,\n        uint256 _revealStartTime\n    ) external;\n\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\n        external;\n\n    function setVRF(\n        address _vrfCoordinator,\n        bytes32 _keyHash,\n        uint64 _subscriptionId,\n        uint32 _callbackGasLimit\n    ) external;\n\n    function launchpegToConfig(address)\n        external\n        view\n        returns (\n            uint256,\n            int128,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function launchpegToBatchToSeed(address, uint256)\n        external\n        view\n        returns (uint256);\n\n    function launchpegToLastTokenReveal(address)\n        external\n        view\n        returns (uint256);\n\n    function useVRF() external view returns (bool);\n\n    function subscriptionId() external view returns (uint64);\n\n    function keyHash() external view returns (bytes32);\n\n    function callbackGasLimit() external view returns (uint32);\n\n    function requestConfirmations() external view returns (uint16);\n\n    function launchpegToNextBatchToReveal(address)\n        external\n        view\n        returns (uint256);\n\n    function launchpegToHasBeenForceRevealed(address)\n        external\n        view\n        returns (bool);\n\n    function launchpegToVrfRequestedForBatch(address, uint256)\n        external\n        view\n        returns (bool);\n\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\n        external\n        view\n        returns (uint256);\n\n    function isBatchRevealInitialized(address _baseLaunchpeg)\n        external\n        view\n        returns (bool);\n\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\n        external\n        returns (bool);\n\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\n        external\n        view\n        returns (bool, uint256);\n\n    function forceReveal(address _baseLaunchpeg) external;\n}\n"
    },
    "contracts/interfaces/IERC1155LaunchpegBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC1155LaunchpegBase {}\n"
    },
    "contracts/interfaces/IERC1155LaunchpegSingleBundle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC1155LaunchpegSingleBundle {}\n"
    },
    "contracts/interfaces/IFlatLaunchpeg.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IBaseLaunchpeg.sol\";\n\n/// @title ILaunchpeg\n/// @author Trader Joe\n/// @notice Defines the basic interface of FlatLaunchpeg\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\n    function initialize(\n        CollectionData calldata _collectionData,\n        CollectionOwnerData calldata _ownerData\n    ) external;\n\n    function initializePhases(\n        uint256 _preMintStartTime,\n        uint256 _allowlistStartTime,\n        uint256 _publicSaleStartTime,\n        uint256 _publicSaleEndTime,\n        uint256 _allowlistPrice,\n        uint256 _salePrice\n    ) external;\n}\n"
    },
    "contracts/interfaces/ILaunchpeg.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IBaseLaunchpeg.sol\";\n\n/// @title ILaunchpeg\n/// @author Trader Joe\n/// @notice Defines the basic interface of Launchpeg\ninterface ILaunchpeg is IBaseLaunchpeg {\n    function amountForAuction() external view returns (uint256);\n\n    function auctionSaleStartTime() external view returns (uint256);\n\n    function auctionStartPrice() external view returns (uint256);\n\n    function auctionEndPrice() external view returns (uint256);\n\n    function auctionSaleDuration() external view returns (uint256);\n\n    function auctionDropInterval() external view returns (uint256);\n\n    function auctionDropPerStep() external view returns (uint256);\n\n    function allowlistDiscountPercent() external view returns (uint256);\n\n    function publicSaleDiscountPercent() external view returns (uint256);\n\n    function amountMintedDuringAuction() external view returns (uint256);\n\n    function lastAuctionPrice() external view returns (uint256);\n\n    function getAuctionPrice(uint256 _saleStartTime)\n        external\n        view\n        returns (uint256);\n\n    function initialize(\n        CollectionData calldata _collectionData,\n        CollectionOwnerData calldata _ownerData\n    ) external;\n\n    function initializePhases(\n        uint256 _auctionSaleStartTime,\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionDropInterval,\n        uint256 _preMintStartTime,\n        uint256 _allowlistStartTime,\n        uint256 _allowlistDiscountPercent,\n        uint256 _publicSaleStartTime,\n        uint256 _publicSaleEndTime,\n        uint256 _publicSaleDiscountPercent\n    ) external;\n\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\n\n    function auctionMint(uint256 _quantity) external payable;\n}\n"
    },
    "contracts/interfaces/ILaunchpegFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @title ILaunchpegFactory\n/// @author Trader Joe\n/// @notice Defines the basic interface of LaunchpegFactory\ninterface ILaunchpegFactory {\n    function LAUNCHPEG_PAUSER_ROLE() external pure returns (bytes32);\n\n    function launchpegImplementation() external view returns (address);\n\n    function flatLaunchpegImplementation() external view returns (address);\n\n    function batchReveal() external view returns (address);\n\n    function joeFeePercent() external view returns (uint256);\n\n    function joeFeeCollector() external view returns (address);\n\n    function isLaunchpeg(uint256 _type, address _contract)\n        external\n        view\n        returns (bool);\n\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\n        external\n        view\n        returns (address);\n\n    function numLaunchpegs(uint256 _launchpegType)\n        external\n        view\n        returns (uint256);\n\n    function createLaunchpeg(\n        string memory _name,\n        string memory _symbol,\n        address _projectOwner,\n        address _royaltyReceiver,\n        uint256 _maxPerAddressDuringMint,\n        uint256 _collectionSize,\n        uint256 _amountForAuction,\n        uint256 _amountForAllowlist,\n        uint256 _amountForDevs,\n        bool _enableBatchReveal\n    ) external returns (address);\n\n    function createFlatLaunchpeg(\n        string memory _name,\n        string memory _symbol,\n        address _projectOwner,\n        address _royaltyReceiver,\n        uint256 _maxPerAddressDuringMint,\n        uint256 _collectionSize,\n        uint256 _amountForDevs,\n        uint256 _amountForAllowlist,\n        bool _enableBatchReveal\n    ) external returns (address);\n\n    function setLaunchpegImplementation(address _launchpegImplementation)\n        external;\n\n    function setFlatLaunchpegImplementation(\n        address _flatLaunchpegImplementation\n    ) external;\n\n    function setBatchReveal(address _batchReveal) external;\n\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\n\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\n\n    function addLaunchpegPauser(address _pauser) external;\n\n    function removeLaunchpegPauser(address _pauser) external;\n\n    function pauseLaunchpeg(address _launchpeg) external;\n}\n"
    },
    "contracts/interfaces/IPendingOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IPendingOwnableUpgradeable {\n    event PendingOwnerSet(address indexed pendingOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function setPendingOwner(address pendingOwner) external;\n\n    function revokePendingOwner() external;\n\n    function becomeOwner() external;\n\n    function renounceOwnership() external;\n}\n"
    },
    "contracts/interfaces/ISafePausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\";\n\nimport \"../interfaces/IPendingOwnableUpgradeable.sol\";\n\ninterface ISafePausableUpgradeable is\n    IAccessControlEnumerableUpgradeable,\n    IPendingOwnableUpgradeable\n{\n    function PAUSER_ROLE() external pure returns (bytes32);\n\n    function UNPAUSER_ROLE() external pure returns (bytes32);\n\n    function PAUSER_ADMIN_ROLE() external pure returns (bytes32);\n\n    function UNPAUSER_ADMIN_ROLE() external pure returns (bytes32);\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "contracts/Launchpeg.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\nimport \"./BaseLaunchpeg.sol\";\nimport \"./interfaces/ILaunchpeg.sol\";\n\n/// @title Launchpeg\n/// @author Trader Joe\n/// @notice Implements a fair and gas efficient NFT launch mechanism. The sale takes place in 3 phases: dutch auction, allowlist mint, public sale.\ncontract Launchpeg is BaseLaunchpeg, ILaunchpeg {\n    /// @notice Amount of NFTs available for the auction (e.g 8000)\n    /// Unsold items are put up for sale during the public sale.\n    uint256 public override amountForAuction;\n\n    /// @notice Start time of the dutch auction in seconds\n    /// @dev Timestamp\n    uint256 public override auctionSaleStartTime;\n\n    /// @notice Auction start price in AVAX\n    /// @dev auctionStartPrice is scaled to 1e18\n    uint256 public override auctionStartPrice;\n\n    /// @notice Auction floor price in AVAX\n    /// @dev auctionEndPrice is scaled to 1e18\n    uint256 public override auctionEndPrice;\n\n    /// @notice Duration of the auction in seconds\n    /// @dev allowlistStartTime - auctionSaleStartTime\n    uint256 public override auctionSaleDuration;\n\n    /// @notice Time elapsed between each drop in price\n    /// @dev In seconds\n    uint256 public override auctionDropInterval;\n\n    /// @notice Amount in AVAX deducted at each interval\n    uint256 public override auctionDropPerStep;\n\n    /// @notice The discount applied to the last auction price during the allowlist mint\n    /// @dev In basis points e.g 500 for 5%\n    uint256 public override allowlistDiscountPercent;\n\n    /// @notice The discount applied to the last auction price during the public sale\n    /// @dev In basis points e.g 2500 for 25%\n    uint256 public override publicSaleDiscountPercent;\n\n    /// @notice Tracks the amount of NFTs minted during the dutch auction\n    uint256 public override amountMintedDuringAuction;\n\n    /// @notice The price of the last NFT sold during the auction\n    /// @dev lastAuctionPrice is scaled to 1e18\n    uint256 public override lastAuctionPrice;\n\n    /// @dev Emitted on initializePhases()\n    /// @param auctionSaleStartTime Auction start time in seconds\n    /// @param auctionStartPrice Auction start price in AVAX\n    /// @param auctionEndPrice Auction floor price in AVAX\n    /// @param auctionDropInterval Time elapsed between each drop in price in seconds\n    /// @param preMintStartTime Pre-mint start time in seconds\n    /// @param allowlistStartTime allowlist mint start time in seconds\n    /// @param allowlistDiscountPercent Discount applied to the last auction price during the allowlist mint\n    /// @param publicSaleStartTime Public sale start time in seconds\n    /// @param publicSaleEndTime Public sale end time in seconds\n    /// @param publicSaleDiscountPercent Discount applied to the last auction price during the public sale\n    event PhaseInitialized(\n        uint256 auctionSaleStartTime,\n        uint256 auctionStartPrice,\n        uint256 auctionEndPrice,\n        uint256 auctionDropInterval,\n        uint256 preMintStartTime,\n        uint256 allowlistStartTime,\n        uint256 allowlistDiscountPercent,\n        uint256 publicSaleStartTime,\n        uint256 publicSaleEndTime,\n        uint256 publicSaleDiscountPercent\n    );\n\n    /// @dev Emitted on setAuctionSaleStartTime()\n    /// @param auctionSaleStartTime New auction sale start time\n    event AuctionSaleStartTimeSet(uint256 auctionSaleStartTime);\n\n    /// @notice Launchpeg initialization\n    /// Can only be called once\n    /// @param _collectionData Launchpeg collection data\n    /// @param _ownerData Launchpeg owner data\n    function initialize(\n        CollectionData calldata _collectionData,\n        CollectionOwnerData calldata _ownerData\n    ) external override initializer {\n        initializeBaseLaunchpeg(_collectionData, _ownerData);\n        if (\n            _collectionData.amountForAuction +\n                _collectionData.amountForAllowlist +\n                _collectionData.amountForDevs >\n            _collectionData.collectionSize\n        ) {\n            revert Launchpeg__LargerCollectionSizeNeeded();\n        }\n        amountForAuction = _collectionData.amountForAuction;\n    }\n\n    /// @notice Initialize the three phases of the sale\n    /// @dev Can only be called once\n    /// @param _auctionSaleStartTime Auction start time in seconds\n    /// @param _auctionStartPrice Auction start price in AVAX\n    /// @param _auctionEndPrice Auction floor price in AVAX\n    /// @param _auctionDropInterval Time elapsed between each drop in price in seconds\n    /// @param _preMintStartTime Pre-mint start time in seconds\n    /// @param _allowlistStartTime Allowlist mint start time in seconds\n    /// @param _allowlistDiscountPercent Discount applied to the last auction price during the allowlist mint\n    /// @param _publicSaleStartTime Public sale start time in seconds\n    /// @param _publicSaleEndTime Public sale end time in seconds\n    /// @param _publicSaleDiscountPercent Discount applied to the last auction price during the public sale\n    function initializePhases(\n        uint256 _auctionSaleStartTime,\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionDropInterval,\n        uint256 _preMintStartTime,\n        uint256 _allowlistStartTime,\n        uint256 _allowlistDiscountPercent,\n        uint256 _publicSaleStartTime,\n        uint256 _publicSaleEndTime,\n        uint256 _publicSaleDiscountPercent\n    ) external override onlyOwner atPhase(Phase.NotStarted) {\n        if (\n            _auctionSaleStartTime < block.timestamp ||\n            _auctionStartPrice <= _auctionEndPrice ||\n            _preMintStartTime <= _auctionSaleStartTime ||\n            _allowlistStartTime < _preMintStartTime ||\n            _publicSaleStartTime < _allowlistStartTime ||\n            _publicSaleEndTime < _publicSaleStartTime\n        ) {\n            revert Launchpeg__InvalidPhases();\n        }\n\n        if (\n            _allowlistDiscountPercent > BASIS_POINT_PRECISION ||\n            _publicSaleDiscountPercent > BASIS_POINT_PRECISION\n        ) {\n            revert Launchpeg__InvalidPercent();\n        }\n\n        auctionSaleDuration = _preMintStartTime - _auctionSaleStartTime;\n        /// Ensure auction drop interval is not too high by enforcing it\n        /// is at most 1/4 of the auction sale duration.\n        /// There will be at least 3 price drops.\n        if (\n            _auctionDropInterval == 0 ||\n            _auctionDropInterval > auctionSaleDuration / 4\n        ) {\n            revert Launchpeg__InvalidAuctionDropInterval();\n        }\n\n        auctionSaleStartTime = _auctionSaleStartTime;\n        auctionStartPrice = _auctionStartPrice;\n        lastAuctionPrice = _auctionStartPrice;\n        auctionEndPrice = _auctionEndPrice;\n        auctionDropInterval = _auctionDropInterval;\n        auctionDropPerStep =\n            (_auctionStartPrice - _auctionEndPrice) /\n            (auctionSaleDuration / _auctionDropInterval);\n\n        preMintStartTime = _preMintStartTime;\n        allowlistStartTime = _allowlistStartTime;\n        allowlistDiscountPercent = _allowlistDiscountPercent;\n\n        publicSaleStartTime = _publicSaleStartTime;\n        publicSaleEndTime = _publicSaleEndTime;\n        publicSaleDiscountPercent = _publicSaleDiscountPercent;\n\n        emit PhaseInitialized(\n            auctionSaleStartTime,\n            auctionStartPrice,\n            auctionEndPrice,\n            auctionDropInterval,\n            preMintStartTime,\n            allowlistStartTime,\n            allowlistDiscountPercent,\n            publicSaleStartTime,\n            publicSaleEndTime,\n            publicSaleDiscountPercent\n        );\n    }\n\n    /// @notice Set the auction sale start time. Can only be set after phases\n    /// have been initialized.\n    /// @dev Only callable by owner\n    /// @param _auctionSaleStartTime New auction sale start time\n    function setAuctionSaleStartTime(\n        uint256 _auctionSaleStartTime\n    )\n        external\n        override\n        onlyOwner\n        isTimeUpdateAllowed(auctionSaleStartTime)\n        isNotBeforeBlockTimestamp(_auctionSaleStartTime)\n    {\n        if (preMintStartTime <= _auctionSaleStartTime) {\n            revert Launchpeg__InvalidPhases();\n        }\n        auctionSaleStartTime = _auctionSaleStartTime;\n        emit AuctionSaleStartTimeSet(_auctionSaleStartTime);\n    }\n\n    /// @notice Set the pre-mint start time. Can only be set after phases\n    /// have been initialized.\n    /// @dev Only callable by owner\n    /// @param _preMintStartTime New pre-mint start time\n    function setPreMintStartTime(\n        uint256 _preMintStartTime\n    )\n        external\n        override\n        onlyOwner\n        isTimeUpdateAllowed(preMintStartTime)\n        isNotBeforeBlockTimestamp(_preMintStartTime)\n    {\n        if (\n            _preMintStartTime <= auctionSaleStartTime ||\n            allowlistStartTime < _preMintStartTime\n        ) {\n            revert Launchpeg__InvalidPhases();\n        }\n\n        preMintStartTime = _preMintStartTime;\n        emit PreMintStartTimeSet(_preMintStartTime);\n    }\n\n    /// @notice Mint NFTs during the dutch auction\n    /// @dev The price decreases every `auctionDropInterval` by `auctionDropPerStep`\n    /// @param _quantity Quantity of NFTs to buy\n    function auctionMint(\n        uint256 _quantity\n    ) external payable override whenNotPaused atPhase(Phase.DutchAuction) {\n        // use numberMinted() since pre-mint starts after auction\n        if (numberMinted(msg.sender) + _quantity > maxPerAddressDuringMint) {\n            revert Launchpeg__CanNotMintThisMany();\n        }\n        if (amountMintedDuringAuction + _quantity > amountForAuction) {\n            revert Launchpeg__MaxSupplyReached();\n        }\n        lastAuctionPrice = getAuctionPrice(auctionSaleStartTime);\n        uint256 totalCost = lastAuctionPrice * _quantity;\n        amountMintedDuringAuction = amountMintedDuringAuction + _quantity;\n        _mint(msg.sender, _quantity, \"\", false);\n        emit Mint(\n            msg.sender,\n            _quantity,\n            lastAuctionPrice,\n            _totalMinted() - _quantity,\n            Phase.DutchAuction\n        );\n        _refundIfOver(totalCost);\n    }\n\n    /// @notice Returns the current price of the dutch auction\n    /// @param _saleStartTime Auction sale start time\n    /// @return auctionSalePrice Auction sale price\n    function getAuctionPrice(\n        uint256 _saleStartTime\n    ) public view override returns (uint256) {\n        if (block.timestamp < _saleStartTime) {\n            return auctionStartPrice;\n        }\n        if (block.timestamp - _saleStartTime >= auctionSaleDuration) {\n            return auctionEndPrice;\n        } else {\n            uint256 steps = (block.timestamp - _saleStartTime) /\n                auctionDropInterval;\n            return auctionStartPrice - (steps * auctionDropPerStep);\n        }\n    }\n\n    /// @notice Returns the price of the allowlist mint\n    /// @return allowlistSalePrice Mint List sale price\n    function allowlistPrice() public view override returns (uint256) {\n        return _getAllowlistPrice();\n    }\n\n    /// @notice Returns the price of the public sale\n    /// @return publicSalePrice Public sale price\n    function salePrice() public view override returns (uint256) {\n        return _getPublicSalePrice();\n    }\n\n    /// @notice Returns the current phase\n    /// @return phase Current phase\n    function currentPhase()\n        public\n        view\n        override(IBaseLaunchpeg, BaseLaunchpeg)\n        returns (Phase)\n    {\n        if (\n            auctionSaleStartTime == 0 ||\n            preMintStartTime == 0 ||\n            allowlistStartTime == 0 ||\n            publicSaleStartTime == 0 ||\n            publicSaleEndTime == 0 ||\n            block.timestamp < auctionSaleStartTime\n        ) {\n            return Phase.NotStarted;\n        } else if (totalSupply() >= collectionSize) {\n            return Phase.Ended;\n        } else if (block.timestamp < preMintStartTime) {\n            return Phase.DutchAuction;\n        } else if (block.timestamp < allowlistStartTime) {\n            return Phase.PreMint;\n        } else if (block.timestamp < publicSaleStartTime) {\n            return Phase.Allowlist;\n        } else if (block.timestamp < publicSaleEndTime) {\n            return Phase.PublicSale;\n        }\n        return Phase.Ended;\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by\n    /// `interfaceId`. See the corresponding\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// to learn more about how these IDs are created.\n    /// This function call must use less than 30 000 gas.\n    /// @param _interfaceId InterfaceId to consider. Comes from type(InterfaceContract).interfaceId\n    /// @return isInterfaceSupported True if the considered interface is supported\n    function supportsInterface(\n        bytes4 _interfaceId\n    )\n        public\n        view\n        virtual\n        override(BaseLaunchpeg, IERC165Upgradeable)\n        returns (bool)\n    {\n        return\n            _interfaceId == type(ILaunchpeg).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @dev Returns pre-mint price. Used by mint methods.\n    function _getPreMintPrice() internal view override returns (uint256) {\n        return _getAllowlistPrice();\n    }\n\n    /// @dev Returns allowlist price. Used by mint methods.\n    function _getAllowlistPrice() internal view override returns (uint256) {\n        return\n            lastAuctionPrice -\n            (lastAuctionPrice * allowlistDiscountPercent) /\n            BASIS_POINT_PRECISION;\n    }\n\n    /// @dev Returns public sale price. Used by mint methods.\n    function _getPublicSalePrice() internal view override returns (uint256) {\n        return\n            lastAuctionPrice -\n            (lastAuctionPrice * publicSaleDiscountPercent) /\n            BASIS_POINT_PRECISION;\n    }\n}\n"
    },
    "contracts/LaunchpegErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// LaunchpegFactory\nerror LaunchpegFactory__InvalidBatchReveal();\nerror LaunchpegFactory__InvalidImplementation();\n\n// Launchpeg\nerror Launchpeg__BatchRevealAlreadyInitialized();\nerror Launchpeg__BatchRevealDisabled();\nerror Launchpeg__BatchRevealNotInitialized();\nerror Launchpeg__BatchRevealStarted();\nerror Launchpeg__CanNotMintThisMany();\nerror Launchpeg__HasBeenForceRevealed();\nerror Launchpeg__InvalidAllowlistPrice();\nerror Launchpeg__InvalidAuctionDropInterval();\nerror Launchpeg__InvalidBatchReveal();\nerror Launchpeg__InvalidBatchRevealSize();\nerror Launchpeg__InvalidCallbackGasLimit();\nerror Launchpeg__InvalidClaim();\nerror Launchpeg__InvalidCoordinator();\nerror Launchpeg__InvalidKeyHash();\nerror Launchpeg__InvalidJoeFeeCollector();\nerror Launchpeg__InvalidMaxPerAddressDuringMint();\nerror Launchpeg__InvalidOwner();\nerror Launchpeg__InvalidProjectOwner();\nerror Launchpeg__InvalidPercent();\nerror Launchpeg__InvalidQuantity();\nerror Launchpeg__InvalidRevealDates();\nerror Launchpeg__InvalidRoyaltyInfo();\nerror Launchpeg__InvalidPhases();\nerror Launchpeg__IsNotInTheConsumerList();\nerror Launchpeg__LargerCollectionSizeNeeded();\nerror Launchpeg__MaxSupplyForDevReached();\nerror Launchpeg__MaxSupplyReached();\nerror Launchpeg__NotEligibleForAllowlistMint();\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\nerror Launchpeg__NotInitialized();\nerror Launchpeg__RevealNextBatchNotAvailable();\nerror Launchpeg__SaleParametersLocked();\nerror Launchpeg__TransferFailed();\nerror Launchpeg__Unauthorized();\nerror Launchpeg__WithdrawAVAXNotAvailable();\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\nerror Launchpeg__WrongPhase();\n\n// PendingOwnableUpgradeable\nerror PendingOwnableUpgradeable__NotOwner();\nerror PendingOwnableUpgradeable__AddressZero();\nerror PendingOwnableUpgradeable__NotPendingOwner();\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\nerror PendingOwnableUpgradeable__NoPendingOwner();\n\n// SafeAccessControlEnumerableUpgradeable\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\n    bytes32 role,\n    address sender\n);\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\n\n// SafePausableUpgradeable\nerror SafePausableUpgradeable__AlreadyPaused();\nerror SafePausableUpgradeable__AlreadyUnpaused();\n\n// OperatorFilterer\nerror OperatorNotAllowed(address operator);\n"
    },
    "contracts/LaunchpegFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ProxyAdmin} from \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport \"./LaunchpegErrors.sol\";\nimport {IBatchReveal} from \"./interfaces/IBatchReveal.sol\";\nimport {IBaseLaunchpeg} from \"./interfaces/IBaseLaunchpeg.sol\";\nimport {IFlatLaunchpeg} from \"./interfaces/IFlatLaunchpeg.sol\";\nimport {ILaunchpeg} from \"./interfaces/ILaunchpeg.sol\";\nimport {ERC1155LaunchpegBase} from \"./ERC1155LaunchpegBase.sol\";\nimport {ERC1155SingleBundle} from \"./ERC1155SingleBundle.sol\";\nimport {ILaunchpegFactory} from \"./interfaces/ILaunchpegFactory.sol\";\nimport {IPendingOwnableUpgradeable} from \"./interfaces/IPendingOwnableUpgradeable.sol\";\nimport {ISafePausableUpgradeable} from \"./interfaces/ISafePausableUpgradeable.sol\";\nimport {SafeAccessControlEnumerableUpgradeable} from \"./utils/SafeAccessControlEnumerableUpgradeable.sol\";\n\n/// @title Launchpeg Factory\n/// @author Trader Joe\n/// @notice Factory that creates Launchpeg contracts\ncontract LaunchpegFactory is\n    ILaunchpegFactory,\n    Initializable,\n    SafeAccessControlEnumerableUpgradeable\n{\n    event LaunchpegCreated(\n        address indexed launchpeg,\n        string name,\n        string symbol,\n        address indexed projectOwner,\n        address indexed royaltyReceiver,\n        uint256 maxPerAddressDuringMint,\n        uint256 collectionSize,\n        uint256 amountForAuction,\n        uint256 amountForAllowlist,\n        uint256 amountForDevs\n    );\n\n    event FlatLaunchpegCreated(\n        address indexed flatLaunchpeg,\n        string name,\n        string symbol,\n        address indexed projectOwner,\n        address indexed royaltyReceiver,\n        uint256 maxPerAddressDuringMint,\n        uint256 collectionSize,\n        uint256 amountForDevs,\n        uint256 amountForAllowlist\n    );\n\n    event ERC1155SingleBundleCreated(address indexed erc1155SingleBundle);\n    event ProxyAdminFor1155Created(address indexed proxyAdmin);\n\n    event SetLaunchpegImplementation(address indexed launchpegImplementation);\n    event SetFlatLaunchpegImplementation(\n        address indexed flatLaunchpegImplementation\n    );\n    event Set1155SingleBundleImplementation(\n        address indexed erc1155SingleBundleImplementation\n    );\n    event SetBatchReveal(address indexed batchReveal);\n    event SetDefaultJoeFeePercent(uint256 joeFeePercent);\n    event SetDefaultJoeFeeCollector(address indexed joeFeeCollector);\n\n    bytes32 public constant override LAUNCHPEG_PAUSER_ROLE =\n        keccak256(\"LAUNCHPEG_PAUSER_ROLE\");\n\n    /// @notice Launchpeg contract to be cloned\n    address public override launchpegImplementation;\n    /// @notice FlatLaunchpeg contract to be cloned\n    address public override flatLaunchpegImplementation;\n\n    /// @notice Default fee percentage\n    /// @dev In basis points e.g 100 for 1%\n    uint256 public override joeFeePercent;\n    /// @notice Default fee collector\n    address public override joeFeeCollector;\n\n    /// @notice Checks if an address is stored as a Launchpeg, by type of Launchpeg\n    mapping(uint256 => mapping(address => bool)) public override isLaunchpeg;\n    /// @notice Launchpegs address list by type of Launchpeg\n    mapping(uint256 => address[]) public override allLaunchpegs;\n\n    /// @notice Batch reveal address\n    address public override batchReveal;\n\n    address public erc1155SingleBundleImplementation;\n\n    /// @notice Initializes the Launchpeg factory\n    /// @dev Uses clone factory pattern to save space\n    /// @param _launchpegImplementation Launchpeg contract to be cloned\n    /// @param _flatLaunchpegImplementation FlatLaunchpeg contract to be cloned\n    /// @param _erc1155SingleBundleImplementation ERC1155SingleBundle contract to be cloned\n    /// @param _batchReveal Batch reveal address\n    /// @param _joeFeePercent Default fee percentage\n    /// @param _joeFeeCollector Default fee collector\n    function initialize(\n        address _launchpegImplementation,\n        address _flatLaunchpegImplementation,\n        address _erc1155SingleBundleImplementation,\n        address _batchReveal,\n        uint256 _joeFeePercent,\n        address _joeFeeCollector\n    ) public initializer {\n        __SafeAccessControlEnumerable_init();\n\n        if (_launchpegImplementation == address(0)) {\n            revert LaunchpegFactory__InvalidImplementation();\n        }\n        if (_flatLaunchpegImplementation == address(0)) {\n            revert LaunchpegFactory__InvalidImplementation();\n        }\n        if (_erc1155SingleBundleImplementation == address(0)) {\n            revert LaunchpegFactory__InvalidImplementation();\n        }\n        if (_batchReveal == address(0)) {\n            revert LaunchpegFactory__InvalidBatchReveal();\n        }\n        if (_joeFeePercent > 10_000) {\n            revert Launchpeg__InvalidPercent();\n        }\n        if (_joeFeeCollector == address(0)) {\n            revert Launchpeg__InvalidJoeFeeCollector();\n        }\n\n        launchpegImplementation = _launchpegImplementation;\n        flatLaunchpegImplementation = _flatLaunchpegImplementation;\n        erc1155SingleBundleImplementation = _erc1155SingleBundleImplementation;\n        batchReveal = _batchReveal;\n        joeFeePercent = _joeFeePercent;\n        joeFeeCollector = _joeFeeCollector;\n    }\n\n    /// @notice Returns the number of Launchpegs\n    /// @param _launchpegType Type of Launchpeg to consider\n    /// @return LaunchpegNumber The number of Launchpegs ever created\n    function numLaunchpegs(\n        uint256 _launchpegType\n    ) external view override returns (uint256) {\n        return allLaunchpegs[_launchpegType].length;\n    }\n\n    /// @notice Launchpeg creation\n    /// @param _name ERC721 name\n    /// @param _symbol ERC721 symbol\n    /// @param _projectOwner The project owner\n    /// @param _royaltyReceiver Royalty fee collector\n    /// @param _maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\n    /// @param _collectionSize The collection size (e.g 10000)\n    /// @param _amountForAuction Amount of NFTs available for the auction (e.g 8000)\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\n    /// @param _enableBatchReveal Flag to enable batch reveal for the collection\n    /// @return launchpeg New Launchpeg address\n    function createLaunchpeg(\n        string memory _name,\n        string memory _symbol,\n        address _projectOwner,\n        address _royaltyReceiver,\n        uint256 _maxPerAddressDuringMint,\n        uint256 _collectionSize,\n        uint256 _amountForAuction,\n        uint256 _amountForAllowlist,\n        uint256 _amountForDevs,\n        bool _enableBatchReveal\n    ) external override onlyOwner returns (address) {\n        address launchpeg = Clones.clone(launchpegImplementation);\n\n        isLaunchpeg[0][launchpeg] = true;\n        allLaunchpegs[0].push(launchpeg);\n\n        {\n            IBaseLaunchpeg.CollectionData memory collectionData = IBaseLaunchpeg\n                .CollectionData({\n                    name: _name,\n                    symbol: _symbol,\n                    batchReveal: _enableBatchReveal ? batchReveal : address(0),\n                    maxPerAddressDuringMint: _maxPerAddressDuringMint,\n                    collectionSize: _collectionSize,\n                    amountForDevs: _amountForDevs,\n                    amountForAuction: _amountForAuction,\n                    amountForAllowlist: _amountForAllowlist\n                });\n            IBaseLaunchpeg.CollectionOwnerData memory ownerData = IBaseLaunchpeg\n                .CollectionOwnerData({\n                    owner: msg.sender,\n                    projectOwner: _projectOwner,\n                    royaltyReceiver: _royaltyReceiver,\n                    joeFeeCollector: joeFeeCollector,\n                    joeFeePercent: joeFeePercent\n                });\n            ILaunchpeg(launchpeg).initialize(collectionData, ownerData);\n        }\n\n        emit LaunchpegCreated(\n            launchpeg,\n            _name,\n            _symbol,\n            _projectOwner,\n            _royaltyReceiver,\n            _maxPerAddressDuringMint,\n            _collectionSize,\n            _amountForAuction,\n            _amountForAllowlist,\n            _amountForDevs\n        );\n\n        return launchpeg;\n    }\n\n    /// @notice FlatLaunchpeg creation\n    /// @param _name ERC721 name\n    /// @param _symbol ERC721 symbol\n    /// @param _projectOwner The project owner\n    /// @param _royaltyReceiver Royalty fee collector\n    /// @param _maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\n    /// @param _collectionSize The collection size (e.g 10000)\n    /// @param _amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\n    /// @param _amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\n    /// @param _enableBatchReveal Flag to enable batch reveal for the collection\n    /// @return flatLaunchpeg New FlatLaunchpeg address\n    function createFlatLaunchpeg(\n        string memory _name,\n        string memory _symbol,\n        address _projectOwner,\n        address _royaltyReceiver,\n        uint256 _maxPerAddressDuringMint,\n        uint256 _collectionSize,\n        uint256 _amountForDevs,\n        uint256 _amountForAllowlist,\n        bool _enableBatchReveal\n    ) external override onlyOwner returns (address) {\n        address flatLaunchpeg = Clones.clone(flatLaunchpegImplementation);\n\n        isLaunchpeg[1][flatLaunchpeg] = true;\n        allLaunchpegs[1].push(flatLaunchpeg);\n\n        {\n            IBaseLaunchpeg.CollectionData memory collectionData = IBaseLaunchpeg\n                .CollectionData({\n                    name: _name,\n                    symbol: _symbol,\n                    batchReveal: _enableBatchReveal ? batchReveal : address(0),\n                    maxPerAddressDuringMint: _maxPerAddressDuringMint,\n                    collectionSize: _collectionSize,\n                    amountForDevs: _amountForDevs,\n                    // set 0 auction amount for FlatLaunchpeg\n                    amountForAuction: 0,\n                    amountForAllowlist: _amountForAllowlist\n                });\n            IBaseLaunchpeg.CollectionOwnerData memory ownerData = IBaseLaunchpeg\n                .CollectionOwnerData({\n                    owner: msg.sender,\n                    projectOwner: _projectOwner,\n                    royaltyReceiver: _royaltyReceiver,\n                    joeFeeCollector: joeFeeCollector,\n                    joeFeePercent: joeFeePercent\n                });\n            IFlatLaunchpeg(flatLaunchpeg).initialize(collectionData, ownerData);\n        }\n\n        emit FlatLaunchpegCreated(\n            flatLaunchpeg,\n            _name,\n            _symbol,\n            _projectOwner,\n            _royaltyReceiver,\n            _maxPerAddressDuringMint,\n            _collectionSize,\n            _amountForDevs,\n            _amountForAllowlist\n        );\n\n        return flatLaunchpeg;\n    }\n\n    function create1155SingleBundle(\n        string calldata name,\n        string calldata symbol,\n        address royaltyReceiver,\n        uint256 maxPerAddressDuringMint,\n        uint256 collectionSize,\n        uint256 amountForDevs,\n        uint256 amountForPreMint,\n        uint256[] calldata tokenSet,\n        bool isUpgradeable\n    ) external onlyOwner returns (address) {\n        // Packing data to avoid stack too deep error\n        ERC1155LaunchpegBase.InitData memory initData = ERC1155LaunchpegBase\n            .InitData({\n                owner: msg.sender,\n                collectionName: name,\n                collectionSymbol: symbol,\n                royaltyReceiver: royaltyReceiver,\n                joeFeePercent: joeFeePercent\n            });\n\n        address launchpeg;\n        if (isUpgradeable) {\n            bytes memory data = abi.encodeWithSelector(\n                ERC1155SingleBundle.initialize.selector,\n                initData,\n                collectionSize,\n                amountForDevs,\n                amountForPreMint,\n                maxPerAddressDuringMint,\n                tokenSet\n            );\n\n            ProxyAdmin proxyAdmin = new ProxyAdmin();\n\n            TransparentUpgradeableProxy launchpegProxy = new TransparentUpgradeableProxy(\n                    erc1155SingleBundleImplementation,\n                    address(proxyAdmin),\n                    data\n                );\n\n            proxyAdmin.transferOwnership(msg.sender);\n\n            launchpeg = address(launchpegProxy);\n\n            emit ProxyAdminFor1155Created(address(proxyAdmin));\n        } else {\n            launchpeg = Clones.clone(erc1155SingleBundleImplementation);\n            ERC1155SingleBundle(launchpeg).initialize(\n                initData,\n                collectionSize,\n                amountForDevs,\n                amountForPreMint,\n                maxPerAddressDuringMint,\n                tokenSet\n            );\n        }\n\n        isLaunchpeg[2][launchpeg] = true;\n        allLaunchpegs[2].push(launchpeg);\n\n        emit ERC1155SingleBundleCreated(launchpeg);\n\n        return launchpeg;\n    }\n\n    /// @notice Set address for launchpegImplementation\n    /// @param _launchpegImplementation New launchpegImplementation\n    function setLaunchpegImplementation(\n        address _launchpegImplementation\n    ) external override onlyOwner {\n        if (_launchpegImplementation == address(0)) {\n            revert LaunchpegFactory__InvalidImplementation();\n        }\n\n        launchpegImplementation = _launchpegImplementation;\n        emit SetLaunchpegImplementation(_launchpegImplementation);\n    }\n\n    /// @notice Set address for flatLaunchpegImplementation\n    /// @param _flatLaunchpegImplementation New flatLaunchpegImplementation\n    function setFlatLaunchpegImplementation(\n        address _flatLaunchpegImplementation\n    ) external override onlyOwner {\n        if (_flatLaunchpegImplementation == address(0)) {\n            revert LaunchpegFactory__InvalidImplementation();\n        }\n\n        flatLaunchpegImplementation = _flatLaunchpegImplementation;\n        emit SetFlatLaunchpegImplementation(_flatLaunchpegImplementation);\n    }\n\n    function setERC1155SingleBundle(\n        address _erc1155SingleBundleImplementation\n    ) external onlyOwner {\n        if (_erc1155SingleBundleImplementation == address(0)) {\n            revert LaunchpegFactory__InvalidImplementation();\n        }\n\n        erc1155SingleBundleImplementation = _erc1155SingleBundleImplementation;\n        emit Set1155SingleBundleImplementation(\n            _erc1155SingleBundleImplementation\n        );\n    }\n\n    /// @notice Set batch reveal address\n    /// @param _batchReveal New batch reveal\n    function setBatchReveal(address _batchReveal) external override onlyOwner {\n        if (_batchReveal == address(0)) {\n            revert LaunchpegFactory__InvalidBatchReveal();\n        }\n\n        batchReveal = _batchReveal;\n        emit SetBatchReveal(_batchReveal);\n    }\n\n    /// @notice Set percentage of protocol fees\n    /// @param _joeFeePercent New joeFeePercent\n    function setDefaultJoeFeePercent(\n        uint256 _joeFeePercent\n    ) external override onlyOwner {\n        if (_joeFeePercent > 10_000) {\n            revert Launchpeg__InvalidPercent();\n        }\n\n        joeFeePercent = _joeFeePercent;\n        emit SetDefaultJoeFeePercent(_joeFeePercent);\n    }\n\n    /// @notice Set default address to collect protocol fees\n    /// @param _joeFeeCollector New collector address\n    function setDefaultJoeFeeCollector(\n        address _joeFeeCollector\n    ) external override onlyOwner {\n        if (_joeFeeCollector == address(0)) {\n            revert Launchpeg__InvalidJoeFeeCollector();\n        }\n\n        joeFeeCollector = _joeFeeCollector;\n        emit SetDefaultJoeFeeCollector(_joeFeeCollector);\n    }\n\n    /// @notice Grants LAUNCHPEG_PAUSER_ROLE to an address. The\n    /// address will be able to pause any Launchpeg collection\n    /// @param _pauser Pauser address\n    function addLaunchpegPauser(address _pauser) external override {\n        grantRole(LAUNCHPEG_PAUSER_ROLE, _pauser);\n    }\n\n    /// @notice Revokes LAUNCHPEG_PAUSER_ROLE from an address. The\n    /// address will not be able to pause any Launchpeg collection\n    /// @param _pauser Pauser address\n    function removeLaunchpegPauser(address _pauser) external override {\n        revokeRole(LAUNCHPEG_PAUSER_ROLE, _pauser);\n    }\n\n    /// @notice Pause specified Launchpeg\n    /// @param _launchpeg Launchpeg address\n    function pauseLaunchpeg(\n        address _launchpeg\n    ) external override onlyOwnerOrRole(LAUNCHPEG_PAUSER_ROLE) {\n        ISafePausableUpgradeable(_launchpeg).pause();\n    }\n}\n"
    },
    "contracts/LaunchpegLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\";\n\nimport \"./interfaces/IBaseLaunchpeg.sol\";\nimport \"./interfaces/IBaseLaunchpegV1.sol\";\nimport \"./interfaces/IBatchReveal.sol\";\nimport \"./interfaces/IFlatLaunchpeg.sol\";\nimport \"./interfaces/ILaunchpeg.sol\";\nimport \"./interfaces/ILaunchpegFactory.sol\";\nimport \"./ERC1155LaunchpegBase.sol\";\nimport \"./ERC1155SingleBundle.sol\";\nimport \"./ERC721AUpgradeable.sol\";\n\nerror LaunchpegLens__InvalidContract();\nerror LaunchpegLens__InvalidLaunchpegType();\nerror LaunchpegLens__InvalidLaunchpegVersion();\n\n/// @title Launchpeg Lens\n/// @author Trader Joe\n/// @notice Helper contract to fetch launchpegs data\ncontract LaunchpegLens {\n    struct CollectionData {\n        string name;\n        string symbol;\n        uint256 collectionSize;\n        uint256 maxPerAddressDuringMint;\n        uint256 totalSupply;\n        string unrevealedURI;\n        string baseURI;\n    }\n\n    struct LaunchpegData {\n        ILaunchpeg.Phase currentPhase;\n        uint256 amountForAuction;\n        uint256 amountForAllowlist;\n        uint256 amountForDevs;\n        uint256 auctionSaleStartTime;\n        uint256 preMintStartTime;\n        uint256 allowlistStartTime;\n        uint256 publicSaleStartTime;\n        uint256 publicSaleEndTime;\n        uint256 auctionStartPrice;\n        uint256 auctionEndPrice;\n        uint256 auctionSaleDuration;\n        uint256 auctionDropInterval;\n        uint256 auctionDropPerStep;\n        uint256 allowlistDiscountPercent;\n        uint256 publicSaleDiscountPercent;\n        uint256 auctionPrice;\n        uint256 allowlistPrice;\n        uint256 publicSalePrice;\n        uint256 lastAuctionPrice;\n        uint256 amountMintedDuringAuction;\n        uint256 amountMintedDuringPreMint;\n        uint256 amountClaimedDuringPreMint;\n        uint256 amountMintedDuringAllowlist;\n        uint256 amountMintedDuringPublicSale;\n    }\n\n    struct FlatLaunchpegData {\n        ILaunchpeg.Phase currentPhase;\n        uint256 amountForAllowlist;\n        uint256 amountForDevs;\n        uint256 preMintStartTime;\n        uint256 allowlistStartTime;\n        uint256 publicSaleStartTime;\n        uint256 publicSaleEndTime;\n        uint256 allowlistPrice;\n        uint256 salePrice;\n        uint256 amountMintedDuringPreMint;\n        uint256 amountClaimedDuringPreMint;\n        uint256 amountMintedDuringAllowlist;\n        uint256 amountMintedDuringPublicSale;\n    }\n\n    struct RevealData {\n        uint256 revealBatchSize;\n        uint256 lastTokenRevealed;\n        uint256 revealStartTime;\n        uint256 revealInterval;\n    }\n\n    struct UserData {\n        uint256 balanceOf;\n        uint256 numberMinted;\n        uint256 numberMintedWithPreMint;\n        uint256 allowanceForAllowlistMint;\n    }\n\n    struct ProjectOwnerData {\n        address[] projectOwners;\n        uint256 amountMintedByDevs;\n        uint256 withdrawAVAXStartTime;\n        uint256 launchpegBalanceAVAX;\n    }\n\n    struct ERC1155SingleBundleData {\n        uint256[] tokenSet;\n        ILaunchpeg.Phase currentPhase;\n        uint256 amountForAllowlist;\n        uint256 amountForDevs;\n        uint256 preMintStartTime;\n        uint256 publicSaleStartTime;\n        uint256 publicSaleEndTime;\n        uint256 allowlistPrice;\n        uint256 salePrice;\n        uint256 amountMintedDuringPreMint;\n        uint256 amountClaimedDuringPreMint;\n        uint256 amountMintedDuringAllowlist;\n        uint256 amountMintedDuringPublicSale;\n    }\n\n    /// Global struct that is returned by getAllLaunchpegs()\n    struct LensData {\n        address id;\n        LaunchpegType launchType;\n        CollectionData collectionData;\n        LaunchpegData launchpegData;\n        FlatLaunchpegData flatLaunchpegData;\n        RevealData revealData;\n        UserData userData;\n        ProjectOwnerData projectOwnerData;\n        ERC1155SingleBundleData erc1155SingleBundleData;\n    }\n\n    enum LaunchpegType {\n        Unknown,\n        Launchpeg,\n        FlatLaunchpeg,\n        ERC1155SingleBundle\n    }\n\n    enum LaunchpegVersion {\n        Unknown,\n        V1,\n        V2\n    }\n\n    /// @notice LaunchpegFactory V1\n    ILaunchpegFactory public immutable launchpegFactoryV1;\n\n    /// @notice LaunchpegFactory V2\n    ILaunchpegFactory public immutable launchpegFactoryV2;\n\n    /// @notice BatchReveal address\n    address public immutable batchReveal;\n\n    /// @dev LaunchpegLens constructor\n    /// @param _launchpegFactoryV1 LaunchpegFactory V1\n    /// @param _launchpegFactoryV2 LaunchpegFactory V2\n    /// @param _batchReveal BatchReveal address\n    constructor(\n        ILaunchpegFactory _launchpegFactoryV1,\n        ILaunchpegFactory _launchpegFactoryV2,\n        address _batchReveal\n    ) {\n        launchpegFactoryV1 = _launchpegFactoryV1;\n        launchpegFactoryV2 = _launchpegFactoryV2;\n        batchReveal = _batchReveal;\n    }\n\n    /// @notice Gets the type and version of Launchpeg\n    /// @param _contract Contract address to consider\n    /// @return LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\n    function getLaunchpegType(\n        address _contract\n    ) public view returns (LaunchpegType, LaunchpegVersion) {\n        if (launchpegFactoryV1.isLaunchpeg(0, _contract)) {\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V1);\n        } else if (launchpegFactoryV2.isLaunchpeg(0, _contract)) {\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V2);\n        } else if (launchpegFactoryV1.isLaunchpeg(1, _contract)) {\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V1);\n        } else if (launchpegFactoryV2.isLaunchpeg(1, _contract)) {\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V2);\n        } else if (launchpegFactoryV2.isLaunchpeg(2, _contract)) {\n            return (LaunchpegType.ERC1155SingleBundle, LaunchpegVersion.V2);\n        } else {\n            return (LaunchpegType.Unknown, LaunchpegVersion.Unknown);\n        }\n    }\n\n    /// @notice Fetch Launchpeg data by type and version\n    /// @param _type Type of Launchpeg to consider\n    /// @param _version Launchpeg version\n    /// @param _number Number of Launchpeg to fetch\n    /// @param _limit Last Launchpeg index to fetch\n    /// @param _user Address to consider for NFT balances and allowlist allocations\n    /// @return LensDataList List of contracts datas, in descending order\n    function getLaunchpegsByTypeAndVersion(\n        LaunchpegType _type,\n        LaunchpegVersion _version,\n        uint256 _number,\n        uint256 _limit,\n        address _user\n    ) external view returns (LensData[] memory) {\n        if (_type == LaunchpegType.Unknown) {\n            revert LaunchpegLens__InvalidLaunchpegType();\n        }\n        if (_version == LaunchpegVersion.Unknown) {\n            revert LaunchpegLens__InvalidLaunchpegVersion();\n        }\n        // default to v2 unless v1 is specified\n        ILaunchpegFactory factory = (_version == LaunchpegVersion.V1)\n            ? launchpegFactoryV1\n            : launchpegFactoryV2;\n        // 0 - Launchpeg, 1 - FlatLaunchpeg, 2 - ERC1155SingleBundle\n        uint256 lpTypeIdx = uint8(_type) - 1;\n        uint256 numLaunchpegs = factory.numLaunchpegs(lpTypeIdx);\n\n        uint256 end = _limit > numLaunchpegs ? numLaunchpegs : _limit;\n        uint256 start = _number > end ? 0 : end - _number;\n\n        LensData[] memory LensDatas;\n        LensDatas = new LensData[](end - start);\n\n        for (uint256 i = 0; i < LensDatas.length; i++) {\n            LensDatas[i] = getLaunchpegData(\n                factory.allLaunchpegs(lpTypeIdx, end - 1 - i),\n                _user\n            );\n        }\n\n        return LensDatas;\n    }\n\n    /// @notice Fetch Launchpeg data from the provided address\n    /// @param _launchpeg Contract address to consider\n    /// @param _user Address to consider for NFT balances and allowlist allocations\n    /// @return LensData Contract data\n    function getLaunchpegData(\n        address _launchpeg,\n        address _user\n    ) public view returns (LensData memory) {\n        (\n            LaunchpegType launchType,\n            LaunchpegVersion launchVersion\n        ) = getLaunchpegType(_launchpeg);\n        if (launchType == LaunchpegType.Unknown) {\n            revert LaunchpegLens__InvalidContract();\n        }\n\n        LensData memory data;\n        data.id = _launchpeg;\n        data.launchType = launchType;\n        data.collectionData = _getCollectionData(_launchpeg, launchType);\n        data.projectOwnerData = _getProjectOwnerData(_launchpeg, launchVersion);\n        if (data.launchType != LaunchpegType.ERC1155SingleBundle) {\n            data.revealData = _getBatchRevealData(_launchpeg, launchVersion);\n        }\n        data.userData = _getUserData(\n            _launchpeg,\n            launchVersion,\n            launchType,\n            _user\n        );\n\n        if (data.launchType == LaunchpegType.Launchpeg) {\n            data.launchpegData = _getLaunchpegData(_launchpeg, launchVersion);\n        } else if (data.launchType == LaunchpegType.FlatLaunchpeg) {\n            data.flatLaunchpegData = _getFlatLaunchpegData(\n                _launchpeg,\n                launchVersion\n            );\n        } else if (data.launchType == LaunchpegType.ERC1155SingleBundle) {\n            data.erc1155SingleBundleData = _getERC1155SingleBundleData(\n                _launchpeg\n            );\n        }\n\n        return data;\n    }\n\n    /// @dev Fetches Launchpeg collection data\n    /// @param _launchpeg Launchpeg address\n    function _getCollectionData(\n        address _launchpeg,\n        LaunchpegType launchType\n    ) private view returns (CollectionData memory data) {\n        data.name = ERC721AUpgradeable(_launchpeg).name();\n        data.symbol = ERC721AUpgradeable(_launchpeg).symbol();\n        data.collectionSize = IBaseLaunchpeg(_launchpeg).collectionSize();\n        data.maxPerAddressDuringMint = IBaseLaunchpeg(_launchpeg)\n            .maxPerAddressDuringMint();\n\n        if (launchType != LaunchpegType.ERC1155SingleBundle) {\n            data.totalSupply = ERC721AUpgradeable(_launchpeg).totalSupply();\n            data.unrevealedURI = IBaseLaunchpeg(_launchpeg).unrevealedURI();\n            data.baseURI = IBaseLaunchpeg(_launchpeg).baseURI();\n        } else {\n            data.baseURI = ERC1155LaunchpegBase(_launchpeg).uri(0);\n        }\n    }\n\n    /// @dev Fetches Launchpeg project owner data\n    /// @param _launchpeg Launchpeg address\n    /// @param launchVersion Launchpeg version\n    function _getProjectOwnerData(\n        address _launchpeg,\n        LaunchpegVersion launchVersion\n    ) private view returns (ProjectOwnerData memory data) {\n        data.amountMintedByDevs = IBaseLaunchpeg(_launchpeg)\n            .amountMintedByDevs();\n        data.launchpegBalanceAVAX = _launchpeg.balance;\n        if (launchVersion == LaunchpegVersion.V1) {\n            address[] memory projectOwners = new address[](1);\n            projectOwners[0] = IBaseLaunchpegV1(_launchpeg).projectOwner();\n            data.projectOwners = projectOwners;\n        } else if (launchVersion == LaunchpegVersion.V2) {\n            data.projectOwners = _getProjectOwners(_launchpeg);\n            data.withdrawAVAXStartTime = IBaseLaunchpeg(_launchpeg)\n                .withdrawAVAXStartTime();\n        }\n    }\n\n    /// @dev Fetches Launchpeg project owners. Only works for Launchpeg V2.\n    /// @param _launchpeg Launchpeg address\n    function _getProjectOwners(\n        address _launchpeg\n    ) private view returns (address[] memory) {\n        bytes32 role = IBaseLaunchpeg(_launchpeg).PROJECT_OWNER_ROLE();\n        uint256 count = IAccessControlEnumerableUpgradeable(_launchpeg)\n            .getRoleMemberCount(role);\n        address[] memory projectOwners = new address[](count);\n        for (uint256 i; i < count; i++) {\n            projectOwners[i] = IAccessControlEnumerableUpgradeable(_launchpeg)\n                .getRoleMember(role, i);\n        }\n        return projectOwners;\n    }\n\n    /// @dev Fetches Launchpeg data\n    /// @param _launchpeg Launchpeg address\n    /// @param launchVersion Launchpeg version\n    function _getLaunchpegData(\n        address _launchpeg,\n        LaunchpegVersion launchVersion\n    ) private view returns (LaunchpegData memory data) {\n        ILaunchpeg lp = ILaunchpeg(_launchpeg);\n        data.currentPhase = lp.currentPhase();\n        data.amountForAuction = lp.amountForAuction();\n        data.amountForAllowlist = lp.amountForAllowlist();\n        data.amountForDevs = lp.amountForDevs();\n        data.auctionSaleStartTime = lp.auctionSaleStartTime();\n        data.allowlistStartTime = lp.allowlistStartTime();\n        data.publicSaleStartTime = lp.publicSaleStartTime();\n        data.auctionStartPrice = lp.auctionStartPrice();\n        data.auctionEndPrice = lp.auctionEndPrice();\n        data.auctionSaleDuration = lp.auctionSaleDuration();\n        data.auctionDropInterval = lp.auctionDropInterval();\n        data.auctionDropPerStep = lp.auctionDropPerStep();\n        data.allowlistDiscountPercent = lp.allowlistDiscountPercent();\n        data.publicSaleDiscountPercent = lp.publicSaleDiscountPercent();\n        data.auctionPrice = lp.getAuctionPrice(data.auctionSaleStartTime);\n        data.lastAuctionPrice = lp.lastAuctionPrice();\n        data.amountMintedDuringAuction = lp.amountMintedDuringAuction();\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\n        if (launchVersion == LaunchpegVersion.V1) {\n            data.allowlistPrice = IBaseLaunchpegV1(_launchpeg)\n                .getAllowlistPrice();\n            data.publicSalePrice = IBaseLaunchpegV1(_launchpeg)\n                .getPublicSalePrice();\n        } else if (launchVersion == LaunchpegVersion.V2) {\n            data.allowlistPrice = lp.allowlistPrice();\n            data.publicSalePrice = lp.salePrice();\n            data.preMintStartTime = lp.preMintStartTime();\n            data.publicSaleEndTime = lp.publicSaleEndTime();\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\n            data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\n        }\n    }\n\n    /// @dev Fetches FlatLaunchpeg data\n    /// @param _launchpeg Launchpeg address\n    /// @param launchVersion Launchpeg version\n    function _getFlatLaunchpegData(\n        address _launchpeg,\n        LaunchpegVersion launchVersion\n    ) private view returns (FlatLaunchpegData memory data) {\n        IFlatLaunchpeg lp = IFlatLaunchpeg(_launchpeg);\n        data.currentPhase = lp.currentPhase();\n        data.amountForAllowlist = lp.amountForAllowlist();\n        data.amountForDevs = lp.amountForDevs();\n        data.allowlistStartTime = lp.allowlistStartTime();\n        data.publicSaleStartTime = lp.publicSaleStartTime();\n        data.allowlistPrice = lp.allowlistPrice();\n        data.salePrice = lp.salePrice();\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\n        if (launchVersion == LaunchpegVersion.V2) {\n            data.preMintStartTime = lp.preMintStartTime();\n            data.publicSaleEndTime = lp.publicSaleEndTime();\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\n            data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\n        }\n    }\n\n    function _getERC1155SingleBundleData(\n        address launchpeg\n    ) private view returns (ERC1155SingleBundleData memory data) {\n        ERC1155SingleBundle lp = ERC1155SingleBundle(launchpeg);\n        data.tokenSet = lp.tokenSet();\n        data.currentPhase = IBaseLaunchpeg.Phase(uint8(lp.currentPhase()));\n        data.amountForAllowlist = lp.amountForPreMint();\n        data.amountForDevs = lp.amountForDevs();\n        data.preMintStartTime = lp.preMintStartTime();\n        data.publicSaleStartTime = lp.publicSaleStartTime();\n        data.publicSaleEndTime = lp.publicSaleEndTime();\n        data.allowlistPrice = lp.preMintPrice();\n        data.salePrice = lp.publicSalePrice();\n        data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\n        data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\n        data.amountMintedDuringAllowlist = 0;\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\n    }\n\n    /// @dev Fetches batch reveal data\n    /// @param _launchpeg Launchpeg address\n    /// @param launchVersion Launchpeg version\n    function _getBatchRevealData(\n        address _launchpeg,\n        LaunchpegVersion launchVersion\n    ) private view returns (RevealData memory data) {\n        if (launchVersion == LaunchpegVersion.V1) {\n            IBaseLaunchpegV1 br = IBaseLaunchpegV1(_launchpeg);\n            data.revealBatchSize = br.revealBatchSize();\n            data.revealStartTime = br.revealStartTime();\n            data.revealInterval = br.revealInterval();\n            data.lastTokenRevealed = br.lastTokenRevealed();\n        } else if (launchVersion == LaunchpegVersion.V2) {\n            (\n                ,\n                ,\n                uint256 revealBatchSize,\n                uint256 revealStartTime,\n                uint256 revealInterval\n            ) = IBatchReveal(batchReveal).launchpegToConfig(_launchpeg);\n            data.revealBatchSize = revealBatchSize;\n            data.revealStartTime = revealStartTime;\n            data.revealInterval = revealInterval;\n            data.lastTokenRevealed = IBatchReveal(batchReveal)\n                .launchpegToLastTokenReveal(_launchpeg);\n        }\n    }\n\n    /// @dev Fetches Launchpeg user data\n    /// @param _launchpeg Launchpeg address\n    /// @param launchVersion Launchpeg version\n    function _getUserData(\n        address _launchpeg,\n        LaunchpegVersion launchVersion,\n        LaunchpegType launchType,\n        address _user\n    ) private view returns (UserData memory data) {\n        if (_user != address(0)) {\n            data.numberMinted = IBaseLaunchpeg(_launchpeg).numberMinted(_user);\n            data.allowanceForAllowlistMint = IBaseLaunchpeg(_launchpeg)\n                .allowlist(_user);\n            if (launchVersion == LaunchpegVersion.V2) {\n                data.numberMintedWithPreMint = IBaseLaunchpeg(_launchpeg)\n                    .numberMintedWithPreMint(_user);\n            }\n\n            if (launchType == LaunchpegType.ERC1155SingleBundle) {\n                data.balanceOf = ERC1155SingleBundle(_launchpeg).balanceOf(\n                    _user,\n                    ERC1155SingleBundle(_launchpeg).tokenSet()[0]\n                );\n            } else {\n                data.balanceOf = ERC721AUpgradeable(_launchpeg).balanceOf(\n                    _user\n                );\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockPendingOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../utils/PendingOwnableUpgradeable.sol\";\n\n/// @title Mock contract using `PendingOwnableUpgradeable`\n/// @author Trader Joe\ncontract MockPendingOwnableUpgradeable is\n    Initializable,\n    PendingOwnableUpgradeable\n{\n    function initialize() public initializer {\n        __PendingOwnable_init();\n    }\n}\n"
    },
    "contracts/mocks/MockSafeAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../utils/SafeAccessControlEnumerableUpgradeable.sol\";\n\n/// @title Mock contract using `SafeAccessControlEnumerableUpgradeable`\n/// @author Trader Joe\ncontract MockSafeAccessControlEnumerableUpgradeable is\n    SafeAccessControlEnumerableUpgradeable\n{\n    function initialize() external initializer {\n        __SafeAccessControlEnumerable_init();\n    }\n\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external onlyOwner {\n        _setRoleAdmin(role, adminRole);\n    }\n}\n"
    },
    "contracts/mocks/MockSafePausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../utils/SafePausableUpgradeable.sol\";\n\n/// @title Mock contract using `SafePausableUpgradeable`\n/// @author Trader Joe\ncontract MockSafePausableUpgradeable is SafePausableUpgradeable {\n    uint256 shh;\n\n    function initialize() external initializer {\n        __SafePausable_init();\n    }\n\n    function pausableFunction() external whenNotPaused {\n        shh = shh;\n    }\n\n    function doSomething() external {\n        shh = shh;\n    }\n}\n"
    },
    "contracts/utils/PendingOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IPendingOwnableUpgradeable.sol\";\nimport \"../LaunchpegErrors.sol\";\n\n/**\n * @title Pending Ownable\n * @author Trader Joe\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions. The ownership of this contract is transferred using the\n * push and pull pattern, the current owner set a `pendingOwner` using\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\n * Ownable contract.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {setPendingOwner} and {becomeOwner}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner\n */\nabstract contract PendingOwnableUpgradeable is\n    Initializable,\n    ERC165Upgradeable,\n    IPendingOwnableUpgradeable\n{\n    address private _owner;\n    address private _pendingOwner;\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        if (msg.sender != _owner) revert PendingOwnableUpgradeable__NotOwner();\n        _;\n    }\n\n    /**\n     * @notice Throws if called by any account other than the pending owner.\n     */\n    modifier onlyPendingOwner() {\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\n            revert PendingOwnableUpgradeable__NotPendingOwner();\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\n     */\n    function __PendingOwnable_init() internal onlyInitializing {\n        __ERC165_init();\n        __PendingOwnable_init_unchained();\n    }\n\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Returns the address of the current owner\n     * @return The address of the current owner\n     */\n    function owner() public view virtual override returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Returns the address of the current pending owner\n     * @return The address of the current pending owner\n     */\n    function pendingOwner() public view virtual override returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @notice Sets the pending owner address. This address will be able to become\n     * the owner of this contract by calling {becomeOwner}\n     */\n    function setPendingOwner(address pendingOwner_)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        if (pendingOwner_ == address(0))\n            revert PendingOwnableUpgradeable__AddressZero();\n        if (_pendingOwner != address(0))\n            revert PendingOwnableUpgradeable__PendingOwnerAlreadySet();\n        _setPendingOwner(pendingOwner_);\n    }\n\n    /**\n     * @notice Revoke the pending owner address. This address will not be able to\n     * call {becomeOwner} to become the owner anymore.\n     * Can only be called by the owner\n     */\n    function revokePendingOwner() public virtual override onlyOwner {\n        if (_pendingOwner == address(0))\n            revert PendingOwnableUpgradeable__NoPendingOwner();\n        _setPendingOwner(address(0));\n    }\n\n    /**\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\n     * Can only be called by the pending owner\n     */\n    function becomeOwner() public virtual override onlyPendingOwner {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual override onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     * @param _newOwner The address of the new owner\n     */\n    function _transferOwnership(address _newOwner) internal virtual {\n        address _oldOwner = _owner;\n        _owner = _newOwner;\n        _pendingOwner = address(0);\n        emit OwnershipTransferred(_oldOwner, _newOwner);\n    }\n\n    /**\n     * @notice Push the new owner, it needs to be pulled to be effective.\n     * Internal function without access restriction.\n     * @param pendingOwner_ The address of the new pending owner\n     */\n    function _setPendingOwner(address pendingOwner_) internal virtual {\n        _pendingOwner = pendingOwner_;\n        emit PendingOwnerSet(pendingOwner_);\n    }\n}\n"
    },
    "contracts/utils/SafeAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\n\nimport \"../LaunchpegErrors.sol\";\nimport \"./PendingOwnableUpgradeable.sol\";\n\nabstract contract SafeAccessControlEnumerableUpgradeable is\n    PendingOwnableUpgradeable,\n    AccessControlEnumerableUpgradeable\n{\n    /**\n     * @dev Modifier that checks that the role is not the `DEFAULT_ADMIN_ROLE`\n     */\n    modifier roleIsNotDefaultAdmin(bytes32 role) {\n        if (role == DEFAULT_ADMIN_ROLE)\n            revert SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks that an account is the `owner` or has a specific role\n     */\n    modifier onlyOwnerOrRole(bytes32 role) {\n        if (msg.sender != owner() && !hasRole(role, msg.sender))\n            revert SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\n                role,\n                msg.sender\n            );\n        _;\n    }\n\n    function __SafeAccessControlEnumerable_init() internal onlyInitializing {\n        __PendingOwnable_init();\n        __AccessControlEnumerable_init();\n\n        __SafeAccessControlEnumerable_init_unchained();\n    }\n\n    function __SafeAccessControlEnumerable_init_unchained()\n        internal\n        onlyInitializing\n    {}\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(PendingOwnableUpgradeable, AccessControlEnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            PendingOwnableUpgradeable.supportsInterface(interfaceId) ||\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Grants `role` to `account`.\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the `owner` or have ``role``'s admin role.\n     * - the role granted can't be `DEFAULT_ADMIN`\n     *\n     * @param role The role to grant\n     * @param account The address of the account\n     */\n    function grantRole(bytes32 role, address account)\n        public\n        virtual\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\n        roleIsNotDefaultAdmin(role)\n        onlyOwnerOrRole(getRoleAdmin(role))\n    {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @notice Revokes `role` from `account`.\n     * @dev If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the `owner` or have ``role``'s admin role.\n     * - the role revoked can't be `DEFAULT_ADMIN`\n     *\n     * @param role The role to revoke\n     * @param account The address of the account\n     */\n    function revokeRole(bytes32 role, address account)\n        public\n        virtual\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\n        roleIsNotDefaultAdmin(role)\n        onlyOwnerOrRole(getRoleAdmin(role))\n    {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @notice Revokes `role` from the calling account.\n     *\n     * @dev Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     * - the role renounced can't be `DEFAULT_ADMIN`\n     *\n     * @param role The role to renounce\n     * @param account The address of the account\n     */\n    function renounceRole(bytes32 role, address account)\n        public\n        virtual\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\n        roleIsNotDefaultAdmin(role)\n    {\n        super.renounceRole(role, account);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     * @dev This also transfer the `DEFAULT_ADMIN` role to the new owner\n     * @param _newOwner The address of the new owner\n     */\n    function _transferOwnership(address _newOwner) internal virtual override {\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\n        if (_newOwner != address(0)) _grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\n\n        super._transferOwnership(_newOwner);\n    }\n}\n"
    },
    "contracts/utils/SafePausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport \"../LaunchpegErrors.sol\";\nimport \"../interfaces/ISafePausableUpgradeable.sol\";\nimport \"./SafeAccessControlEnumerableUpgradeable.sol\";\n\nabstract contract SafePausableUpgradeable is\n    SafeAccessControlEnumerableUpgradeable,\n    PausableUpgradeable,\n    ISafePausableUpgradeable\n{\n    bytes32 public constant override PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant override UNPAUSER_ROLE = keccak256(\"UNPAUSER_ROLE\");\n\n    bytes32 public constant override PAUSER_ADMIN_ROLE =\n        keccak256(\"PAUSER_ADMIN_ROLE\");\n    bytes32 public constant override UNPAUSER_ADMIN_ROLE =\n        keccak256(\"UNPAUSER_ADMIN_ROLE\");\n\n    function __SafePausable_init() internal onlyInitializing {\n        __SafeAccessControlEnumerable_init();\n        __Pausable_init();\n\n        __SafePausable_init_unchained();\n    }\n\n    function __SafePausable_init_unchained() internal onlyInitializing {\n        _setRoleAdmin(PAUSER_ROLE, PAUSER_ADMIN_ROLE);\n        _setRoleAdmin(UNPAUSER_ROLE, UNPAUSER_ADMIN_ROLE);\n    }\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(SafeAccessControlEnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(ISafePausableUpgradeable).interfaceId ||\n            SafeAccessControlEnumerableUpgradeable.supportsInterface(\n                interfaceId\n            );\n    }\n\n    /**\n     * @notice Pauses the contract.\n     * @dev Sensible part of a contract might be pausable for security reasons.\n     *\n     * Requirements:\n     * - the caller must be the `owner` or have the ``role`` role.\n     * - the contrat needs to be unpaused.\n     */\n    function pause() public virtual override onlyOwnerOrRole(PAUSER_ROLE) {\n        if (paused()) revert SafePausableUpgradeable__AlreadyPaused();\n        _pause();\n    }\n\n    /**\n     * @notice Unpauses the contract.\n     * @dev Sensible part of a contract might be pausable for security reasons.\n     *\n     * Requirements:\n     * - the caller must be the `owner` or have the ``role`` role.\n     * - the contrat needs to be unpaused.\n     */\n    function unpause() public virtual override onlyOwnerOrRole(UNPAUSER_ROLE) {\n        if (!paused()) revert SafePausableUpgradeable__AlreadyUnpaused();\n        _unpause();\n    }\n}\n"
    },
    "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 60
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}