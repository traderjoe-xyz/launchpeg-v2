{
  "address": "0xf0bc7e4E8e8e4512d30aBBEc7C00F76aED9e1709",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "_launchpegFactoryV1",
          "type": "address"
        },
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "_launchpegFactoryV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidLaunchpegType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidLaunchpegVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPerAddressDuringMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMintedWithPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "projectOwners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedByDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawAVAXStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "launchpegBalanceAVAX",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ProjectOwnerData",
              "name": "projectOwnerData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenSet",
                  "type": "uint256[]"
                },
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ERC1155SingleBundleData",
              "name": "erc1155SingleBundleData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "getLaunchpegType",
      "outputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "enum LaunchpegLens.LaunchpegVersion",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "enum LaunchpegLens.LaunchpegVersion",
          "name": "_version",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegsByTypeAndVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPerAddressDuringMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMintedWithPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "projectOwners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedByDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawAVAXStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "launchpegBalanceAVAX",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ProjectOwnerData",
              "name": "projectOwnerData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenSet",
                  "type": "uint256[]"
                },
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ERC1155SingleBundleData",
              "name": "erc1155SingleBundleData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactoryV1",
      "outputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactoryV2",
      "outputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1acb8480590df7700c6e2b3eff2d12ba685a1f9b544ddcf0ba3e1a4c734431e2",
  "receipt": {
    "to": null,
    "from": "0x1119fbb02F38764CD90F2d9fB35FeDcd8378ac2A",
    "contractAddress": "0xf0bc7e4E8e8e4512d30aBBEc7C00F76aED9e1709",
    "transactionIndex": 0,
    "gasUsed": "3261286",
    "logsBloom": "0x
    "blockHash": "0x67855efa6a902df6cc86fc778b48501635897687daa19b2799778cf339a1fea0",
    "transactionHash": "0x1acb8480590df7700c6e2b3eff2d12ba685a1f9b544ddcf0ba3e1a4c734431e2",
    "logs": [],
    "blockNumber": 20693713,
    "cumulativeGasUsed": "3261286",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0E88dFA65aF47A4e6Dbda59F2b7A27f06557D833",
    "0x1DA51332C1Ca1F3FD4cdE8A7760649bd0C8052F4",
    "0x55Be138160b53e0D1130fb33556ae360fD625bDe"
  ],
  "numDeployments": 16,
  "solcInputHash": "636ece146a9097d66846abcb58e1ef2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"_launchpegFactoryV1\",\"type\":\"address\"},{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"_launchpegFactoryV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidLaunchpegType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidLaunchpegVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMintedWithPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"projectOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedByDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchpegBalanceAVAX\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ProjectOwnerData\",\"name\":\"projectOwnerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenSet\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ERC1155SingleBundleData\",\"name\":\"erc1155SingleBundleData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getLaunchpegType\",\"outputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegVersion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegVersion\",\"name\":\"_version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegsByTypeAndVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMintedWithPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"projectOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedByDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchpegBalanceAVAX\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ProjectOwnerData\",\"name\":\"projectOwnerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenSet\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ERC1155SingleBundleData\",\"name\":\"erc1155SingleBundleData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactoryV1\",\"outputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactoryV2\",\"outputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"LaunchpegLens constructor\",\"params\":{\"_batchReveal\":\"BatchReveal address\",\"_launchpegFactoryV1\":\"LaunchpegFactory V1\",\"_launchpegFactoryV2\":\"LaunchpegFactory V2\"}},\"getLaunchpegData(address,address)\":{\"params\":{\"_launchpeg\":\"Contract address to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\"},\"returns\":{\"_0\":\"LensData Contract data\"}},\"getLaunchpegType(address)\":{\"params\":{\"_contract\":\"Contract address to consider\"},\"returns\":{\"_0\":\"LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\"}},\"getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)\":{\"params\":{\"_limit\":\"Last Launchpeg index to fetch\",\"_number\":\"Number of Launchpeg to fetch\",\"_type\":\"Type of Launchpeg to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\",\"_version\":\"Launchpeg version\"},\"returns\":{\"_0\":\"LensDataList List of contracts datas, in descending order\"}}},\"title\":\"Launchpeg Lens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchReveal()\":{\"notice\":\"BatchReveal address\"},\"getLaunchpegData(address,address)\":{\"notice\":\"Fetch Launchpeg data from the provided address\"},\"getLaunchpegType(address)\":{\"notice\":\"Gets the type and version of Launchpeg\"},\"getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)\":{\"notice\":\"Fetch Launchpeg data by type and version\"},\"launchpegFactoryV1()\":{\"notice\":\"LaunchpegFactory V1\"},\"launchpegFactoryV2()\":{\"notice\":\"LaunchpegFactory V2\"}},\"notice\":\"Helper contract to fetch launchpegs data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpegLens.sol\":\"LaunchpegLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":60},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/ERC1155LaunchpegBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {ERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {ERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport {SafePausableUpgradeable} from \\\"./utils/SafePausableUpgradeable.sol\\\";\\n\\nimport {IERC1155LaunchpegBase} from \\\"./interfaces/IERC1155LaunchpegBase.sol\\\";\\n\\nabstract contract ERC1155LaunchpegBase is\\n    IERC1155LaunchpegBase,\\n    ERC1155Upgradeable,\\n    ERC2981Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    SafePausableUpgradeable\\n{\\n    using StringsUpgradeable for uint256;\\n\\n    /// @notice Percentage base point\\n    uint256 private constant BASIS_POINT_PRECISION = 10_000;\\n\\n    /// @notice Role granted to project owners\\n    bytes32 public constant PROJECT_OWNER_ROLE =\\n        keccak256(\\\"PROJECT_OWNER_ROLE\\\");\\n\\n    /**\\n     * @dev OpenSea's filter registry and subscription address\\n     */\\n    address private constant OPENSEA_FILTER_REGISTRY =\\n        0x000000000000AAeB6D7670E522A718067333cd4E;\\n    address private constant OPENSEA_SUBSCRIPTION =\\n        0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\\n    /// @notice Contract filtering allowed operators, preventing unauthorized contract to transfer NFTs\\n    /// By default, Launchpeg contracts are subscribed to OpenSea's Curated Subscription Address at 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    /// @notice The fees collected by Joepegs on the sale benefits\\n    /// @dev In basis points e.g 100 for 1%\\n    uint256 public joeFeePercent;\\n\\n    /// @notice The address to which the fees on the sale will be sent\\n    address public joeFeeCollector;\\n\\n    /// @notice Start time when funds can be withdrawn\\n    uint256 public withdrawAVAXStartTime;\\n\\n    /// @notice This boolean can be turned on to prevent any changes on the sale parameters.\\n    /// @dev Once set to true, it shouldn't be possible to turn it back to false.\\n    bool public locked;\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    struct InitData {\\n        address owner;\\n        address royaltyReceiver;\\n        uint256 joeFeePercent;\\n        string collectionName;\\n        string collectionSymbol;\\n    }\\n\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    /// @dev Emitted on updateOperatorFilterRegistryAddress()\\n    /// @param operatorFilterRegistry New operator filter registry\\n    event OperatorFilterRegistryUpdated(address operatorFilterRegistry);\\n\\n    /// @dev Emitted on _setDefaultRoyalty()\\n    /// @param receiver Royalty fee collector\\n    /// @param feePercent Royalty fee percent in basis point\\n    event DefaultRoyaltySet(address indexed receiver, uint256 feePercent);\\n\\n    /// @dev Emitted on setWithdrawAVAXStartTime()\\n    /// @param withdrawAVAXStartTime New withdraw AVAX start time\\n    event WithdrawAVAXStartTimeSet(uint256 withdrawAVAXStartTime);\\n\\n    /// @dev Emitted on initializeJoeFee()\\n    /// @param feePercent The fees collected by Joepegs on the sale benefits\\n    /// @param feeCollector The address to which the fees on the sale will be sent\\n    event JoeFeeInitialized(uint256 feePercent, address feeCollector);\\n\\n    /// @dev Emitted on withdrawAVAX()\\n    /// @param sender The address that withdrew the tokens\\n    /// @param amount Amount of AVAX transfered to `sender`\\n    /// @param fee Amount of AVAX paid to the fee collector\\n    event AvaxWithdraw(address indexed sender, uint256 amount, uint256 fee);\\n\\n    /// @dev Emitted on setURI()\\n    /// @param uri The new base URI\\n    event URISet(string uri);\\n\\n    event SaleParametersLocked();\\n\\n    /// @notice Allow spending tokens from addresses with balance\\n    /// Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n    /// from an EOA.\\n    modifier onlyAllowedOperator(address from) virtual {\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Allow approving tokens transfers\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    modifier contractNotLocked() {\\n        if (locked) {\\n            revert Launchpeg__SaleParametersLocked();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the current phase matches the required phase\\n    modifier atPhase(Phase phase) {\\n        if (currentPhase() != phase) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n        _;\\n    }\\n\\n    function __ERC1155LaunchpegBase_init(\\n        InitData calldata initData\\n    ) internal onlyInitializing {\\n        __ERC1155_init(\\\"\\\");\\n        __ERC2981_init();\\n        __ReentrancyGuard_init();\\n        __SafeAccessControlEnumerable_init();\\n\\n        // Default royalty is 5%\\n        _setDefaultRoyalty(initData.royaltyReceiver, 500);\\n\\n        // Initialize the operator filter registry and subscribe to OpenSea's list\\n        IOperatorFilterRegistry _operatorFilterRegistry = IOperatorFilterRegistry(\\n                OPENSEA_FILTER_REGISTRY\\n            );\\n\\n        if (address(_operatorFilterRegistry).code.length > 0) {\\n            _operatorFilterRegistry.registerAndSubscribe(\\n                address(this),\\n                OPENSEA_SUBSCRIPTION\\n            );\\n        }\\n\\n        _updateOperatorFilterRegistryAddress(_operatorFilterRegistry);\\n\\n        name = initData.collectionName;\\n        symbol = initData.collectionSymbol;\\n\\n        _initializeJoeFee(initData.joeFeePercent, initData.owner);\\n\\n        grantRole(PROJECT_OWNER_ROLE, initData.royaltyReceiver);\\n        _transferOwnership(initData.owner);\\n    }\\n\\n    /// @notice Returns the current phase\\n    /// @return phase Current phase\\n    function currentPhase() public view virtual returns (Phase);\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(\\n            SafePausableUpgradeable,\\n            ERC1155Upgradeable,\\n            ERC2981Upgradeable\\n        )\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155LaunchpegBase).interfaceId ||\\n            ERC1155Upgradeable.supportsInterface(interfaceId) ||\\n            ERC2981Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Set the base URI\\n    /// @dev This sets the URI for revealed tokens\\n    /// Only callable by project owner\\n    /// @param newURI Base URI to be set\\n    function setURI(string calldata newURI) external onlyOwner {\\n        _setURI(newURI);\\n        emit URISet(newURI);\\n    }\\n\\n    /// @notice Set the withdraw AVAX start time.\\n    /// @param newWithdrawAVAXStartTime New public sale end time\\n    function setWithdrawAVAXStartTime(\\n        uint256 newWithdrawAVAXStartTime\\n    ) external onlyOwner {\\n        withdrawAVAXStartTime = newWithdrawAVAXStartTime;\\n        emit WithdrawAVAXStartTimeSet(newWithdrawAVAXStartTime);\\n    }\\n\\n    function setRoyaltyInfo(\\n        address receiver,\\n        uint96 feePercent\\n    ) external onlyOwner {\\n        // Royalty fees are limited to 25%\\n        if (feePercent > 2_500) {\\n            revert Launchpeg__InvalidRoyaltyInfo();\\n        }\\n        _setDefaultRoyalty(receiver, feePercent);\\n        emit DefaultRoyaltySet(receiver, feePercent);\\n    }\\n\\n    /// @notice Set the operator filter registry address\\n    /// @param newOperatorFilterRegistry New operator filter registry\\n    function setOperatorFilterRegistryAddress(\\n        address newOperatorFilterRegistry\\n    ) external onlyOwner {\\n        _updateOperatorFilterRegistryAddress(\\n            IOperatorFilterRegistry(newOperatorFilterRegistry)\\n        );\\n    }\\n\\n    function lockSaleParameters() external onlyOwner contractNotLocked {\\n        locked = true;\\n\\n        emit SaleParametersLocked();\\n    }\\n\\n    /// @notice Withdraw AVAX to the given recipient\\n    /// @param to Recipient of the earned AVAX\\n    function withdrawAVAX(\\n        address to\\n    ) external onlyOwnerOrRole(PROJECT_OWNER_ROLE) nonReentrant {\\n        if (\\n            block.timestamp < withdrawAVAXStartTime ||\\n            withdrawAVAXStartTime == 0\\n        ) {\\n            revert Launchpeg__WithdrawAVAXNotAvailable();\\n        }\\n\\n        uint256 amount = address(this).balance;\\n        uint256 fee;\\n        uint256 feePercent = joeFeePercent;\\n\\n        if (feePercent > 0) {\\n            fee = (amount * feePercent) / BASIS_POINT_PRECISION;\\n            amount = amount - fee;\\n\\n            _send(joeFeeCollector, fee);\\n        }\\n\\n        _send(to, amount);\\n\\n        emit AvaxWithdraw(to, amount, fee);\\n    }\\n\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override onlyAllowedOperator(from) {\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /// @notice Initialize the sales fee percent taken by Joepegs and address that collects the fees\\n    /// @param newJoeFeePercent The fees collected by Joepegs on the sale benefits\\n    /// @param newJoeFeeCollector The address to which the fees on the sale will be sent\\n    function _initializeJoeFee(\\n        uint256 newJoeFeePercent,\\n        address newJoeFeeCollector\\n    ) internal {\\n        if (newJoeFeePercent > BASIS_POINT_PRECISION) {\\n            revert Launchpeg__InvalidPercent();\\n        }\\n        if (newJoeFeeCollector == address(0)) {\\n            revert Launchpeg__InvalidJoeFeeCollector();\\n        }\\n        joeFeePercent = newJoeFeePercent;\\n        joeFeeCollector = newJoeFeeCollector;\\n        emit JoeFeeInitialized(newJoeFeePercent, newJoeFeeCollector);\\n    }\\n\\n    /**\\n     * @dev Update the address that the contract will make OperatorFilter checks against. When set to the zero\\n     * address, checks will be bypassed.\\n     * @param newRegistry The address of the new OperatorFilterRegistry\\n     */\\n    function _updateOperatorFilterRegistryAddress(\\n        IOperatorFilterRegistry newRegistry\\n    ) private {\\n        operatorFilterRegistry = newRegistry;\\n        emit OperatorFilterRegistryUpdated(address(newRegistry));\\n    }\\n\\n    /// @dev Checks if the address (the operator) trying to transfer the NFT is allowed\\n    /// @param operator Address of the operator\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(registry).code.length > 0) {\\n            if (!registry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends AVAX to the given address\\n     * @param to Address to send AVAX to\\n     * @param amount Amount of AVAX to send\\n     */\\n    function _send(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Launchpeg__TransferFailed();\\n        }\\n    }\\n\\n    /// @dev Verifies that enough AVAX has been sent by the sender and refunds the extra tokens if any\\n    /// @param price The price paid by the sender for minting NFTs\\n    function _refundIfOver(uint256 price) internal {\\n        if (msg.value < price) {\\n            revert Launchpeg__NotEnoughAVAX(msg.value);\\n        }\\n        if (msg.value > price) {\\n            (bool success, ) = msg.sender.call{value: msg.value - price}(\\\"\\\");\\n            if (!success) {\\n                revert Launchpeg__TransferFailed();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b621055d30d12a31cc4e1b182e6bfaf935ea1c6997128d82aace473ca5581ea\",\"license\":\"MIT\"},\"contracts/ERC1155SingleBundle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./LaunchpegErrors.sol\\\";\\nimport {ERC1155LaunchpegBase} from \\\"./ERC1155LaunchpegBase.sol\\\";\\nimport {IERC1155LaunchpegSingleBundle} from \\\"./interfaces/IERC1155LaunchpegSingleBundle.sol\\\";\\n\\ncontract ERC1155SingleBundle is\\n    IERC1155LaunchpegSingleBundle,\\n    ERC1155LaunchpegBase\\n{\\n    using SafeCast for uint256;\\n\\n    struct PreMintData {\\n        address sender;\\n        uint96 quantity;\\n    }\\n\\n    struct PreMintDataSet {\\n        PreMintData[] preMintDataArr;\\n        mapping(address => uint256) indexes;\\n    }\\n\\n    uint128 public collectionSize;\\n    uint128 public maxPerAddressDuringMint;\\n\\n    uint128 public amountForDevs;\\n    uint128 public amountMintedByDevs;\\n\\n    uint128 public preMintPrice;\\n    uint128 public preMintStartTime;\\n\\n    uint128 public amountForPreMint;\\n    uint128 public amountMintedDuringPreMint;\\n    uint256 public amountClaimedDuringPreMint;\\n\\n    uint128 public publicSalePrice;\\n    uint128 public publicSaleStartTime;\\n    uint128 public publicSaleEndTime;\\n    uint128 public amountMintedDuringPublicSale;\\n\\n    mapping(address => uint256) public allowlist;\\n    mapping(address => uint256) public numberMinted;\\n\\n    uint256[] private _tokenSet;\\n    PreMintDataSet private _pendingPreMints;\\n\\n    event AllowlistSeeded();\\n    event PreMintStartTimeSet(uint256 preMintStartTime);\\n    event PublicSaleStartTimeSet(uint256 publicSaleStartTime);\\n    event PublicSaleEndTimeSet(uint256 publicSaleEndTime);\\n    event AmountForDevsSet(uint256 amountForDevs);\\n    event AmountForPreMintSet(uint256 amountForPreMint);\\n    event PreMintPriceSet(uint256 preMintPrice);\\n    event PublicSalePriceSet(uint256 publicSalePrice);\\n    event MaxPerAddressDuringMintSet(uint256 maxPerAddressDuringMint);\\n    event CollectionSizeSet(uint256 collectionSize);\\n    event PhaseInitialized(\\n        uint256 preMintStartTime,\\n        uint256 publicSaleStartTime,\\n        uint256 publicSaleEndTime,\\n        uint256 preMintPrice,\\n        uint256 salePrice,\\n        uint256 withdrawAVAXStartTime\\n    );\\n    event DevMint(address indexed sender, uint256 quantity);\\n    event PreMint(address indexed sender, uint256 quantity, uint256 price);\\n    event TokenSetUpdated(uint256[] tokenSet);\\n\\n    modifier isEOA() {\\n        if (tx.origin != msg.sender) {\\n            revert Launchpeg__Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        InitData calldata initData,\\n        uint256 initialMaxSupply,\\n        uint256 initialAmountForDevs,\\n        uint256 initialAmountForPreMint,\\n        uint256 initialMaxPerAddressDuringMint,\\n        uint256[] calldata initialTokenSet\\n    ) external initializer {\\n        __ERC1155LaunchpegBase_init(initData);\\n\\n        if (amountForDevs + amountForPreMint > initialMaxSupply) {\\n            revert Launchpeg__LargerCollectionSizeNeeded();\\n        }\\n\\n        collectionSize = initialMaxSupply.toUint128();\\n        maxPerAddressDuringMint = initialMaxPerAddressDuringMint.toUint128();\\n\\n        amountForDevs = initialAmountForDevs.toUint128();\\n        amountForPreMint = initialAmountForPreMint.toUint128();\\n        _tokenSet = initialTokenSet;\\n    }\\n\\n    function initializePhases(\\n        uint256 initialPreMintStartTime,\\n        uint256 initialPublicSaleStartTime,\\n        uint256 initialPublicSaleEndTime,\\n        uint256 initialPreMintPrice,\\n        uint256 initialPublicSalePrice\\n    ) external onlyOwner atPhase(Phase.NotStarted) {\\n        if (\\n            initialPreMintStartTime < block.timestamp ||\\n            initialPublicSaleStartTime < initialPreMintStartTime ||\\n            initialPublicSaleEndTime < initialPublicSaleStartTime\\n        ) {\\n            revert Launchpeg__InvalidPhases();\\n        }\\n\\n        if (initialPreMintPrice > initialPublicSalePrice) {\\n            revert Launchpeg__InvalidAllowlistPrice();\\n        }\\n\\n        preMintPrice = initialPreMintPrice.toUint128();\\n        publicSalePrice = initialPublicSalePrice.toUint128();\\n        preMintStartTime = initialPreMintStartTime.toUint128();\\n\\n        publicSaleStartTime = initialPublicSaleStartTime.toUint128();\\n        publicSaleEndTime = initialPublicSaleEndTime.toUint128();\\n\\n        withdrawAVAXStartTime = initialPublicSaleStartTime + 3 days;\\n\\n        emit PhaseInitialized(\\n            preMintStartTime,\\n            publicSaleStartTime,\\n            publicSaleEndTime,\\n            initialPreMintPrice,\\n            initialPublicSalePrice,\\n            initialPublicSaleStartTime + 3 days\\n        );\\n    }\\n\\n    function tokenSet() external view returns (uint256[] memory) {\\n        return _tokenSet;\\n    }\\n\\n    function currentPhase() public view override returns (Phase) {\\n        if (\\n            preMintStartTime == 0 ||\\n            publicSaleStartTime == 0 ||\\n            publicSaleEndTime == 0 ||\\n            block.timestamp < preMintStartTime\\n        ) {\\n            return Phase.NotStarted;\\n        } else if (\\n            amountMintedDuringPreMint + amountMintedDuringPublicSale ==\\n            collectionSize\\n        ) {\\n            return Phase.Ended;\\n        } else if (\\n            block.timestamp >= preMintStartTime &&\\n            block.timestamp < publicSaleStartTime\\n        ) {\\n            return Phase.PreMint;\\n        } else if (\\n            block.timestamp >= publicSaleStartTime &&\\n            block.timestamp < publicSaleEndTime\\n        ) {\\n            return Phase.PublicSale;\\n        }\\n        return Phase.Ended;\\n    }\\n\\n    function amountOfUsersWaitingForPremintClaim()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _pendingPreMints.preMintDataArr.length;\\n    }\\n\\n    function userPendingPreMints(address user) public view returns (uint256) {\\n        uint256 userIndex = _pendingPreMints.indexes[user];\\n\\n        if (userIndex == 0) {\\n            return 0;\\n        }\\n\\n        return _pendingPreMints.preMintDataArr[userIndex - 1].quantity;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override returns (bool) {\\n        return\\n            interfaceId == type(IERC1155LaunchpegSingleBundle).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function devMint(\\n        uint256 amount\\n    ) external whenNotPaused onlyOwnerOrRole(PROJECT_OWNER_ROLE) nonReentrant {\\n        uint256 amountAlreadyMinted = amountMintedByDevs;\\n\\n        if (amountAlreadyMinted + amount > amountForDevs)\\n            revert Launchpeg__MaxSupplyForDevReached();\\n\\n        amountMintedByDevs = (amountAlreadyMinted + amount).toUint128();\\n\\n        _mint(msg.sender, amount);\\n\\n        emit DevMint(msg.sender, amount);\\n    }\\n\\n    function preMint(\\n        uint96 amount\\n    ) external payable whenNotPaused atPhase(Phase.PreMint) nonReentrant {\\n        if (amount == 0) {\\n            revert Launchpeg__InvalidQuantity();\\n        }\\n\\n        uint256 userAllowlistAmount = allowlist[msg.sender];\\n        if (amount > userAllowlistAmount) {\\n            revert Launchpeg__NotEligibleForAllowlistMint();\\n        }\\n\\n        uint256 amountAlreadyPreMinted = amountMintedDuringPreMint;\\n        if (amountAlreadyPreMinted + amount > amountForPreMint) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n\\n        PreMintDataSet storage pmDataSet = _pendingPreMints;\\n        uint256 userIndex = pmDataSet.indexes[msg.sender];\\n\\n        if (userIndex != 0) {\\n            pmDataSet.preMintDataArr[userIndex - 1].quantity += amount;\\n        } else {\\n            PreMintData memory preMintData = PreMintData({\\n                sender: msg.sender,\\n                quantity: amount\\n            });\\n            pmDataSet.preMintDataArr.push(preMintData);\\n            pmDataSet.indexes[msg.sender] = pmDataSet.preMintDataArr.length;\\n        }\\n\\n        amountMintedDuringPreMint = (amountAlreadyPreMinted + amount)\\n            .toUint128();\\n        allowlist[msg.sender] = userAllowlistAmount - amount;\\n\\n        uint256 totalPrice = uint256(preMintPrice) * uint256(amount);\\n        _refundIfOver(totalPrice);\\n\\n        emit PreMint(msg.sender, amount, totalPrice);\\n    }\\n\\n    function claimPremint() external whenNotPaused nonReentrant {\\n        if (block.timestamp < publicSaleStartTime) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n\\n        PreMintDataSet storage pmDataSet = _pendingPreMints;\\n\\n        uint96 preMintQuantity;\\n        uint256 userIndex = pmDataSet.indexes[msg.sender];\\n\\n        if (userIndex != 0)\\n            preMintQuantity = pmDataSet.preMintDataArr[userIndex - 1].quantity;\\n\\n        if (preMintQuantity != 0) {\\n            uint256 lastIndex = pmDataSet.preMintDataArr.length - 1;\\n            if (lastIndex != userIndex - 1) {\\n                PreMintData memory lastPreMintData = pmDataSet.preMintDataArr[\\n                    lastIndex\\n                ];\\n                pmDataSet.preMintDataArr[userIndex - 1] = lastPreMintData;\\n                pmDataSet.indexes[lastPreMintData.sender] = userIndex;\\n            }\\n            pmDataSet.preMintDataArr.pop();\\n            delete pmDataSet.indexes[msg.sender];\\n        } else {\\n            revert Launchpeg__InvalidClaim();\\n        }\\n\\n        amountClaimedDuringPreMint += preMintQuantity;\\n\\n        _mint(msg.sender, preMintQuantity);\\n    }\\n\\n    function batchClaimPreMint(\\n        uint256 numberOfClaims\\n    ) external whenNotPaused nonReentrant {\\n        if (block.timestamp < publicSaleStartTime) {\\n            revert Launchpeg__WrongPhase();\\n        }\\n\\n        uint256 initialRemainingPreMints = _pendingPreMints\\n            .preMintDataArr\\n            .length;\\n\\n        uint256 remainingPreMints = initialRemainingPreMints;\\n        uint256 tokenPreMinted = 0;\\n\\n        while (remainingPreMints > 0 && numberOfClaims > 0) {\\n            PreMintData memory preMintData = _pendingPreMints.preMintDataArr[\\n                remainingPreMints - 1\\n            ];\\n\\n            delete _pendingPreMints.indexes[preMintData.sender];\\n\\n            tokenPreMinted += preMintData.quantity;\\n            remainingPreMints--;\\n            numberOfClaims--;\\n\\n            _mint(preMintData.sender, preMintData.quantity);\\n        }\\n\\n        amountClaimedDuringPreMint += tokenPreMinted;\\n\\n        // Removing the pre-minted tokens from the array all at once\\n        PreMintData[] storage preMintDataArr = _pendingPreMints.preMintDataArr;\\n        assembly {\\n            sstore(preMintDataArr.slot, remainingPreMints)\\n        }\\n    }\\n\\n    function publicSaleMint(\\n        uint256 amount\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        atPhase(Phase.PublicSale)\\n        nonReentrant\\n        isEOA\\n    {\\n        if (\\n            numberMinted[msg.sender] +\\n                userPendingPreMints(msg.sender) +\\n                amount >\\n            maxPerAddressDuringMint\\n        ) {\\n            revert Launchpeg__CanNotMintThisMany();\\n        }\\n\\n        if (amount > _availableSupply()) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n\\n        amountMintedDuringPublicSale += amount.toUint128();\\n\\n        _mint(msg.sender, amount);\\n        _refundIfOver(publicSalePrice * amount);\\n    }\\n\\n    function updateTokenSet(uint256[] calldata newTokenSet) external onlyOwner {\\n        _tokenSet = newTokenSet;\\n        emit TokenSetUpdated(newTokenSet);\\n    }\\n\\n    function seedAllowlist(\\n        address[] calldata addresses,\\n        uint256[] calldata amounts\\n    ) external onlyOwner {\\n        uint256 addressesLength = addresses.length;\\n        if (addressesLength != amounts.length) {\\n            revert Launchpeg__WrongAddressesAndNumSlotsLength();\\n        }\\n        for (uint256 i; i < addressesLength; i++) {\\n            allowlist[addresses[i]] = amounts[i];\\n        }\\n\\n        emit AllowlistSeeded();\\n    }\\n\\n    function setPreMintStartTime(\\n        uint256 newPreMintStartTime\\n    ) external onlyOwner contractNotLocked {\\n        if (newPreMintStartTime > publicSaleStartTime)\\n            revert Launchpeg__InvalidPhases();\\n\\n        preMintStartTime = newPreMintStartTime.toUint128();\\n        emit PreMintStartTimeSet(newPreMintStartTime);\\n    }\\n\\n    function setPublicSaleStartTime(\\n        uint256 newPublicSaleStartTime\\n    ) external onlyOwner contractNotLocked {\\n        if (newPublicSaleStartTime > publicSaleEndTime)\\n            revert Launchpeg__InvalidPhases();\\n\\n        publicSaleStartTime = newPublicSaleStartTime.toUint128();\\n        emit PublicSaleStartTimeSet(newPublicSaleStartTime);\\n    }\\n\\n    function setPublicSaleEndTime(\\n        uint256 newPublicSaleEndTime\\n    ) external onlyOwner contractNotLocked {\\n        if (newPublicSaleEndTime < publicSaleStartTime)\\n            revert Launchpeg__InvalidPhases();\\n\\n        publicSaleEndTime = newPublicSaleEndTime.toUint128();\\n        emit PublicSaleEndTimeSet(newPublicSaleEndTime);\\n    }\\n\\n    function setAmountForDevs(\\n        uint256 newAmountForDevs\\n    ) external onlyOwner contractNotLocked {\\n        if (amountMintedByDevs > newAmountForDevs) {\\n            revert Launchpeg__MaxSupplyForDevReached();\\n        }\\n\\n        amountForDevs = newAmountForDevs.toUint128();\\n        emit AmountForDevsSet(newAmountForDevs);\\n    }\\n\\n    function setAmountForPreMint(\\n        uint256 newAmountForPreMint\\n    ) external onlyOwner contractNotLocked {\\n        if (amountMintedDuringPreMint > newAmountForPreMint) {\\n            revert Launchpeg__MaxSupplyReached();\\n        }\\n\\n        amountForPreMint = newAmountForPreMint.toUint128();\\n        emit AmountForPreMintSet(newAmountForPreMint);\\n    }\\n\\n    function setPreMintPrice(\\n        uint256 newPreMintPrice\\n    ) external onlyOwner contractNotLocked {\\n        if (newPreMintPrice > publicSalePrice)\\n            revert Launchpeg__InvalidAllowlistPrice();\\n\\n        preMintPrice = newPreMintPrice.toUint128();\\n        emit PreMintPriceSet(newPreMintPrice);\\n    }\\n\\n    function setPublicSalePrice(\\n        uint256 newPublicSalePrice\\n    ) external onlyOwner contractNotLocked {\\n        if (newPublicSalePrice < preMintPrice)\\n            revert Launchpeg__InvalidAllowlistPrice();\\n\\n        publicSalePrice = newPublicSalePrice.toUint128();\\n        emit PublicSalePriceSet(newPublicSalePrice);\\n    }\\n\\n    function setCollectionSize(\\n        uint256 newCollectionSize\\n    ) external onlyOwner contractNotLocked {\\n        if (\\n            newCollectionSize < amountForDevs + amountForPreMint ||\\n            newCollectionSize <\\n            amountMintedDuringPreMint +\\n                amountMintedDuringPublicSale +\\n                amountForDevs\\n        ) revert Launchpeg__LargerCollectionSizeNeeded();\\n\\n        collectionSize = newCollectionSize.toUint128();\\n        emit CollectionSizeSet(newCollectionSize);\\n    }\\n\\n    function setMaxPerAddressDuringMint(\\n        uint256 newMaxAmountPerUser\\n    ) external onlyOwner contractNotLocked {\\n        maxPerAddressDuringMint = newMaxAmountPerUser.toUint128();\\n        emit MaxPerAddressDuringMintSet(newMaxAmountPerUser);\\n    }\\n\\n    function _availableSupply() internal view returns (uint256) {\\n        return\\n            collectionSize -\\n            amountMintedDuringPreMint -\\n            amountMintedDuringPublicSale -\\n            amountForDevs;\\n    }\\n\\n    function _mint(address to, uint256 amount) internal {\\n        numberMinted[to] += amount;\\n\\n        uint256 tokenAmount = _tokenSet.length;\\n        uint256[] memory amounts = new uint256[](tokenAmount);\\n        for (uint i = 0; i < tokenAmount; i++) {\\n            amounts[i] = amount;\\n        }\\n\\n        _mintBatch(to, _tokenSet, amounts, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf0cf53354f26beff7ead65eb169815ff785bddef38cdfacb7c3aef0816efef3e\",\"license\":\"MIT\"},\"contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(\\n        string memory name_,\\n        string memory symbol_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (\\n            to.isContract() &&\\n            !_checkContractOnERC721Received(from, to, tokenId, _data)\\n        ) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (\\n                        !_checkContractOnERC721Received(\\n                            address(0),\\n                            to,\\n                            updatedIndex++,\\n                            _data\\n                        )\\n                    ) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n        address from = prevOwnership.addr;\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try\\n            IERC721ReceiverUpgradeable(to).onERC721Received(\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            )\\n        returns (bytes4 retval) {\\n            return\\n                retval ==\\n                IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x69dd0ac627e8ebeddbd96ad094f2da48442ae79e339c3ba0f6e44f2e5cb6b7c0\",\"license\":\"MIT\"},\"contracts/LaunchpegErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// LaunchpegFactory\\nerror LaunchpegFactory__InvalidBatchReveal();\\nerror LaunchpegFactory__InvalidImplementation();\\n\\n// Launchpeg\\nerror Launchpeg__BatchRevealAlreadyInitialized();\\nerror Launchpeg__BatchRevealDisabled();\\nerror Launchpeg__BatchRevealNotInitialized();\\nerror Launchpeg__BatchRevealStarted();\\nerror Launchpeg__CanNotMintThisMany();\\nerror Launchpeg__HasBeenForceRevealed();\\nerror Launchpeg__InvalidAllowlistPrice();\\nerror Launchpeg__InvalidAuctionDropInterval();\\nerror Launchpeg__InvalidBatchReveal();\\nerror Launchpeg__InvalidBatchRevealSize();\\nerror Launchpeg__InvalidCallbackGasLimit();\\nerror Launchpeg__InvalidClaim();\\nerror Launchpeg__InvalidCoordinator();\\nerror Launchpeg__InvalidKeyHash();\\nerror Launchpeg__InvalidJoeFeeCollector();\\nerror Launchpeg__InvalidMaxPerAddressDuringMint();\\nerror Launchpeg__InvalidOwner();\\nerror Launchpeg__InvalidProjectOwner();\\nerror Launchpeg__InvalidPercent();\\nerror Launchpeg__InvalidQuantity();\\nerror Launchpeg__InvalidRevealDates();\\nerror Launchpeg__InvalidRoyaltyInfo();\\nerror Launchpeg__InvalidPhases();\\nerror Launchpeg__IsNotInTheConsumerList();\\nerror Launchpeg__LargerCollectionSizeNeeded();\\nerror Launchpeg__MaxSupplyForDevReached();\\nerror Launchpeg__MaxSupplyReached();\\nerror Launchpeg__NotEligibleForAllowlistMint();\\nerror Launchpeg__NotEnoughAVAX(uint256 avaxSent);\\nerror Launchpeg__NotInitialized();\\nerror Launchpeg__RevealNextBatchNotAvailable();\\nerror Launchpeg__SaleParametersLocked();\\nerror Launchpeg__TransferFailed();\\nerror Launchpeg__Unauthorized();\\nerror Launchpeg__WithdrawAVAXNotAvailable();\\nerror Launchpeg__WrongAddressesAndNumSlotsLength();\\nerror Launchpeg__WrongPhase();\\n\\n// PendingOwnableUpgradeable\\nerror PendingOwnableUpgradeable__NotOwner();\\nerror PendingOwnableUpgradeable__AddressZero();\\nerror PendingOwnableUpgradeable__NotPendingOwner();\\nerror PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\nerror PendingOwnableUpgradeable__NoPendingOwner();\\n\\n// SafeAccessControlEnumerableUpgradeable\\nerror SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n    bytes32 role,\\n    address sender\\n);\\nerror SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n\\n// SafePausableUpgradeable\\nerror SafePausableUpgradeable__AlreadyPaused();\\nerror SafePausableUpgradeable__AlreadyUnpaused();\\n\\n// OperatorFilterer\\nerror OperatorNotAllowed(address operator);\\n\",\"keccak256\":\"0xcf050d6e1a22c04b262707b5e3bd29f8fccfb1cd3ca539d6774cb5d9012f4257\",\"license\":\"MIT\"},\"contracts/LaunchpegLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpegV1.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpegFactory.sol\\\";\\nimport \\\"./ERC1155LaunchpegBase.sol\\\";\\nimport \\\"./ERC1155SingleBundle.sol\\\";\\nimport \\\"./ERC721AUpgradeable.sol\\\";\\n\\nerror LaunchpegLens__InvalidContract();\\nerror LaunchpegLens__InvalidLaunchpegType();\\nerror LaunchpegLens__InvalidLaunchpegVersion();\\n\\n/// @title Launchpeg Lens\\n/// @author Trader Joe\\n/// @notice Helper contract to fetch launchpegs data\\ncontract LaunchpegLens {\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        uint256 collectionSize;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 totalSupply;\\n        string unrevealedURI;\\n        string baseURI;\\n    }\\n\\n    struct LaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 auctionSaleStartTime;\\n        uint256 preMintStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 auctionStartPrice;\\n        uint256 auctionEndPrice;\\n        uint256 auctionSaleDuration;\\n        uint256 auctionDropInterval;\\n        uint256 auctionDropPerStep;\\n        uint256 allowlistDiscountPercent;\\n        uint256 publicSaleDiscountPercent;\\n        uint256 auctionPrice;\\n        uint256 allowlistPrice;\\n        uint256 publicSalePrice;\\n        uint256 lastAuctionPrice;\\n        uint256 amountMintedDuringAuction;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountClaimedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct FlatLaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 preMintStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 allowlistPrice;\\n        uint256 salePrice;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountClaimedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct RevealData {\\n        uint256 revealBatchSize;\\n        uint256 lastTokenRevealed;\\n        uint256 revealStartTime;\\n        uint256 revealInterval;\\n    }\\n\\n    struct UserData {\\n        uint256 balanceOf;\\n        uint256 numberMinted;\\n        uint256 numberMintedWithPreMint;\\n        uint256 allowanceForAllowlistMint;\\n    }\\n\\n    struct ProjectOwnerData {\\n        address[] projectOwners;\\n        uint256 amountMintedByDevs;\\n        uint256 withdrawAVAXStartTime;\\n        uint256 launchpegBalanceAVAX;\\n    }\\n\\n    struct ERC1155SingleBundleData {\\n        uint256[] tokenSet;\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 preMintStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 allowlistPrice;\\n        uint256 salePrice;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountClaimedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    /// Global struct that is returned by getAllLaunchpegs()\\n    struct LensData {\\n        address id;\\n        LaunchpegType launchType;\\n        CollectionData collectionData;\\n        LaunchpegData launchpegData;\\n        FlatLaunchpegData flatLaunchpegData;\\n        RevealData revealData;\\n        UserData userData;\\n        ProjectOwnerData projectOwnerData;\\n        ERC1155SingleBundleData erc1155SingleBundleData;\\n    }\\n\\n    enum LaunchpegType {\\n        Unknown,\\n        Launchpeg,\\n        FlatLaunchpeg,\\n        ERC1155SingleBundle\\n    }\\n\\n    enum LaunchpegVersion {\\n        Unknown,\\n        V1,\\n        V2\\n    }\\n\\n    /// @notice LaunchpegFactory V1\\n    ILaunchpegFactory public immutable launchpegFactoryV1;\\n\\n    /// @notice LaunchpegFactory V2\\n    ILaunchpegFactory public immutable launchpegFactoryV2;\\n\\n    /// @notice BatchReveal address\\n    address public immutable batchReveal;\\n\\n    /// @dev LaunchpegLens constructor\\n    /// @param _launchpegFactoryV1 LaunchpegFactory V1\\n    /// @param _launchpegFactoryV2 LaunchpegFactory V2\\n    /// @param _batchReveal BatchReveal address\\n    constructor(\\n        ILaunchpegFactory _launchpegFactoryV1,\\n        ILaunchpegFactory _launchpegFactoryV2,\\n        address _batchReveal\\n    ) {\\n        launchpegFactoryV1 = _launchpegFactoryV1;\\n        launchpegFactoryV2 = _launchpegFactoryV2;\\n        batchReveal = _batchReveal;\\n    }\\n\\n    /// @notice Gets the type and version of Launchpeg\\n    /// @param _contract Contract address to consider\\n    /// @return LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\\n    function getLaunchpegType(\\n        address _contract\\n    ) public view returns (LaunchpegType, LaunchpegVersion) {\\n        if (launchpegFactoryV1.isLaunchpeg(0, _contract)) {\\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V1);\\n        } else if (launchpegFactoryV2.isLaunchpeg(0, _contract)) {\\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V2);\\n        } else if (launchpegFactoryV1.isLaunchpeg(1, _contract)) {\\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V1);\\n        } else if (launchpegFactoryV2.isLaunchpeg(1, _contract)) {\\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V2);\\n        } else if (launchpegFactoryV2.isLaunchpeg(2, _contract)) {\\n            return (LaunchpegType.ERC1155SingleBundle, LaunchpegVersion.V2);\\n        } else {\\n            return (LaunchpegType.Unknown, LaunchpegVersion.Unknown);\\n        }\\n    }\\n\\n    /// @notice Fetch Launchpeg data by type and version\\n    /// @param _type Type of Launchpeg to consider\\n    /// @param _version Launchpeg version\\n    /// @param _number Number of Launchpeg to fetch\\n    /// @param _limit Last Launchpeg index to fetch\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensDataList List of contracts datas, in descending order\\n    function getLaunchpegsByTypeAndVersion(\\n        LaunchpegType _type,\\n        LaunchpegVersion _version,\\n        uint256 _number,\\n        uint256 _limit,\\n        address _user\\n    ) external view returns (LensData[] memory) {\\n        if (_type == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidLaunchpegType();\\n        }\\n        if (_version == LaunchpegVersion.Unknown) {\\n            revert LaunchpegLens__InvalidLaunchpegVersion();\\n        }\\n        // default to v2 unless v1 is specified\\n        ILaunchpegFactory factory = (_version == LaunchpegVersion.V1)\\n            ? launchpegFactoryV1\\n            : launchpegFactoryV2;\\n        // 0 - Launchpeg, 1 - FlatLaunchpeg, 2 - ERC1155SingleBundle\\n        uint256 lpTypeIdx = uint8(_type) - 1;\\n        uint256 numLaunchpegs = factory.numLaunchpegs(lpTypeIdx);\\n\\n        uint256 end = _limit > numLaunchpegs ? numLaunchpegs : _limit;\\n        uint256 start = _number > end ? 0 : end - _number;\\n\\n        LensData[] memory LensDatas;\\n        LensDatas = new LensData[](end - start);\\n\\n        for (uint256 i = 0; i < LensDatas.length; i++) {\\n            LensDatas[i] = getLaunchpegData(\\n                factory.allLaunchpegs(lpTypeIdx, end - 1 - i),\\n                _user\\n            );\\n        }\\n\\n        return LensDatas;\\n    }\\n\\n    /// @notice Fetch Launchpeg data from the provided address\\n    /// @param _launchpeg Contract address to consider\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensData Contract data\\n    function getLaunchpegData(\\n        address _launchpeg,\\n        address _user\\n    ) public view returns (LensData memory) {\\n        (\\n            LaunchpegType launchType,\\n            LaunchpegVersion launchVersion\\n        ) = getLaunchpegType(_launchpeg);\\n        if (launchType == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidContract();\\n        }\\n\\n        LensData memory data;\\n        data.id = _launchpeg;\\n        data.launchType = launchType;\\n        data.collectionData = _getCollectionData(_launchpeg, launchType);\\n        data.projectOwnerData = _getProjectOwnerData(_launchpeg, launchVersion);\\n        if (data.launchType != LaunchpegType.ERC1155SingleBundle) {\\n            data.revealData = _getBatchRevealData(_launchpeg, launchVersion);\\n        }\\n        data.userData = _getUserData(\\n            _launchpeg,\\n            launchVersion,\\n            launchType,\\n            _user\\n        );\\n\\n        if (data.launchType == LaunchpegType.Launchpeg) {\\n            data.launchpegData = _getLaunchpegData(_launchpeg, launchVersion);\\n        } else if (data.launchType == LaunchpegType.FlatLaunchpeg) {\\n            data.flatLaunchpegData = _getFlatLaunchpegData(\\n                _launchpeg,\\n                launchVersion\\n            );\\n        } else if (data.launchType == LaunchpegType.ERC1155SingleBundle) {\\n            data.erc1155SingleBundleData = _getERC1155SingleBundleData(\\n                _launchpeg\\n            );\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @dev Fetches Launchpeg collection data\\n    /// @param _launchpeg Launchpeg address\\n    function _getCollectionData(\\n        address _launchpeg,\\n        LaunchpegType launchType\\n    ) private view returns (CollectionData memory data) {\\n        data.name = ERC721AUpgradeable(_launchpeg).name();\\n        data.symbol = ERC721AUpgradeable(_launchpeg).symbol();\\n        data.collectionSize = IBaseLaunchpeg(_launchpeg).collectionSize();\\n        data.maxPerAddressDuringMint = IBaseLaunchpeg(_launchpeg)\\n            .maxPerAddressDuringMint();\\n\\n        if (launchType != LaunchpegType.ERC1155SingleBundle) {\\n            data.totalSupply = ERC721AUpgradeable(_launchpeg).totalSupply();\\n            data.unrevealedURI = IBaseLaunchpeg(_launchpeg).unrevealedURI();\\n            data.baseURI = IBaseLaunchpeg(_launchpeg).baseURI();\\n        } else {\\n            data.baseURI = ERC1155LaunchpegBase(_launchpeg).uri(0);\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg project owner data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getProjectOwnerData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (ProjectOwnerData memory data) {\\n        data.amountMintedByDevs = IBaseLaunchpeg(_launchpeg)\\n            .amountMintedByDevs();\\n        data.launchpegBalanceAVAX = _launchpeg.balance;\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            address[] memory projectOwners = new address[](1);\\n            projectOwners[0] = IBaseLaunchpegV1(_launchpeg).projectOwner();\\n            data.projectOwners = projectOwners;\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            data.projectOwners = _getProjectOwners(_launchpeg);\\n            data.withdrawAVAXStartTime = IBaseLaunchpeg(_launchpeg)\\n                .withdrawAVAXStartTime();\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg project owners. Only works for Launchpeg V2.\\n    /// @param _launchpeg Launchpeg address\\n    function _getProjectOwners(\\n        address _launchpeg\\n    ) private view returns (address[] memory) {\\n        bytes32 role = IBaseLaunchpeg(_launchpeg).PROJECT_OWNER_ROLE();\\n        uint256 count = IAccessControlEnumerableUpgradeable(_launchpeg)\\n            .getRoleMemberCount(role);\\n        address[] memory projectOwners = new address[](count);\\n        for (uint256 i; i < count; i++) {\\n            projectOwners[i] = IAccessControlEnumerableUpgradeable(_launchpeg)\\n                .getRoleMember(role, i);\\n        }\\n        return projectOwners;\\n    }\\n\\n    /// @dev Fetches Launchpeg data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getLaunchpegData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (LaunchpegData memory data) {\\n        ILaunchpeg lp = ILaunchpeg(_launchpeg);\\n        data.currentPhase = lp.currentPhase();\\n        data.amountForAuction = lp.amountForAuction();\\n        data.amountForAllowlist = lp.amountForAllowlist();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.auctionSaleStartTime = lp.auctionSaleStartTime();\\n        data.allowlistStartTime = lp.allowlistStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.auctionStartPrice = lp.auctionStartPrice();\\n        data.auctionEndPrice = lp.auctionEndPrice();\\n        data.auctionSaleDuration = lp.auctionSaleDuration();\\n        data.auctionDropInterval = lp.auctionDropInterval();\\n        data.auctionDropPerStep = lp.auctionDropPerStep();\\n        data.allowlistDiscountPercent = lp.allowlistDiscountPercent();\\n        data.publicSaleDiscountPercent = lp.publicSaleDiscountPercent();\\n        data.auctionPrice = lp.getAuctionPrice(data.auctionSaleStartTime);\\n        data.lastAuctionPrice = lp.lastAuctionPrice();\\n        data.amountMintedDuringAuction = lp.amountMintedDuringAuction();\\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            data.allowlistPrice = IBaseLaunchpegV1(_launchpeg)\\n                .getAllowlistPrice();\\n            data.publicSalePrice = IBaseLaunchpegV1(_launchpeg)\\n                .getPublicSalePrice();\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            data.allowlistPrice = lp.allowlistPrice();\\n            data.publicSalePrice = lp.salePrice();\\n            data.preMintStartTime = lp.preMintStartTime();\\n            data.publicSaleEndTime = lp.publicSaleEndTime();\\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n            data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\\n        }\\n    }\\n\\n    /// @dev Fetches FlatLaunchpeg data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getFlatLaunchpegData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (FlatLaunchpegData memory data) {\\n        IFlatLaunchpeg lp = IFlatLaunchpeg(_launchpeg);\\n        data.currentPhase = lp.currentPhase();\\n        data.amountForAllowlist = lp.amountForAllowlist();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.allowlistStartTime = lp.allowlistStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.allowlistPrice = lp.allowlistPrice();\\n        data.salePrice = lp.salePrice();\\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n        if (launchVersion == LaunchpegVersion.V2) {\\n            data.preMintStartTime = lp.preMintStartTime();\\n            data.publicSaleEndTime = lp.publicSaleEndTime();\\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n            data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\\n        }\\n    }\\n\\n    function _getERC1155SingleBundleData(\\n        address launchpeg\\n    ) private view returns (ERC1155SingleBundleData memory data) {\\n        ERC1155SingleBundle lp = ERC1155SingleBundle(launchpeg);\\n        data.tokenSet = lp.tokenSet();\\n        data.currentPhase = IBaseLaunchpeg.Phase(uint8(lp.currentPhase()));\\n        data.amountForAllowlist = lp.amountForPreMint();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.preMintStartTime = lp.preMintStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.publicSaleEndTime = lp.publicSaleEndTime();\\n        data.allowlistPrice = lp.preMintPrice();\\n        data.salePrice = lp.publicSalePrice();\\n        data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n        data.amountClaimedDuringPreMint = lp.amountClaimedDuringPreMint();\\n        data.amountMintedDuringAllowlist = 0;\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n    }\\n\\n    /// @dev Fetches batch reveal data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getBatchRevealData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (RevealData memory data) {\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            IBaseLaunchpegV1 br = IBaseLaunchpegV1(_launchpeg);\\n            data.revealBatchSize = br.revealBatchSize();\\n            data.revealStartTime = br.revealStartTime();\\n            data.revealInterval = br.revealInterval();\\n            data.lastTokenRevealed = br.lastTokenRevealed();\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            (\\n                ,\\n                ,\\n                uint256 revealBatchSize,\\n                uint256 revealStartTime,\\n                uint256 revealInterval\\n            ) = IBatchReveal(batchReveal).launchpegToConfig(_launchpeg);\\n            data.revealBatchSize = revealBatchSize;\\n            data.revealStartTime = revealStartTime;\\n            data.revealInterval = revealInterval;\\n            data.lastTokenRevealed = IBatchReveal(batchReveal)\\n                .launchpegToLastTokenReveal(_launchpeg);\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg user data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getUserData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion,\\n        LaunchpegType launchType,\\n        address _user\\n    ) private view returns (UserData memory data) {\\n        if (_user != address(0)) {\\n            data.numberMinted = IBaseLaunchpeg(_launchpeg).numberMinted(_user);\\n            data.allowanceForAllowlistMint = IBaseLaunchpeg(_launchpeg)\\n                .allowlist(_user);\\n            if (launchVersion == LaunchpegVersion.V2) {\\n                data.numberMintedWithPreMint = IBaseLaunchpeg(_launchpeg)\\n                    .numberMintedWithPreMint(_user);\\n            }\\n\\n            if (launchType == LaunchpegType.ERC1155SingleBundle) {\\n                data.balanceOf = ERC1155SingleBundle(_launchpeg).balanceOf(\\n                    _user,\\n                    ERC1155SingleBundle(_launchpeg).tokenSet()[0]\\n                );\\n            } else {\\n                data.balanceOf = ERC721AUpgradeable(_launchpeg).balanceOf(\\n                    _user\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x83158062afffe5a3157a3a36ca4f8cadc704f144f154e274f5dad08bb90b3e2f\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"../ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    /// @notice Collection data to initialize Launchpeg\\n    /// @param name ERC721 name\\n    /// @param symbol ERC721 symbol\\n    /// @param maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param collectionSize The collection size (e.g 10000)\\n    /// @param amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        address batchReveal;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 collectionSize;\\n        uint256 amountForDevs;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n    }\\n\\n    /// @notice Collection owner data to initialize Launchpeg\\n    /// @param owner The contract owner\\n    /// @param projectOwner The project owner\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param joeFeeCollector The address to which the fees on the sale will be sent\\n    /// @param joeFeePercent The fees collected by the fee collector on the sale benefits\\n    struct CollectionOwnerData {\\n        address owner;\\n        address projectOwner;\\n        address royaltyReceiver;\\n        address joeFeeCollector;\\n        uint256 joeFeePercent;\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external pure returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeBatchReveal(address _batchReveal) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 _quantity) external payable;\\n\\n    function claimPreMint() external;\\n\\n    function batchClaimPreMint(uint96 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userPendingPreMints(address owner) external view returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function numberMintedWithPreMint(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xc48e90941e198a8102fa2366b6d798ca6f26b577fcd4d95fd55e50f49f58e4ea\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpegV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBaseLaunchpegV1\\n/// @author Trader Joe\\n/// @notice Defines the legacy methods in Launchpeg V1 contracts\\ninterface IBaseLaunchpegV1 {\\n    /** IBaseLaunchpeg */\\n    function projectOwner() external view returns (address);\\n\\n    /** ILaunchpeg */\\n    function getAllowlistPrice() external view returns (uint256);\\n\\n    function getPublicSalePrice() external view returns (uint256);\\n\\n    /** IBatchReveal */\\n    function revealBatchSize() external view returns (uint256);\\n\\n    function lastTokenRevealed() external view returns (uint256);\\n\\n    function revealStartTime() external view returns (uint256);\\n\\n    function revealInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90c6d2b0c4fea173411df6d3ccbfb4a4aaa540a0f25fe5d37822785afa9abcf0\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155LaunchpegBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC1155LaunchpegBase {}\\n\",\"keccak256\":\"0xee6b6d86b8e4c0b76643845a320e1b4c5d5decc55908123e6cf5d523246641fc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155LaunchpegSingleBundle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC1155LaunchpegSingleBundle {}\\n\",\"keccak256\":\"0x182e7b050f38bbdd04c03132005fa7ead200ec5aefa65d9aba2515bc90a1d21b\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4f38566f1d19abf8482e5c1af31672449567c2b74fc7d7d4ee99c9c5134fa75e\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0xb8f6dd352d238910507700f03b2e8f3f843fb3267fcb369876af1f272a356332\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ILaunchpegFactory\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of LaunchpegFactory\\ninterface ILaunchpegFactory {\\n    function LAUNCHPEG_PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function launchpegImplementation() external view returns (address);\\n\\n    function flatLaunchpegImplementation() external view returns (address);\\n\\n    function batchReveal() external view returns (address);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function isLaunchpeg(uint256 _type, address _contract)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\\n        external\\n        view\\n        returns (address);\\n\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external;\\n\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\\n\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\\n\\n    function addLaunchpegPauser(address _pauser) external;\\n\\n    function removeLaunchpegPauser(address _pauser) external;\\n\\n    function pauseLaunchpeg(address _launchpeg) external;\\n}\\n\",\"keccak256\":\"0xc41cda9f99e4d8a562de2d7f6e7626eac17d5fbb11fd0c8deb3dae9b85298f94\",\"license\":\"MIT\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IPendingOwnableUpgradeable {\\n    event PendingOwnerSet(address indexed pendingOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0x4a8abc7df1039d8119c2f75e656bc1398bea4609199cb0a7e1d70eaa49e68733\",\"license\":\"MIT\"},\"contracts/interfaces/ISafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\ninterface ISafePausableUpgradeable is\\n    IAccessControlEnumerableUpgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    function PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ROLE() external pure returns (bytes32);\\n\\n    function PAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function UNPAUSER_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x81b77fc513e18d58e3f4a4dfb52b73d1ff47d60b2e16cbc04e2499a53213976d\",\"license\":\"MIT\"},\"contracts/utils/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\nimport \\\"../LaunchpegErrors.sol\\\";\\n\\n/**\\n * @title Pending Ownable\\n * @author Trader Joe\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions. The ownership of this contract is transferred using the\\n * push and pull pattern, the current owner set a `pendingOwner` using\\n * {setPendingOwner} and that address can then call {becomeOwner} to become the\\n * owner of that contract. The main logic and comments comes from OpenZeppelin's\\n * Ownable contract.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {setPendingOwner} and {becomeOwner}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner\\n */\\nabstract contract PendingOwnableUpgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPendingOwnableUpgradeable\\n{\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert PendingOwnableUpgradeable__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the pending owner.\\n     */\\n    modifier onlyPendingOwner() {\\n        if (msg.sender != _pendingOwner || msg.sender == address(0))\\n            revert PendingOwnableUpgradeable__NotPendingOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting `msg.sender` as the initial owner\\n     */\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __ERC165_init();\\n        __PendingOwnable_init_unchained();\\n    }\\n\\n    function __PendingOwnable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @return The address of the current owner\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current pending owner\\n     * @return The address of the current pending owner\\n     */\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Sets the pending owner address. This address will be able to become\\n     * the owner of this contract by calling {becomeOwner}\\n     */\\n    function setPendingOwner(address pendingOwner_)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        if (pendingOwner_ == address(0))\\n            revert PendingOwnableUpgradeable__AddressZero();\\n        if (_pendingOwner != address(0))\\n            revert PendingOwnableUpgradeable__PendingOwnerAlreadySet();\\n        _setPendingOwner(pendingOwner_);\\n    }\\n\\n    /**\\n     * @notice Revoke the pending owner address. This address will not be able to\\n     * call {becomeOwner} to become the owner anymore.\\n     * Can only be called by the owner\\n     */\\n    function revokePendingOwner() public virtual override onlyOwner {\\n        if (_pendingOwner == address(0))\\n            revert PendingOwnableUpgradeable__NoPendingOwner();\\n        _setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers the ownership to the new owner (`pendingOwner`).\\n     * Can only be called by the pending owner\\n     */\\n    function becomeOwner() public virtual override onlyPendingOwner {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPendingOwnableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Push the new owner, it needs to be pulled to be effective.\\n     * Internal function without access restriction.\\n     * @param pendingOwner_ The address of the new pending owner\\n     */\\n    function _setPendingOwner(address pendingOwner_) internal virtual {\\n        _pendingOwner = pendingOwner_;\\n        emit PendingOwnerSet(pendingOwner_);\\n    }\\n}\\n\",\"keccak256\":\"0xc00538b6e845aa8c71e0b1b2c79d49f29520f0a3fab9469b328d1d5c67f12af7\",\"license\":\"MIT\"},\"contracts/utils/SafeAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"./PendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract SafeAccessControlEnumerableUpgradeable is\\n    PendingOwnableUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    /**\\n     * @dev Modifier that checks that the role is not the `DEFAULT_ADMIN_ROLE`\\n     */\\n    modifier roleIsNotDefaultAdmin(bytes32 role) {\\n        if (role == DEFAULT_ADMIN_ROLE)\\n            revert SafeAccessControlEnumerableUpgradeable__RoleIsDefaultAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account is the `owner` or has a specific role\\n     */\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        if (msg.sender != owner() && !hasRole(role, msg.sender))\\n            revert SafeAccessControlEnumerableUpgradeable__SenderMissingRoleAndIsNotOwner(\\n                role,\\n                msg.sender\\n            );\\n        _;\\n    }\\n\\n    function __SafeAccessControlEnumerable_init() internal onlyInitializing {\\n        __PendingOwnable_init();\\n        __AccessControlEnumerable_init();\\n\\n        __SafeAccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __SafeAccessControlEnumerable_init_unchained()\\n        internal\\n        onlyInitializing\\n    {}\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(PendingOwnableUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            PendingOwnableUpgradeable.supportsInterface(interfaceId) ||\\n            AccessControlEnumerableUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Grants `role` to `account`.\\n     * @dev If `account` had not been already granted `role`, emits a {RoleGranted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role granted can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to grant\\n     * @param account The address of the account\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from `account`.\\n     * @dev If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the `owner` or have ``role``'s admin role.\\n     * - the role revoked can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to revoke\\n     * @param account The address of the account\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\\n        roleIsNotDefaultAdmin(role)\\n        onlyOwnerOrRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account.\\n     *\\n     * @dev Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     * - the role renounced can't be `DEFAULT_ADMIN`\\n     *\\n     * @param role The role to renounce\\n     * @param account The address of the account\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override(AccessControlUpgradeable, IAccessControlUpgradeable)\\n        roleIsNotDefaultAdmin(role)\\n    {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @dev This also transfer the `DEFAULT_ADMIN` role to the new owner\\n     * @param _newOwner The address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual override {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        if (_newOwner != address(0)) _grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\\n\\n        super._transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xebeb6abaa2b66391ba9f1efaea419a673966bab00bb58b0254dac61850d4e814\",\"license\":\"MIT\"},\"contracts/utils/SafePausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../LaunchpegErrors.sol\\\";\\nimport \\\"../interfaces/ISafePausableUpgradeable.sol\\\";\\nimport \\\"./SafeAccessControlEnumerableUpgradeable.sol\\\";\\n\\nabstract contract SafePausableUpgradeable is\\n    SafeAccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    ISafePausableUpgradeable\\n{\\n    bytes32 public constant override PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n\\n    bytes32 public constant override PAUSER_ADMIN_ROLE =\\n        keccak256(\\\"PAUSER_ADMIN_ROLE\\\");\\n    bytes32 public constant override UNPAUSER_ADMIN_ROLE =\\n        keccak256(\\\"UNPAUSER_ADMIN_ROLE\\\");\\n\\n    function __SafePausable_init() internal onlyInitializing {\\n        __SafeAccessControlEnumerable_init();\\n        __Pausable_init();\\n\\n        __SafePausable_init_unchained();\\n    }\\n\\n    function __SafePausable_init_unchained() internal onlyInitializing {\\n        _setRoleAdmin(PAUSER_ROLE, PAUSER_ADMIN_ROLE);\\n        _setRoleAdmin(UNPAUSER_ROLE, UNPAUSER_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(SafeAccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISafePausableUpgradeable).interfaceId ||\\n            SafeAccessControlEnumerableUpgradeable.supportsInterface(\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @notice Pauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function pause() public virtual override onlyOwnerOrRole(PAUSER_ROLE) {\\n        if (paused()) revert SafePausableUpgradeable__AlreadyPaused();\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract.\\n     * @dev Sensible part of a contract might be pausable for security reasons.\\n     *\\n     * Requirements:\\n     * - the caller must be the `owner` or have the ``role`` role.\\n     * - the contrat needs to be unpaused.\\n     */\\n    function unpause() public virtual override onlyOwnerOrRole(UNPAUSER_ROLE) {\\n        if (!paused()) revert SafePausableUpgradeable__AlreadyUnpaused();\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x160728cd5c6765035b0c8ff0aff1050e276532545572c804a8b0e777197ed934\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003b2f38038062003b2f83398101604081905262000034916200006b565b6001600160a01b0392831660805290821660a0521660c052620000bf565b6001600160a01b03811681146200006857600080fd5b50565b6000806000606084860312156200008157600080fd5b83516200008e8162000052565b6020850151909350620000a18162000052565b6040850151909250620000b48162000052565b809150509250925092565b60805160a05160c051613a046200012b6000396000818160950152818161104001526110fa01526000818160c9015281816101d6015281816104df0152818161062101526106c101526000818160f0015281816101fc0152818161042a01526105800152613a046000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806304fa66ba1461006757806321cc161114610090578063522ea9bc146100c457806354dbc616146100eb578063a6a7b3ea14610112578063d0b54b3b14610133575b600080fd5b61007a610075366004613063565b610153565b60405161008791906135b8565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b604051610087919061361a565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b61012561012036600461362e565b610425565b604051610087929190613652565b61014661014136600461367d565b610756565b60405161008791906136b6565b60606000866003811115610169576101696130ca565b036101875760405163883ee45160e01b815260040160405180910390fd5b600085600281111561019b5761019b6130ca565b036101b9576040516305fdabfd60e41b815260040160405180910390fd5b600060018660028111156101cf576101cf6130ca565b146101fa577f000000000000000000000000000000000000000000000000000000000000000061021c565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001886003811115610234576102346130ca565b61023e91906136df565b60ff1690506000826001600160a01b031663776f1b1c836040518263ffffffff1660e01b815260040161027391815260200190565b602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190613702565b905060008187116102c557866102c7565b815b905060008189116102e1576102dc898361371b565b6102e4565b60005b905060606102f2828461371b565b6001600160401b0381111561030957610309613732565b60405190808252806020026020018201604052801561034257816020015b61032f612dbc565b8152602001906001900390816103275790505b50905060005b8151811015610415576103e56001600160a01b03881663306ec748888461037060018a61371b565b61037a919061371b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190613748565b8a610756565b8282815181106103f7576103f7613765565b6020026020010181905250808061040d9061377b565b915050610348565b509b9a5050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663abcc76176000856040518363ffffffff1660e01b8152600401610477929190613794565b602060405180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b891906137ab565b156104c857506001928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc761790610517906000908790600401613794565b602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055891906137ab565b156105695750600192600292509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906105b8906001908790600401613794565b602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f991906137ab565b1561060a5750600292600192509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc761790610659906001908790600401613794565b602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a91906137ab565b156106aa57506002928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906106f9906002908790600401613794565b602060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a91906137ab565b1561074b5750600392600292509050565b506000928392509050565b61075e612dbc565b60008061076a85610425565b90925090506000826003811115610783576107836130ca565b036107a157604051630ca92ff360e31b815260040160405180910390fd5b6107a9612dbc565b6001600160a01b0386168152602081018360038111156107cb576107cb6130ca565b908160038111156107de576107de6130ca565b9052506107eb86846108d7565b60408201526107fa8683610c67565b60e0820152600381602001516003811115610817576108176130ca565b1461082c576108268683610e4c565b60a08201525b61083886838588611180565b60c0820152600181602001516003811115610855576108556130ca565b0361086e5761086486836114a0565b60608201526108cc565b600281602001516003811115610886576108866130ca565b0361089f576108958683612066565b60808201526108cc565b6003816020015160038111156108b7576108b76130ca565b036108cc576108c586612620565b6101008201525b925050505b92915050565b6108df612e2f565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094591908101906137fd565b8160000181905250826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b391908101906137fd565b8160200181905250826001600160a01b03166345c0f5336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190613702565b816040018181525050826001600160a01b0316638bc35c2f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190613702565b60608201526003826003811115610aa157610aa16130ca565b14610bef57826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b089190613702565b816080018181525050826001600160a01b0316637035bf186040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7791908101906137fd565b8160a00181905250826001600160a01b0316636c0360eb6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bbd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be591908101906137fd565b60c08201526108d1565b6040516303a24d0760e21b8152600060048201526001600160a01b03841690630e89341c90602401600060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5c91908101906137fd565b60c082015292915050565b610c6f612e6c565b826001600160a01b0316635c7034af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190613702565b60208201526001600160a01b0383163160608201526001826002811115610cfa57610cfa6130ca565b03610db55760408051600180825281830190925260009160208083019080368337019050509050836001600160a01b031663a4475ce46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190613748565b81600081518110610d9657610d96613765565b6001600160a01b039092166020928302919091019091015281526108d1565b6002826002811115610dc957610dc96130ca565b036108d157610dd783612bdf565b8160000181905250826001600160a01b031663c792e1676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190613702565b604082015292915050565b610e54612e94565b6001826002811115610e6857610e686130ca565b03611020576000839050806001600160a01b0316630b5648106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed49190613702565b826000018181525050806001600160a01b031663cc0bef846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190613702565b826040018181525050806001600160a01b031663247cd8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190613702565b826060018181525050806001600160a01b031663f43191956040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110159190613702565b6020830152506108d1565b6002826002811115611034576110346130ca565b036108d15760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663181d2588876040518263ffffffff1660e01b815260040161108a919061361a565b60a060405180830381865afa1580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190613887565b8289526040808a0183905260608a0182905251635e1578db60e11b815292975090955093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063bc2af1b6915061113190899060040161361a565b602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190613702565b602085015250505092915050565b611188612e94565b6001600160a01b038216156114985760405163dc33e68160e01b81526001600160a01b0386169063dc33e681906111c390859060040161361a565b602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112049190613702565b602082015260405163a7cd52cb60e01b81526001600160a01b0386169063a7cd52cb9061123590859060040161361a565b602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190613702565b6060820152600284600281111561128f5761128f6130ca565b036113075760405163aec3922b60e01b81526001600160a01b0386169063aec3922b906112c090859060040161361a565b602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190613702565b60408201525b600383600381111561131b5761131b6130ca565b0361142857846001600160a01b031662fdd58e83876001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa15801561136d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261139591908101906138d6565b6000815181106113a7576113a7613765565b60200260200101516040518363ffffffff1660e01b81526004016113e09291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114219190613702565b8152611498565b6040516370a0823160e01b81526001600160a01b038616906370a082319061145490859060040161361a565b602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114959190613702565b81525b949350505050565b6114a8612ebc565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150f9190613988565b82906005811115611522576115226130ca565b90816005811115611535576115356130ca565b81525050806001600160a01b031663f7df4c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b9190613702565b826020018181525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613702565b826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116719190613702565b826060018181525050806001600160a01b031663fab2bf586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190613702565b826080018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117479190613702565b8260c0018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190613702565b8260e0018181525050806001600160a01b031663d756985b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190613702565b82610120018181525050806001600160a01b031663a04a6ac86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118899190613702565b82610140018181525050806001600160a01b0316630a212ee26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190613702565b82610160018181525050806001600160a01b031663f243669b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190613702565b82610180018181525050806001600160a01b031663e6fe34b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd9190613702565b826101a0018181525050806001600160a01b031663154895106040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190613702565b826101c0018181525050806001600160a01b03166308a3fb4e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa59190613702565b6101e083015260808201516040516348be804f60e11b815260048101919091526001600160a01b0382169063917d009e90602401602060405180830381865afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a9190613702565b82610200018181525050806001600160a01b0316637a18c1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b869190613702565b82610260018181525050806001600160a01b031663a54cd7dc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190613702565b82610280018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613702565b826102e0018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190613702565b6103008301526001836002811115611ce457611ce46130ca565b03611dc257836001600160a01b0316630b1019e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190613702565b82610220018181525050836001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db79190613702565b61024083015261205f565b6002836002811115611dd657611dd66130ca565b0361205f57806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d9190613702565b82610220018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea99190613702565b82610240018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f159190613702565b8260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f809190613702565b82610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190613702565b826102a0018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190613702565b6102c08301525b5092915050565b61206e612f79565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190613988565b829060058111156120e8576120e86130ca565b908160058111156120fb576120fb6130ca565b81525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561213d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121619190613702565b826020018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc9190613702565b826040018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122379190613702565b826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561227e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a29190613702565b8260a0018181525050806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230d9190613702565b8260e0018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123789190613702565b82610100018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e49190613702565b82610160018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561242c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124509190613702565b610180830152600283600281111561246a5761246a6130ca565b0361205f57806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d19190613702565b826060018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613702565b8260c0018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190613702565b82610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126139190613702565b6101408301525092915050565b612628612fe2565b6000829050806001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa15801561266b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261269391908101906138d6565b8260000181905250806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd9190613988565b600581111561270e5761270e6130ca565b60ff166005811115612722576127226130ca565b82602001906005811115612738576127386130ca565b9081600581111561274b5761274b6130ca565b81525050806001600160a01b031663754a667e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561278d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b191906139a5565b6001600160801b0316826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612801573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282591906139a5565b6001600160801b0316826060018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289991906139a5565b6001600160801b0316826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290d91906139a5565b6001600160801b03168260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298191906139a5565b6001600160801b03168260c0018181525050806001600160a01b031663a187c89b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f591906139a5565b6001600160801b03168260e0018181525050806001600160a01b0316639b6860c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6991906139a5565b6001600160801b031682610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ade91906139a5565b6001600160801b031682610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b539190613702565b6101408301526000610160830152604080516312c6663b60e31b815290516001600160a01b0383169163963331d89160048083019260209291908290030181865afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bca91906139a5565b6001600160801b031661018083015250919050565b60606000826001600160a01b031663be62da0e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c459190613702565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0385169063ca15c87390602401602060405180830381865afa158015612c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb49190613702565b90506000816001600160401b03811115612cd057612cd0613732565b604051908082528060200260200182016040528015612cf9578160200160208202803683370190505b50905060005b82811015612db357604051632404341f60e21b815260048101859052602481018290526001600160a01b03871690639010d07c90604401602060405180830381865afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d779190613748565b828281518110612d8957612d89613765565b6001600160a01b039092166020928302919091019091015280612dab8161377b565b915050612cff565b50949350505050565b604080516101208101825260008082526020820152908101612ddc612e2f565b8152602001612de9612ebc565b8152602001612df6612f79565b8152602001612e03612e94565b8152602001612e10612e94565b8152602001612e1d612e6c565b8152602001612e2a612fe2565b905290565b6040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051610320810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915260608152602081016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038116811461306057600080fd5b50565b600080600080600060a0868803121561307b57600080fd5b85356004811061308a57600080fd5b945060208601356003811061309e57600080fd5b9350604086013592506060860135915060808601356130bc8161304b565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600481106130f0576130f06130ca565b9052565b60005b8381101561310f5781810151838201526020016130f7565b8381111561311e576000848401525b50505050565b6000815180845261313c8160208601602086016130f4565b601f01601f19169290920160200192915050565b6000815160e0845261316560e0850182613124565b90506020830151848203602086015261317e8282613124565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a08601526131b68282613124565b91505060c083015184820360c08601526131d08282613124565b95945050505050565b600681106130f0576130f06130ca565b6131f48282516131d9565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151908301526102e0808201519083015261030090810151910152565b6133018282516131d9565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b805182526020810151602083015260408101516040830152606081015160608301525050565b8051608080845281519084018190526000916020919082019060a0860190845b818110156133ea5783516001600160a01b0316835292840192918401916001016133c5565b50508285015183870152604085015160408701526060850151606087015280935050505092915050565b600081518084526020808501945080840160005b8381101561344457815187529582019590820190600101613428565b509495945050505050565b60006101a0825181855261346582860182613414565b915050602083015161347a60208601826131d9565b5060408381015190850152606080840151908501526080808401519085015260a0808401519085015260c0808401519085015260e0808401519085015261010080840151908501526101208084015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b80516001600160a01b031682526000610660602083015161351a60208601826130e0565b50604083015181604086015261353282860182613150565b915050606083015161354760608601826131e9565b50608083015161355b6103808601826132f6565b5060a083015161356f61052086018261337f565b5060c08301516135836105a086018261337f565b5060e083015184820361062086015261359c82826133a5565b9150506101008301518482036106408601526131d0828261344f565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561360d57603f198886030184526135fb8583516134f6565b945092850192908501906001016135df565b5092979650505050505050565b6001600160a01b0391909116815260200190565b60006020828403121561364057600080fd5b813561364b8161304b565b9392505050565b6040810161366082856130e0565b60038310613670576136706130ca565b8260208301529392505050565b6000806040838503121561369057600080fd5b823561369b8161304b565b915060208301356136ab8161304b565b809150509250929050565b60208152600061364b60208301846134f6565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156136f9576136f96136c9565b90039392505050565b60006020828403121561371457600080fd5b5051919050565b60008282101561372d5761372d6136c9565b500390565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561375a57600080fd5b815161364b8161304b565b634e487b7160e01b600052603260045260246000fd5b60006001820161378d5761378d6136c9565b5060010190565b9182526001600160a01b0316602082015260400190565b6000602082840312156137bd57600080fd5b8151801515811461364b57600080fd5b604051601f8201601f191681016001600160401b03811182821017156137f5576137f5613732565b604052919050565b60006020828403121561380f57600080fd5b81516001600160401b038082111561382657600080fd5b818401915084601f83011261383a57600080fd5b81518181111561384c5761384c613732565b61385f601f8201601f19166020016137cd565b915080825285602082850101111561387657600080fd5b612db38160208401602086016130f4565b600080600080600060a0868803121561389f57600080fd5b85519450602086015180600f0b81146138b757600080fd5b6040870151606088015160809098015196999198509695945092505050565b600060208083850312156138e957600080fd5b82516001600160401b038082111561390057600080fd5b818501915085601f83011261391457600080fd5b81518181111561392657613926613732565b8060051b91506139378483016137cd565b818152918301840191848101908884111561395157600080fd5b938501935b8385101561396f57845182529385019390850190613956565b98975050505050505050565b6006811061306057600080fd5b60006020828403121561399a57600080fd5b815161364b8161397b565b6000602082840312156139b757600080fd5b81516001600160801b038116811461364b57600080fdfea26469706673582212203bc64b0884bc1a46ef23a0e39cee9d01d9ac19a05dc517611c03784399227b9d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806304fa66ba1461006757806321cc161114610090578063522ea9bc146100c457806354dbc616146100eb578063a6a7b3ea14610112578063d0b54b3b14610133575b600080fd5b61007a610075366004613063565b610153565b60405161008791906135b8565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b604051610087919061361a565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b61012561012036600461362e565b610425565b604051610087929190613652565b61014661014136600461367d565b610756565b60405161008791906136b6565b60606000866003811115610169576101696130ca565b036101875760405163883ee45160e01b815260040160405180910390fd5b600085600281111561019b5761019b6130ca565b036101b9576040516305fdabfd60e41b815260040160405180910390fd5b600060018660028111156101cf576101cf6130ca565b146101fa577f000000000000000000000000000000000000000000000000000000000000000061021c565b7f00000000000000000000000000000000000000000000000000000000000000005b905060006001886003811115610234576102346130ca565b61023e91906136df565b60ff1690506000826001600160a01b031663776f1b1c836040518263ffffffff1660e01b815260040161027391815260200190565b602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190613702565b905060008187116102c557866102c7565b815b905060008189116102e1576102dc898361371b565b6102e4565b60005b905060606102f2828461371b565b6001600160401b0381111561030957610309613732565b60405190808252806020026020018201604052801561034257816020015b61032f612dbc565b8152602001906001900390816103275790505b50905060005b8151811015610415576103e56001600160a01b03881663306ec748888461037060018a61371b565b61037a919061371b565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190613748565b8a610756565b8282815181106103f7576103f7613765565b6020026020010181905250808061040d9061377b565b915050610348565b509b9a5050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663abcc76176000856040518363ffffffff1660e01b8152600401610477929190613794565b602060405180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b891906137ab565b156104c857506001928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc761790610517906000908790600401613794565b602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055891906137ab565b156105695750600192600292509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906105b8906001908790600401613794565b602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f991906137ab565b1561060a5750600292600192509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc761790610659906001908790600401613794565b602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a91906137ab565b156106aa57506002928392509050565b60405163abcc761760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063abcc7617906106f9906002908790600401613794565b602060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a91906137ab565b1561074b5750600392600292509050565b506000928392509050565b61075e612dbc565b60008061076a85610425565b90925090506000826003811115610783576107836130ca565b036107a157604051630ca92ff360e31b815260040160405180910390fd5b6107a9612dbc565b6001600160a01b0386168152602081018360038111156107cb576107cb6130ca565b908160038111156107de576107de6130ca565b9052506107eb86846108d7565b60408201526107fa8683610c67565b60e0820152600381602001516003811115610817576108176130ca565b1461082c576108268683610e4c565b60a08201525b61083886838588611180565b60c0820152600181602001516003811115610855576108556130ca565b0361086e5761086486836114a0565b60608201526108cc565b600281602001516003811115610886576108866130ca565b0361089f576108958683612066565b60808201526108cc565b6003816020015160038111156108b7576108b76130ca565b036108cc576108c586612620565b6101008201525b925050505b92915050565b6108df612e2f565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094591908101906137fd565b8160000181905250826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b391908101906137fd565b8160200181905250826001600160a01b03166345c0f5336040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190613702565b816040018181525050826001600160a01b0316638bc35c2f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190613702565b60608201526003826003811115610aa157610aa16130ca565b14610bef57826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b089190613702565b816080018181525050826001600160a01b0316637035bf186040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7791908101906137fd565b8160a00181905250826001600160a01b0316636c0360eb6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bbd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be591908101906137fd565b60c08201526108d1565b6040516303a24d0760e21b8152600060048201526001600160a01b03841690630e89341c90602401600060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5c91908101906137fd565b60c082015292915050565b610c6f612e6c565b826001600160a01b0316635c7034af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190613702565b60208201526001600160a01b0383163160608201526001826002811115610cfa57610cfa6130ca565b03610db55760408051600180825281830190925260009160208083019080368337019050509050836001600160a01b031663a4475ce46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d839190613748565b81600081518110610d9657610d96613765565b6001600160a01b039092166020928302919091019091015281526108d1565b6002826002811115610dc957610dc96130ca565b036108d157610dd783612bdf565b8160000181905250826001600160a01b031663c792e1676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190613702565b604082015292915050565b610e54612e94565b6001826002811115610e6857610e686130ca565b03611020576000839050806001600160a01b0316630b5648106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed49190613702565b826000018181525050806001600160a01b031663cc0bef846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190613702565b826040018181525050806001600160a01b031663247cd8ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190613702565b826060018181525050806001600160a01b031663f43191956040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110159190613702565b6020830152506108d1565b6002826002811115611034576110346130ca565b036108d15760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663181d2588876040518263ffffffff1660e01b815260040161108a919061361a565b60a060405180830381865afa1580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190613887565b8289526040808a0183905260608a0182905251635e1578db60e11b815292975090955093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063bc2af1b6915061113190899060040161361a565b602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190613702565b602085015250505092915050565b611188612e94565b6001600160a01b038216156114985760405163dc33e68160e01b81526001600160a01b0386169063dc33e681906111c390859060040161361a565b602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112049190613702565b602082015260405163a7cd52cb60e01b81526001600160a01b0386169063a7cd52cb9061123590859060040161361a565b602060405180830381865afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190613702565b6060820152600284600281111561128f5761128f6130ca565b036113075760405163aec3922b60e01b81526001600160a01b0386169063aec3922b906112c090859060040161361a565b602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190613702565b60408201525b600383600381111561131b5761131b6130ca565b0361142857846001600160a01b031662fdd58e83876001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa15801561136d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261139591908101906138d6565b6000815181106113a7576113a7613765565b60200260200101516040518363ffffffff1660e01b81526004016113e09291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114219190613702565b8152611498565b6040516370a0823160e01b81526001600160a01b038616906370a082319061145490859060040161361a565b602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114959190613702565b81525b949350505050565b6114a8612ebc565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150f9190613988565b82906005811115611522576115226130ca565b90816005811115611535576115356130ca565b81525050806001600160a01b031663f7df4c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b9190613702565b826020018181525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613702565b826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116719190613702565b826060018181525050806001600160a01b031663fab2bf586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190613702565b826080018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117479190613702565b8260c0018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190613702565b8260e0018181525050806001600160a01b031663d756985b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190613702565b82610120018181525050806001600160a01b031663a04a6ac86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118899190613702565b82610140018181525050806001600160a01b0316630a212ee26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190613702565b82610160018181525050806001600160a01b031663f243669b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190613702565b82610180018181525050806001600160a01b031663e6fe34b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd9190613702565b826101a0018181525050806001600160a01b031663154895106040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190613702565b826101c0018181525050806001600160a01b03166308a3fb4e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa59190613702565b6101e083015260808201516040516348be804f60e11b815260048101919091526001600160a01b0382169063917d009e90602401602060405180830381865afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a9190613702565b82610200018181525050806001600160a01b0316637a18c1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b869190613702565b82610260018181525050806001600160a01b031663a54cd7dc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190613702565b82610280018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613702565b826102e0018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190613702565b6103008301526001836002811115611ce457611ce46130ca565b03611dc257836001600160a01b0316630b1019e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190613702565b82610220018181525050836001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db79190613702565b61024083015261205f565b6002836002811115611dd657611dd66130ca565b0361205f57806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3d9190613702565b82610220018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea99190613702565b82610240018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f159190613702565b8260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f809190613702565b82610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190613702565b826102a0018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190613702565b6102c08301525b5092915050565b61206e612f79565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190613988565b829060058111156120e8576120e86130ca565b908160058111156120fb576120fb6130ca565b81525050806001600160a01b031663d62b63036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561213d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121619190613702565b826020018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc9190613702565b826040018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122379190613702565b826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561227e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a29190613702565b8260a0018181525050806001600160a01b03166390967a526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230d9190613702565b8260e0018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123789190613702565b82610100018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e49190613702565b82610160018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561242c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124509190613702565b610180830152600283600281111561246a5761246a6130ca565b0361205f57806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d19190613702565b826060018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613702565b8260c0018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190613702565b82610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126139190613702565b6101408301525092915050565b612628612fe2565b6000829050806001600160a01b031663406248246040518163ffffffff1660e01b8152600401600060405180830381865afa15801561266b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261269391908101906138d6565b8260000181905250806001600160a01b031663055ad42e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd9190613988565b600581111561270e5761270e6130ca565b60ff166005811115612722576127226130ca565b82602001906005811115612738576127386130ca565b9081600581111561274b5761274b6130ca565b81525050806001600160a01b031663754a667e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561278d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b191906139a5565b6001600160801b0316826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612801573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282591906139a5565b6001600160801b0316826060018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289991906139a5565b6001600160801b0316826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290d91906139a5565b6001600160801b03168260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298191906139a5565b6001600160801b03168260c0018181525050806001600160a01b031663a187c89b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f591906139a5565b6001600160801b03168260e0018181525050806001600160a01b0316639b6860c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6991906139a5565b6001600160801b031682610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ade91906139a5565b6001600160801b031682610120018181525050806001600160a01b0316636b14bd396040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b539190613702565b6101408301526000610160830152604080516312c6663b60e31b815290516001600160a01b0383169163963331d89160048083019260209291908290030181865afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bca91906139a5565b6001600160801b031661018083015250919050565b60606000826001600160a01b031663be62da0e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c459190613702565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0385169063ca15c87390602401602060405180830381865afa158015612c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb49190613702565b90506000816001600160401b03811115612cd057612cd0613732565b604051908082528060200260200182016040528015612cf9578160200160208202803683370190505b50905060005b82811015612db357604051632404341f60e21b815260048101859052602481018290526001600160a01b03871690639010d07c90604401602060405180830381865afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d779190613748565b828281518110612d8957612d89613765565b6001600160a01b039092166020928302919091019091015280612dab8161377b565b915050612cff565b50949350505050565b604080516101208101825260008082526020820152908101612ddc612e2f565b8152602001612de9612ebc565b8152602001612df6612f79565b8152602001612e03612e94565b8152602001612e10612e94565b8152602001612e1d612e6c565b8152602001612e2a612fe2565b905290565b6040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051610320810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101a0810190915260608152602081016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038116811461306057600080fd5b50565b600080600080600060a0868803121561307b57600080fd5b85356004811061308a57600080fd5b945060208601356003811061309e57600080fd5b9350604086013592506060860135915060808601356130bc8161304b565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600481106130f0576130f06130ca565b9052565b60005b8381101561310f5781810151838201526020016130f7565b8381111561311e576000848401525b50505050565b6000815180845261313c8160208601602086016130f4565b601f01601f19169290920160200192915050565b6000815160e0845261316560e0850182613124565b90506020830151848203602086015261317e8282613124565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a08601526131b68282613124565b91505060c083015184820360c08601526131d08282613124565b95945050505050565b600681106130f0576130f06130ca565b6131f48282516131d9565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151908301526102e0808201519083015261030090810151910152565b6133018282516131d9565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b805182526020810151602083015260408101516040830152606081015160608301525050565b8051608080845281519084018190526000916020919082019060a0860190845b818110156133ea5783516001600160a01b0316835292840192918401916001016133c5565b50508285015183870152604085015160408701526060850151606087015280935050505092915050565b600081518084526020808501945080840160005b8381101561344457815187529582019590820190600101613428565b509495945050505050565b60006101a0825181855261346582860182613414565b915050602083015161347a60208601826131d9565b5060408381015190850152606080840151908501526080808401519085015260a0808401519085015260c0808401519085015260e0808401519085015261010080840151908501526101208084015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b80516001600160a01b031682526000610660602083015161351a60208601826130e0565b50604083015181604086015261353282860182613150565b915050606083015161354760608601826131e9565b50608083015161355b6103808601826132f6565b5060a083015161356f61052086018261337f565b5060c08301516135836105a086018261337f565b5060e083015184820361062086015261359c82826133a5565b9150506101008301518482036106408601526131d0828261344f565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561360d57603f198886030184526135fb8583516134f6565b945092850192908501906001016135df565b5092979650505050505050565b6001600160a01b0391909116815260200190565b60006020828403121561364057600080fd5b813561364b8161304b565b9392505050565b6040810161366082856130e0565b60038310613670576136706130ca565b8260208301529392505050565b6000806040838503121561369057600080fd5b823561369b8161304b565b915060208301356136ab8161304b565b809150509250929050565b60208152600061364b60208301846134f6565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156136f9576136f96136c9565b90039392505050565b60006020828403121561371457600080fd5b5051919050565b60008282101561372d5761372d6136c9565b500390565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561375a57600080fd5b815161364b8161304b565b634e487b7160e01b600052603260045260246000fd5b60006001820161378d5761378d6136c9565b5060010190565b9182526001600160a01b0316602082015260400190565b6000602082840312156137bd57600080fd5b8151801515811461364b57600080fd5b604051601f8201601f191681016001600160401b03811182821017156137f5576137f5613732565b604052919050565b60006020828403121561380f57600080fd5b81516001600160401b038082111561382657600080fd5b818401915084601f83011261383a57600080fd5b81518181111561384c5761384c613732565b61385f601f8201601f19166020016137cd565b915080825285602082850101111561387657600080fd5b612db38160208401602086016130f4565b600080600080600060a0868803121561389f57600080fd5b85519450602086015180600f0b81146138b757600080fd5b6040870151606088015160809098015196999198509695945092505050565b600060208083850312156138e957600080fd5b82516001600160401b038082111561390057600080fd5b818501915085601f83011261391457600080fd5b81518181111561392657613926613732565b8060051b91506139378483016137cd565b818152918301840191848101908884111561395157600080fd5b938501935b8385101561396f57845182529385019390850190613956565b98975050505050505050565b6006811061306057600080fd5b60006020828403121561399a57600080fd5b815161364b8161397b565b6000602082840312156139b757600080fd5b81516001600160801b038116811461364b57600080fdfea26469706673582212203bc64b0884bc1a46ef23a0e39cee9d01d9ac19a05dc517611c03784399227b9d64736f6c634300080d0033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "LaunchpegLens constructor",
        "params": {
          "_batchReveal": "BatchReveal address",
          "_launchpegFactoryV1": "LaunchpegFactory V1",
          "_launchpegFactoryV2": "LaunchpegFactory V2"
        }
      },
      "getLaunchpegData(address,address)": {
        "params": {
          "_launchpeg": "Contract address to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations"
        },
        "returns": {
          "_0": "LensData Contract data"
        }
      },
      "getLaunchpegType(address)": {
        "params": {
          "_contract": "Contract address to consider"
        },
        "returns": {
          "_0": "LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)"
        }
      },
      "getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)": {
        "params": {
          "_limit": "Last Launchpeg index to fetch",
          "_number": "Number of Launchpeg to fetch",
          "_type": "Type of Launchpeg to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations",
          "_version": "Launchpeg version"
        },
        "returns": {
          "_0": "LensDataList List of contracts datas, in descending order"
        }
      }
    },
    "title": "Launchpeg Lens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchReveal()": {
        "notice": "BatchReveal address"
      },
      "getLaunchpegData(address,address)": {
        "notice": "Fetch Launchpeg data from the provided address"
      },
      "getLaunchpegType(address)": {
        "notice": "Gets the type and version of Launchpeg"
      },
      "getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)": {
        "notice": "Fetch Launchpeg data by type and version"
      },
      "launchpegFactoryV1()": {
        "notice": "LaunchpegFactory V1"
      },
      "launchpegFactoryV2()": {
        "notice": "LaunchpegFactory V2"
      }
    },
    "notice": "Helper contract to fetch launchpegs data",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}