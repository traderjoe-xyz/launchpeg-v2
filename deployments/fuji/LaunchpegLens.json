{
  "address": "0xE2197382f9dD8E3fD274ffaDa2b4Cf862839E15C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "_launchpegFactoryV1",
          "type": "address"
        },
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "_launchpegFactoryV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batchReveal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidLaunchpegType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaunchpegLens__InvalidLaunchpegVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "batchReveal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPerAddressDuringMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMintedWithPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "projectOwners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedByDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawAVAXStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "launchpegBalanceAVAX",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ProjectOwnerData",
              "name": "projectOwnerData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "getLaunchpegType",
      "outputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "enum LaunchpegLens.LaunchpegVersion",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LaunchpegLens.LaunchpegType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "enum LaunchpegLens.LaunchpegVersion",
          "name": "_version",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLaunchpegsByTypeAndVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "enum LaunchpegLens.LaunchpegType",
              "name": "launchType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "collectionSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPerAddressDuringMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "unrevealedURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                }
              ],
              "internalType": "struct LaunchpegLens.CollectionData",
              "name": "collectionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionStartPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionEndPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionSaleDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionDropPerStep",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleDiscountPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSalePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAuctionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAuction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.LaunchpegData",
              "name": "launchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum IBaseLaunchpeg.Phase",
                  "name": "currentPhase",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountForDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "preMintStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "publicSaleEndTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowlistPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringAllowlist",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedDuringPublicSale",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.FlatLaunchpegData",
              "name": "flatLaunchpegData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "revealBatchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastTokenRevealed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "revealInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.RevealData",
              "name": "revealData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "balanceOf",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMinted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberMintedWithPreMint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allowanceForAllowlistMint",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.UserData",
              "name": "userData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "projectOwners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMintedByDevs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawAVAXStartTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "launchpegBalanceAVAX",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LaunchpegLens.ProjectOwnerData",
              "name": "projectOwnerData",
              "type": "tuple"
            }
          ],
          "internalType": "struct LaunchpegLens.LensData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactoryV1",
      "outputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpegFactoryV2",
      "outputs": [
        {
          "internalType": "contract ILaunchpegFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1811106b0b6b817ee4beeed33ae42b6dac6ee143bb999db3d651750cdf90d843",
  "receipt": {
    "to": null,
    "from": "0x765BB83d3252b2707AeBE3b09472322feAb0AD8E",
    "contractAddress": "0xE2197382f9dD8E3fD274ffaDa2b4Cf862839E15C",
    "transactionIndex": 0,
    "gasUsed": "2870817",
    "logsBloom": "0x
    "blockHash": "0x15359e339fcdffb17e36e65d19721afb317666cbb62790a8c00add0d21ae0de9",
    "transactionHash": "0x1811106b0b6b817ee4beeed33ae42b6dac6ee143bb999db3d651750cdf90d843",
    "logs": [],
    "blockNumber": 15536025,
    "cumulativeGasUsed": "2870817",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdB40a7b71642FE24CC546bdF4749Aa3c0B042f78",
    "0x0d22EF1C5372677c8680fb485c6A1Ce43eA58eaF",
    "0x55Be138160b53e0D1130fb33556ae360fD625bDe"
  ],
  "numDeployments": 10,
  "solcInputHash": "01e2e6342c96f1200dc578ed1e7d4da2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"_launchpegFactoryV1\",\"type\":\"address\"},{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"_launchpegFactoryV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchReveal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidLaunchpegType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaunchpegLens__InvalidLaunchpegVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"batchReveal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMintedWithPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"projectOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedByDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchpegBalanceAVAX\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ProjectOwnerData\",\"name\":\"projectOwnerData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getLaunchpegType\",\"outputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegVersion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegVersion\",\"name\":\"_version\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLaunchpegsByTypeAndVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"enum LaunchpegLens.LaunchpegType\",\"name\":\"launchType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerAddressDuringMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"unrevealedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct LaunchpegLens.CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDropPerStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDiscountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.LaunchpegData\",\"name\":\"launchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IBaseLaunchpeg.Phase\",\"name\":\"currentPhase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountForAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountForDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preMintStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowlistPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringAllowlist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedDuringPublicSale\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.FlatLaunchpegData\",\"name\":\"flatLaunchpegData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revealBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenRevealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.RevealData\",\"name\":\"revealData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberMintedWithPreMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceForAllowlistMint\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"projectOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMintedByDevs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAVAXStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchpegBalanceAVAX\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpegLens.ProjectOwnerData\",\"name\":\"projectOwnerData\",\"type\":\"tuple\"}],\"internalType\":\"struct LaunchpegLens.LensData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactoryV1\",\"outputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpegFactoryV2\",\"outputs\":[{\"internalType\":\"contract ILaunchpegFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"LaunchpegLens constructor\",\"params\":{\"_batchReveal\":\"BatchReveal address\",\"_launchpegFactoryV1\":\"LaunchpegFactory V1\",\"_launchpegFactoryV2\":\"LaunchpegFactory V2\"}},\"getLaunchpegData(address,address)\":{\"params\":{\"_launchpeg\":\"Contract address to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\"},\"returns\":{\"_0\":\"LensData Contract data\"}},\"getLaunchpegType(address)\":{\"params\":{\"_contract\":\"Contract address to consider\"},\"returns\":{\"_0\":\"LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\"}},\"getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)\":{\"params\":{\"_limit\":\"Last Launchpeg index to fetch\",\"_number\":\"Number of Launchpeg to fetch\",\"_type\":\"Type of Launchpeg to consider\",\"_user\":\"Address to consider for NFT balances and allowlist allocations\",\"_version\":\"Launchpeg version\"},\"returns\":{\"_0\":\"LensDataList List of contracts datas, in descending order\"}}},\"title\":\"Launchpeg Lens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchReveal()\":{\"notice\":\"BatchReveal address\"},\"getLaunchpegData(address,address)\":{\"notice\":\"Fetch Launchpeg data from the provided address\"},\"getLaunchpegType(address)\":{\"notice\":\"Gets the type and version of Launchpeg\"},\"getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)\":{\"notice\":\"Fetch Launchpeg data by type and version\"},\"launchpegFactoryV1()\":{\"notice\":\"LaunchpegFactory V1\"},\"launchpegFactoryV2()\":{\"notice\":\"LaunchpegFactory V2\"}},\"notice\":\"Helper contract to fetch launchpegs data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpegLens.sol\":\"LaunchpegLens\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/LaunchpegLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IBaseLaunchpeg.sol\\\";\\nimport \\\"./interfaces/IBaseLaunchpegV1.sol\\\";\\nimport \\\"./interfaces/IBatchReveal.sol\\\";\\nimport \\\"./interfaces/IFlatLaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpeg.sol\\\";\\nimport \\\"./interfaces/ILaunchpegFactory.sol\\\";\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\nerror LaunchpegLens__InvalidContract();\\nerror LaunchpegLens__InvalidLaunchpegType();\\nerror LaunchpegLens__InvalidLaunchpegVersion();\\n\\n/// @title Launchpeg Lens\\n/// @author Trader Joe\\n/// @notice Helper contract to fetch launchpegs data\\ncontract LaunchpegLens {\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        uint256 collectionSize;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 totalSupply;\\n        string unrevealedURI;\\n        string baseURI;\\n    }\\n\\n    struct LaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 auctionSaleStartTime;\\n        uint256 preMintStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 auctionStartPrice;\\n        uint256 auctionEndPrice;\\n        uint256 auctionSaleDuration;\\n        uint256 auctionDropInterval;\\n        uint256 auctionDropPerStep;\\n        uint256 allowlistDiscountPercent;\\n        uint256 publicSaleDiscountPercent;\\n        uint256 auctionPrice;\\n        uint256 allowlistPrice;\\n        uint256 publicSalePrice;\\n        uint256 lastAuctionPrice;\\n        uint256 amountMintedDuringAuction;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct FlatLaunchpegData {\\n        ILaunchpeg.Phase currentPhase;\\n        uint256 amountForAllowlist;\\n        uint256 amountForDevs;\\n        uint256 preMintStartTime;\\n        uint256 allowlistStartTime;\\n        uint256 publicSaleStartTime;\\n        uint256 publicSaleEndTime;\\n        uint256 allowlistPrice;\\n        uint256 salePrice;\\n        uint256 amountMintedDuringPreMint;\\n        uint256 amountMintedDuringAllowlist;\\n        uint256 amountMintedDuringPublicSale;\\n    }\\n\\n    struct RevealData {\\n        uint256 revealBatchSize;\\n        uint256 lastTokenRevealed;\\n        uint256 revealStartTime;\\n        uint256 revealInterval;\\n    }\\n\\n    struct UserData {\\n        uint256 balanceOf;\\n        uint256 numberMinted;\\n        uint256 numberMintedWithPreMint;\\n        uint256 allowanceForAllowlistMint;\\n    }\\n\\n    struct ProjectOwnerData {\\n        address[] projectOwners;\\n        uint256 amountMintedByDevs;\\n        uint256 withdrawAVAXStartTime;\\n        uint256 launchpegBalanceAVAX;\\n    }\\n\\n    /// Global struct that is returned by getAllLaunchpegs()\\n    struct LensData {\\n        address id;\\n        LaunchpegType launchType;\\n        CollectionData collectionData;\\n        LaunchpegData launchpegData;\\n        FlatLaunchpegData flatLaunchpegData;\\n        RevealData revealData;\\n        UserData userData;\\n        ProjectOwnerData projectOwnerData;\\n    }\\n\\n    enum LaunchpegType {\\n        Unknown,\\n        Launchpeg,\\n        FlatLaunchpeg\\n    }\\n\\n    enum LaunchpegVersion {\\n        Unknown,\\n        V1,\\n        V2\\n    }\\n\\n    /// @notice LaunchpegFactory V1\\n    ILaunchpegFactory public immutable launchpegFactoryV1;\\n\\n    /// @notice LaunchpegFactory V2\\n    ILaunchpegFactory public immutable launchpegFactoryV2;\\n\\n    /// @notice BatchReveal address\\n    address public immutable batchReveal;\\n\\n    /// @dev LaunchpegLens constructor\\n    /// @param _launchpegFactoryV1 LaunchpegFactory V1\\n    /// @param _launchpegFactoryV2 LaunchpegFactory V2\\n    /// @param _batchReveal BatchReveal address\\n    constructor(\\n        ILaunchpegFactory _launchpegFactoryV1,\\n        ILaunchpegFactory _launchpegFactoryV2,\\n        address _batchReveal\\n    ) {\\n        launchpegFactoryV1 = _launchpegFactoryV1;\\n        launchpegFactoryV2 = _launchpegFactoryV2;\\n        batchReveal = _batchReveal;\\n    }\\n\\n    /// @notice Gets the type and version of Launchpeg\\n    /// @param _contract Contract address to consider\\n    /// @return LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)\\n    function getLaunchpegType(address _contract)\\n        public\\n        view\\n        returns (LaunchpegType, LaunchpegVersion)\\n    {\\n        if (launchpegFactoryV1.isLaunchpeg(0, _contract)) {\\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V1);\\n        } else if (launchpegFactoryV2.isLaunchpeg(0, _contract)) {\\n            return (LaunchpegType.Launchpeg, LaunchpegVersion.V2);\\n        } else if (launchpegFactoryV1.isLaunchpeg(1, _contract)) {\\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V1);\\n        } else if (launchpegFactoryV2.isLaunchpeg(1, _contract)) {\\n            return (LaunchpegType.FlatLaunchpeg, LaunchpegVersion.V2);\\n        } else {\\n            return (LaunchpegType.Unknown, LaunchpegVersion.Unknown);\\n        }\\n    }\\n\\n    /// @notice Fetch Launchpeg data by type and version\\n    /// @param _type Type of Launchpeg to consider\\n    /// @param _version Launchpeg version\\n    /// @param _number Number of Launchpeg to fetch\\n    /// @param _limit Last Launchpeg index to fetch\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensDataList List of contracts datas, in descending order\\n    function getLaunchpegsByTypeAndVersion(\\n        LaunchpegType _type,\\n        LaunchpegVersion _version,\\n        uint256 _number,\\n        uint256 _limit,\\n        address _user\\n    ) external view returns (LensData[] memory) {\\n        if (_type == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidLaunchpegType();\\n        }\\n        if (_version == LaunchpegVersion.Unknown) {\\n            revert LaunchpegLens__InvalidLaunchpegVersion();\\n        }\\n        // default to v2 unless v1 is specified\\n        ILaunchpegFactory factory = (_version == LaunchpegVersion.V1)\\n            ? launchpegFactoryV1\\n            : launchpegFactoryV2;\\n        // 0 - Launchpeg, 1 - FlatLaunchpeg\\n        uint256 lpTypeIdx = uint8(_type) - 1;\\n        uint256 numLaunchpegs = factory.numLaunchpegs(lpTypeIdx);\\n\\n        uint256 end = _limit > numLaunchpegs ? numLaunchpegs : _limit;\\n        uint256 start = _number > end ? 0 : end - _number;\\n\\n        LensData[] memory LensDatas;\\n        LensDatas = new LensData[](end - start);\\n\\n        for (uint256 i = 0; i < LensDatas.length; i++) {\\n            LensDatas[i] = getLaunchpegData(\\n                factory.allLaunchpegs(lpTypeIdx, end - 1 - i),\\n                _user\\n            );\\n        }\\n\\n        return LensDatas;\\n    }\\n\\n    /// @notice Fetch Launchpeg data from the provided address\\n    /// @param _launchpeg Contract address to consider\\n    /// @param _user Address to consider for NFT balances and allowlist allocations\\n    /// @return LensData Contract data\\n    function getLaunchpegData(address _launchpeg, address _user)\\n        public\\n        view\\n        returns (LensData memory)\\n    {\\n        (\\n            LaunchpegType launchType,\\n            LaunchpegVersion launchVersion\\n        ) = getLaunchpegType(_launchpeg);\\n        if (launchType == LaunchpegType.Unknown) {\\n            revert LaunchpegLens__InvalidContract();\\n        }\\n\\n        LensData memory data;\\n        data.id = _launchpeg;\\n        data.launchType = launchType;\\n        data.collectionData = _getCollectionData(_launchpeg);\\n        data.projectOwnerData = _getProjectOwnerData(_launchpeg, launchVersion);\\n        data.revealData = _getBatchRevealData(_launchpeg, launchVersion);\\n        data.userData = _getUserData(_launchpeg, launchVersion, _user);\\n\\n        if (data.launchType == LaunchpegType.Launchpeg) {\\n            data.launchpegData = _getLaunchpegData(_launchpeg, launchVersion);\\n        } else if (data.launchType == LaunchpegType.FlatLaunchpeg) {\\n            data.flatLaunchpegData = _getFlatLaunchpegData(\\n                _launchpeg,\\n                launchVersion\\n            );\\n        }\\n\\n        return data;\\n    }\\n\\n    /// @dev Fetches Launchpeg collection data\\n    /// @param _launchpeg Launchpeg address\\n    function _getCollectionData(address _launchpeg)\\n        private\\n        view\\n        returns (CollectionData memory data)\\n    {\\n        data.name = ERC721AUpgradeable(_launchpeg).name();\\n        data.symbol = ERC721AUpgradeable(_launchpeg).symbol();\\n        data.collectionSize = IBaseLaunchpeg(_launchpeg).collectionSize();\\n        data.maxPerAddressDuringMint = IBaseLaunchpeg(_launchpeg)\\n            .maxPerAddressDuringMint();\\n        data.totalSupply = ERC721AUpgradeable(_launchpeg).totalSupply();\\n        data.unrevealedURI = IBaseLaunchpeg(_launchpeg).unrevealedURI();\\n        data.baseURI = IBaseLaunchpeg(_launchpeg).baseURI();\\n    }\\n\\n    /// @dev Fetches Launchpeg project owner data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getProjectOwnerData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (ProjectOwnerData memory data) {\\n        data.amountMintedByDevs = IBaseLaunchpeg(_launchpeg)\\n            .amountMintedByDevs();\\n        data.launchpegBalanceAVAX = _launchpeg.balance;\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            address[] memory projectOwners = new address[](1);\\n            projectOwners[0] = IBaseLaunchpegV1(_launchpeg).projectOwner();\\n            data.projectOwners = projectOwners;\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            data.projectOwners = _getProjectOwners(_launchpeg);\\n            data.withdrawAVAXStartTime = IBaseLaunchpeg(_launchpeg)\\n                .withdrawAVAXStartTime();\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg project owners. Only works for Launchpeg V2.\\n    /// @param _launchpeg Launchpeg address\\n    function _getProjectOwners(address _launchpeg)\\n        private\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32 role = IBaseLaunchpeg(_launchpeg).PROJECT_OWNER_ROLE();\\n        uint256 count = IAccessControlEnumerableUpgradeable(_launchpeg)\\n            .getRoleMemberCount(role);\\n        address[] memory projectOwners = new address[](count);\\n        for (uint256 i; i < count; i++) {\\n            projectOwners[i] = IAccessControlEnumerableUpgradeable(_launchpeg)\\n                .getRoleMember(role, i);\\n        }\\n        return projectOwners;\\n    }\\n\\n    /// @dev Fetches Launchpeg data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getLaunchpegData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (LaunchpegData memory data) {\\n        ILaunchpeg lp = ILaunchpeg(_launchpeg);\\n        data.currentPhase = lp.currentPhase();\\n        data.amountForAuction = lp.amountForAuction();\\n        data.amountForAllowlist = lp.amountForAllowlist();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.auctionSaleStartTime = lp.auctionSaleStartTime();\\n        data.allowlistStartTime = lp.allowlistStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.auctionStartPrice = lp.auctionStartPrice();\\n        data.auctionEndPrice = lp.auctionEndPrice();\\n        data.auctionSaleDuration = lp.auctionSaleDuration();\\n        data.auctionDropInterval = lp.auctionDropInterval();\\n        data.auctionDropPerStep = lp.auctionDropPerStep();\\n        data.allowlistDiscountPercent = lp.allowlistDiscountPercent();\\n        data.publicSaleDiscountPercent = lp.publicSaleDiscountPercent();\\n        data.auctionPrice = lp.getAuctionPrice(data.auctionSaleStartTime);\\n        data.lastAuctionPrice = lp.lastAuctionPrice();\\n        data.amountMintedDuringAuction = lp.amountMintedDuringAuction();\\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            data.allowlistPrice = IBaseLaunchpegV1(_launchpeg)\\n                .getAllowlistPrice();\\n            data.publicSalePrice = IBaseLaunchpegV1(_launchpeg)\\n                .getPublicSalePrice();\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            data.allowlistPrice = lp.allowlistPrice();\\n            data.publicSalePrice = lp.salePrice();\\n            data.preMintStartTime = lp.preMintStartTime();\\n            data.publicSaleEndTime = lp.publicSaleEndTime();\\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n        }\\n    }\\n\\n    /// @dev Fetches FlatLaunchpeg data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getFlatLaunchpegData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (FlatLaunchpegData memory data) {\\n        IFlatLaunchpeg lp = IFlatLaunchpeg(_launchpeg);\\n        data.currentPhase = lp.currentPhase();\\n        data.amountForAllowlist = lp.amountForAllowlist();\\n        data.amountForDevs = lp.amountForDevs();\\n        data.allowlistStartTime = lp.allowlistStartTime();\\n        data.publicSaleStartTime = lp.publicSaleStartTime();\\n        data.allowlistPrice = lp.allowlistPrice();\\n        data.salePrice = lp.salePrice();\\n        data.amountMintedDuringAllowlist = lp.amountMintedDuringAllowlist();\\n        data.amountMintedDuringPublicSale = lp.amountMintedDuringPublicSale();\\n        if (launchVersion == LaunchpegVersion.V2) {\\n            data.preMintStartTime = lp.preMintStartTime();\\n            data.publicSaleEndTime = lp.publicSaleEndTime();\\n            data.amountMintedDuringPreMint = lp.amountMintedDuringPreMint();\\n        }\\n    }\\n\\n    /// @dev Fetches batch reveal data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getBatchRevealData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion\\n    ) private view returns (RevealData memory data) {\\n        if (launchVersion == LaunchpegVersion.V1) {\\n            IBaseLaunchpegV1 br = IBaseLaunchpegV1(_launchpeg);\\n            data.revealBatchSize = br.revealBatchSize();\\n            data.revealStartTime = br.revealStartTime();\\n            data.revealInterval = br.revealInterval();\\n            data.lastTokenRevealed = br.lastTokenRevealed();\\n        } else if (launchVersion == LaunchpegVersion.V2) {\\n            (\\n                ,\\n                ,\\n                uint256 revealBatchSize,\\n                uint256 revealStartTime,\\n                uint256 revealInterval\\n            ) = IBatchReveal(batchReveal).launchpegToConfig(_launchpeg);\\n            data.revealBatchSize = revealBatchSize;\\n            data.revealStartTime = revealStartTime;\\n            data.revealInterval = revealInterval;\\n            data.lastTokenRevealed = IBatchReveal(batchReveal)\\n                .launchpegToLastTokenReveal(_launchpeg);\\n        }\\n    }\\n\\n    /// @dev Fetches Launchpeg user data\\n    /// @param _launchpeg Launchpeg address\\n    /// @param launchVersion Launchpeg version\\n    function _getUserData(\\n        address _launchpeg,\\n        LaunchpegVersion launchVersion,\\n        address _user\\n    ) private view returns (UserData memory data) {\\n        if (_user != address(0)) {\\n            data.balanceOf = ERC721AUpgradeable(_launchpeg).balanceOf(_user);\\n            data.numberMinted = IBaseLaunchpeg(_launchpeg).numberMinted(_user);\\n            data.allowanceForAllowlistMint = IBaseLaunchpeg(_launchpeg)\\n                .allowlist(_user);\\n            if (launchVersion == LaunchpegVersion.V2) {\\n                data.numberMintedWithPreMint = IBaseLaunchpeg(_launchpeg)\\n                    .numberMintedWithPreMint(_user);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d9478aaac29f9aa0eb3ab1bf4fc403bb5b137c2588797562ea692743af79a73\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\nimport \\\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\\\";\\n\\n/// @title IBaseLaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BaseLaunchpeg\\ninterface IBaseLaunchpeg is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    enum Phase {\\n        NotStarted,\\n        DutchAuction,\\n        PreMint,\\n        Allowlist,\\n        PublicSale,\\n        Ended\\n    }\\n\\n    /// @notice Collection data to initialize Launchpeg\\n    /// @param name ERC721 name\\n    /// @param symbol ERC721 symbol\\n    /// @param maxPerAddressDuringMint Max amount of NFTs an address can mint in public phases\\n    /// @param collectionSize The collection size (e.g 10000)\\n    /// @param amountForDevs Amount of NFTs reserved for `projectOwner` (e.g 200)\\n    /// @param amountForAuction Amount of NFTs available for the auction (e.g 8000)\\n    /// @param amountForAllowlist Amount of NFTs available for the allowlist mint (e.g 1000)\\n    struct CollectionData {\\n        string name;\\n        string symbol;\\n        address batchReveal;\\n        uint256 maxPerAddressDuringMint;\\n        uint256 collectionSize;\\n        uint256 amountForDevs;\\n        uint256 amountForAuction;\\n        uint256 amountForAllowlist;\\n    }\\n\\n    /// @notice Collection owner data to initialize Launchpeg\\n    /// @param owner The contract owner\\n    /// @param projectOwner The project owner\\n    /// @param royaltyReceiver Royalty fee collector\\n    /// @param joeFeeCollector The address to which the fees on the sale will be sent\\n    /// @param joeFeePercent The fees collected by the fee collector on the sale benefits\\n    struct CollectionOwnerData {\\n        address owner;\\n        address projectOwner;\\n        address royaltyReceiver;\\n        address joeFeeCollector;\\n        uint256 joeFeePercent;\\n    }\\n\\n    function PROJECT_OWNER_ROLE() external pure returns (bytes32);\\n\\n    function collectionSize() external view returns (uint256);\\n\\n    function unrevealedURI() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function amountForDevs() external view returns (uint256);\\n\\n    function amountForAllowlist() external view returns (uint256);\\n\\n    function maxPerAddressDuringMint() external view returns (uint256);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function allowlist(address) external view returns (uint256);\\n\\n    function amountMintedByDevs() external view returns (uint256);\\n\\n    function amountMintedDuringPreMint() external view returns (uint256);\\n\\n    function amountClaimedDuringPreMint() external view returns (uint256);\\n\\n    function amountMintedDuringAllowlist() external view returns (uint256);\\n\\n    function amountMintedDuringPublicSale() external view returns (uint256);\\n\\n    function preMintStartTime() external view returns (uint256);\\n\\n    function allowlistStartTime() external view returns (uint256);\\n\\n    function publicSaleStartTime() external view returns (uint256);\\n\\n    function publicSaleEndTime() external view returns (uint256);\\n\\n    function withdrawAVAXStartTime() external view returns (uint256);\\n\\n    function allowlistPrice() external view returns (uint256);\\n\\n    function salePrice() external view returns (uint256);\\n\\n    function initializeBatchReveal(address _batchReveal) external;\\n\\n    function setRoyaltyInfo(address receiver, uint96 feePercent) external;\\n\\n    function seedAllowlist(\\n        address[] memory _addresses,\\n        uint256[] memory _numSlots\\n    ) external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function setUnrevealedURI(string calldata baseURI) external;\\n\\n    function setPreMintStartTime(uint256 _preMintStartTime) external;\\n\\n    function setAllowlistStartTime(uint256 _allowlistStartTime) external;\\n\\n    function setPublicSaleStartTime(uint256 _publicSaleStartTime) external;\\n\\n    function setPublicSaleEndTime(uint256 _publicSaleEndTime) external;\\n\\n    function setWithdrawAVAXStartTime(uint256 _withdrawAVAXStartTime) external;\\n\\n    function devMint(uint256 quantity) external;\\n\\n    function preMint(uint96 _quantity) external payable;\\n\\n    function claimPreMint() external;\\n\\n    function batchClaimPreMint(uint96 _maxQuantity) external;\\n\\n    function allowlistMint(uint256 _quantity) external payable;\\n\\n    function publicSaleMint(uint256 _quantity) external payable;\\n\\n    function withdrawAVAX(address to) external;\\n\\n    function getOwnershipData(uint256 tokenId)\\n        external\\n        view\\n        returns (ERC721AUpgradeable.TokenOwnership memory);\\n\\n    function userPendingPreMints(address owner) external view returns (uint256);\\n\\n    function numberMinted(address owner) external view returns (uint256);\\n\\n    function numberMintedWithPreMint(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentPhase() external view returns (Phase);\\n\\n    function revealNextBatch() external;\\n\\n    function hasBatchToReveal() external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0xd3b885fbd7c31bb5d12487bef4b34a08652ecfbfb0fe0ab2bb87b6a3fe80c289\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseLaunchpegV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBaseLaunchpegV1\\n/// @author Trader Joe\\n/// @notice Defines the legacy methods in Launchpeg V1 contracts\\ninterface IBaseLaunchpegV1 {\\n    /** IBaseLaunchpeg */\\n    function projectOwner() external view returns (address);\\n\\n    /** ILaunchpeg */\\n    function getAllowlistPrice() external view returns (uint256);\\n\\n    function getPublicSalePrice() external view returns (uint256);\\n\\n    /** IBatchReveal */\\n    function revealBatchSize() external view returns (uint256);\\n\\n    function lastTokenRevealed() external view returns (uint256);\\n\\n    function revealStartTime() external view returns (uint256);\\n\\n    function revealInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90c6d2b0c4fea173411df6d3ccbfb4a4aaa540a0f25fe5d37822785afa9abcf0\",\"license\":\"MIT\"},\"contracts/interfaces/IBatchReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title IBatchReveal\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of BatchReveal\\ninterface IBatchReveal {\\n    struct BatchRevealConfig {\\n        uint256 collectionSize;\\n        int128 intCollectionSize;\\n        /// @notice Size of the batch reveal\\n        /// @dev Must divide collectionSize\\n        uint256 revealBatchSize;\\n        /// @notice Timestamp for the start of the reveal process\\n        /// @dev Can be set to zero for immediate reveal after token mint\\n        uint256 revealStartTime;\\n        /// @notice Time interval for gradual reveal\\n        /// @dev Can be set to zero in order to reveal the collection all at once\\n        uint256 revealInterval;\\n    }\\n\\n    function initialize() external;\\n\\n    function configure(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize,\\n        uint256 _revealStartTime,\\n        uint256 _revealInterval\\n    ) external;\\n\\n    function setRevealBatchSize(\\n        address _baseLaunchpeg,\\n        uint256 _revealBatchSize\\n    ) external;\\n\\n    function setRevealStartTime(\\n        address _baseLaunchpeg,\\n        uint256 _revealStartTime\\n    ) external;\\n\\n    function setRevealInterval(address _baseLaunchpeg, uint256 _revealInterval)\\n        external;\\n\\n    function setVRF(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit\\n    ) external;\\n\\n    function launchpegToConfig(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int128,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function launchpegToBatchToSeed(address, uint256)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToLastTokenReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function useVRF() external view returns (bool);\\n\\n    function subscriptionId() external view returns (uint64);\\n\\n    function keyHash() external view returns (bytes32);\\n\\n    function callbackGasLimit() external view returns (uint32);\\n\\n    function requestConfirmations() external view returns (uint16);\\n\\n    function launchpegToNextBatchToReveal(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function launchpegToHasBeenForceRevealed(address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function launchpegToVrfRequestedForBatch(address, uint256)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getShuffledTokenId(address _baseLaunchpeg, uint256 _startId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isBatchRevealInitialized(address _baseLaunchpeg)\\n        external\\n        view\\n        returns (bool);\\n\\n    function revealNextBatch(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        returns (bool);\\n\\n    function hasBatchToReveal(address _baseLaunchpeg, uint256 _totalSupply)\\n        external\\n        view\\n        returns (bool, uint256);\\n\\n    function forceReveal(address _baseLaunchpeg) external;\\n}\\n\",\"keccak256\":\"0xc3232cf50271c82a2ab5713261f97727592c6be0ae6ce0d70906c6429311baea\",\"license\":\"MIT\"},\"contracts/interfaces/IFlatLaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of FlatLaunchpeg\\ninterface IFlatLaunchpeg is IBaseLaunchpeg {\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _allowlistPrice,\\n        uint256 _salePrice\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4f38566f1d19abf8482e5c1af31672449567c2b74fc7d7d4ee99c9c5134fa75e\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpeg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBaseLaunchpeg.sol\\\";\\n\\n/// @title ILaunchpeg\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of Launchpeg\\ninterface ILaunchpeg is IBaseLaunchpeg {\\n    function amountForAuction() external view returns (uint256);\\n\\n    function auctionSaleStartTime() external view returns (uint256);\\n\\n    function auctionStartPrice() external view returns (uint256);\\n\\n    function auctionEndPrice() external view returns (uint256);\\n\\n    function auctionSaleDuration() external view returns (uint256);\\n\\n    function auctionDropInterval() external view returns (uint256);\\n\\n    function auctionDropPerStep() external view returns (uint256);\\n\\n    function allowlistDiscountPercent() external view returns (uint256);\\n\\n    function publicSaleDiscountPercent() external view returns (uint256);\\n\\n    function amountMintedDuringAuction() external view returns (uint256);\\n\\n    function lastAuctionPrice() external view returns (uint256);\\n\\n    function getAuctionPrice(uint256 _saleStartTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function initialize(\\n        CollectionData calldata _collectionData,\\n        CollectionOwnerData calldata _ownerData\\n    ) external;\\n\\n    function initializePhases(\\n        uint256 _auctionSaleStartTime,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionDropInterval,\\n        uint256 _preMintStartTime,\\n        uint256 _allowlistStartTime,\\n        uint256 _allowlistDiscountPercent,\\n        uint256 _publicSaleStartTime,\\n        uint256 _publicSaleEndTime,\\n        uint256 _publicSaleDiscountPercent\\n    ) external;\\n\\n    function setAuctionSaleStartTime(uint256 _auctionSaleStartTime) external;\\n\\n    function auctionMint(uint256 _quantity) external payable;\\n}\\n\",\"keccak256\":\"0xb8f6dd352d238910507700f03b2e8f3f843fb3267fcb369876af1f272a356332\",\"license\":\"MIT\"},\"contracts/interfaces/ILaunchpegFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title ILaunchpegFactory\\n/// @author Trader Joe\\n/// @notice Defines the basic interface of LaunchpegFactory\\ninterface ILaunchpegFactory {\\n    function LAUNCHPEG_PAUSER_ROLE() external pure returns (bytes32);\\n\\n    function launchpegImplementation() external view returns (address);\\n\\n    function flatLaunchpegImplementation() external view returns (address);\\n\\n    function batchReveal() external view returns (address);\\n\\n    function joeFeePercent() external view returns (uint256);\\n\\n    function joeFeeCollector() external view returns (address);\\n\\n    function isLaunchpeg(uint256 _type, address _contract)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allLaunchpegs(uint256 _launchpegType, uint256 _launchpegID)\\n        external\\n        view\\n        returns (address);\\n\\n    function numLaunchpegs(uint256 _launchpegType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForAuction,\\n        uint256 _amountForAllowlist,\\n        uint256 _amountForDevs,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function createFlatLaunchpeg(\\n        string memory _name,\\n        string memory _symbol,\\n        address _projectOwner,\\n        address _royaltyReceiver,\\n        uint256 _maxPerAddressDuringMint,\\n        uint256 _collectionSize,\\n        uint256 _amountForDevs,\\n        uint256 _amountForAllowlist,\\n        bool _enableBatchReveal\\n    ) external returns (address);\\n\\n    function setLaunchpegImplementation(address _launchpegImplementation)\\n        external;\\n\\n    function setFlatLaunchpegImplementation(\\n        address _flatLaunchpegImplementation\\n    ) external;\\n\\n    function setBatchReveal(address _batchReveal) external;\\n\\n    function setDefaultJoeFeePercent(uint256 _joeFeePercent) external;\\n\\n    function setDefaultJoeFeeCollector(address _joeFeeCollector) external;\\n\\n    function addLaunchpegPauser(address _pauser) external;\\n\\n    function removeLaunchpegPauser(address _pauser) external;\\n\\n    function pauseLaunchpeg(address _launchpeg) external;\\n}\\n\",\"keccak256\":\"0xc41cda9f99e4d8a562de2d7f6e7626eac17d5fbb11fd0c8deb3dae9b85298f94\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/ERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x261da8ec505b55cf307604eefd0f0e6e374860ca4730efad50b87e43f7660b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200342b3803806200342b83398101604081905262000034916200005c565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000c9565b6000806000606084860312156200007257600080fd5b83516200007f81620000b0565b60208501519093506200009281620000b0565b6040850151909250620000a581620000b0565b809150509250925092565b6001600160a01b0381168114620000c657600080fd5b50565b60805160601c60a05160601c60c05160601c6132f462000137600039600081816095015281816110a6015261115901526000818160d4015281816101e30152818161052d015261068f01526000818160fb015281816102090152818161047d01526105de01526132f46000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806304fa66ba1461006757806321cc161114610090578063522ea9bc146100cf57806354dbc616146100f6578063a6a7b3ea1461011d578063d0b54b3b1461013e575b600080fd5b61007a610075366004612bf6565b61015e565b6040516100879190613111565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610087565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b61013061012b366004612b48565b610451565b604051610087929190613173565b61015161014c366004612b82565b610724565b6040516100879190613199565b6060600086600281111561017457610174613247565b14156101935760405163883ee45160e01b815260040160405180910390fd5b60008560028111156101a7576101a7613247565b14156101c6576040516305fdabfd60e41b815260040160405180910390fd5b600060018660028111156101dc576101dc613247565b14610207577f0000000000000000000000000000000000000000000000000000000000000000610229565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000600188600281111561024157610241613247565b61024b91906131c3565b60ff1690506000826001600160a01b031663776f1b1c836040518263ffffffff1660e01b815260040161028091815260200190565b60206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190612bdd565b905060008187116102e157866102e3565b815b905060008189116102fd576102f889836131ac565b610300565b60005b9050606061030e82846131ac565b67ffffffffffffffff81111561032657610326613273565b60405190808252806020026020018201604052801561035f57816020015b61034c612926565b8152602001906001900390816103445790505b50905060005b8151811015610441576104116001600160a01b03881663306ec748888461038d60018a6131ac565b61039791906131ac565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190612b65565b8a610724565b8282815181106104235761042361325d565b6020026020010181905250808061043990613216565b915050610365565b509b9a5050505050505050505050565b60405163abcc761760e01b81526000600482018190526001600160a01b038381166024840152909182917f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b1580156104bf57600080fd5b505afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190612bbb565b1561050757506001928392509050565b60405163abcc761760e01b8152600060048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b15801561056f57600080fd5b505afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a79190612bbb565b156105b85750600192600292509050565b60405163abcc761760e01b8152600160048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190612bbb565b156106695750600292600192509050565b60405163abcc761760e01b8152600160048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190612bbb565b1561071957506002928392509050565b506000928392509050565b61072c612926565b60008061073885610451565b9092509050600082600281111561075157610751613247565b141561077057604051630ca92ff360e31b815260040160405180910390fd5b610778612926565b6001600160a01b03861681526020810183600281111561079a5761079a613247565b908160028111156107ad576107ad613247565b9052506107b986610857565b60408201526107c88683610bfb565b60e08201526107d78683610e32565b60a08201526107e78683876111e5565b60c082015260018160200151600281111561080457610804613247565b141561081e576108148683611436565b606082015261084c565b60028160200151600281111561083657610836613247565b141561084c576108468683612118565b60808201525b925050505b92915050565b6108976040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b816001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090c9190810190612c76565b8160000181905250816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109899190810190612c76565b8160200181905250816001600160a01b03166345c0f5336040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190612bdd565b816040018181525050816001600160a01b0316638bc35c2f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4457600080fd5b505afa158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190612bdd565b816060018181525050816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190612bdd565b816080018181525050816001600160a01b0316637035bf186040518163ffffffff1660e01b815260040160006040518083038186803b158015610b3857600080fd5b505afa158015610b4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b749190810190612c76565b8160a00181905250816001600160a01b0316636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bb557600080fd5b505afa158015610bc9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bf19190810190612c76565b60c0820152919050565b610c266040518060800160405280606081526020016000815260200160008152602001600081525090565b826001600160a01b0316635c7034af6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190612bdd565b60208201526001600160a01b0383163160608201526001826002811115610cc057610cc0613247565b1415610d8b5760408051600180825281830190925260009160208083019080368337019050509050836001600160a01b031663a4475ce46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190612b65565b81600081518110610d6c57610d6c61325d565b6001600160a01b03909216602092830291909101909101528152610851565b6002826002811115610d9f57610d9f613247565b141561085157610dae8361271b565b8160000181905250826001600160a01b031663c792e1676040518163ffffffff1660e01b815260040160206040518083038186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190612bdd565b604082015292915050565b610e5d6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001826002811115610e7157610e71613247565b1415611066576000839050806001600160a01b0316630b5648106040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612bdd565b826000018181525050806001600160a01b031663cc0bef846040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190612bdd565b826040018181525050806001600160a01b031663247cd8ad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa957600080fd5b505afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190612bdd565b826060018181525050806001600160a01b031663f43191956040518163ffffffff1660e01b815260040160206040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612bdd565b602083015250610851565b600282600281111561107a5761107a613247565b141561085157604051630303a4b160e31b81526001600160a01b038481166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063181d25889060240160a06040518083038186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190612d23565b8289526040808a0183905260608a0182905251635e1578db60e11b81526001600160a01b038c8116600483015293985091965094507f0000000000000000000000000000000000000000000000000000000000000000909116925063bc2af1b6915060240160206040518083038186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190612bdd565b602085015250505092915050565b6112106040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b0382161561142f576040516370a0823160e01b81526001600160a01b0383811660048301528516906370a082319060240160206040518083038186803b15801561126057600080fd5b505afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190612bdd565b815260405163dc33e68160e01b81526001600160a01b03838116600483015285169063dc33e6819060240160206040518083038186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190612bdd565b602082015260405163a7cd52cb60e01b81526001600160a01b03838116600483015285169063a7cd52cb9060240160206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113919190612bdd565b606082015260028360028111156113aa576113aa613247565b141561142f5760405163aec3922b60e01b81526001600160a01b03838116600483015285169063aec3922b9060240160206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612bdd565b60408201525b9392505050565b61143e612a30565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b49190612c55565b829060058111156114c7576114c7613247565b908160058111156114da576114da613247565b81525050806001600160a01b031663f7df4c5a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151757600080fd5b505afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190612bdd565b826020018181525050806001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190612bdd565b826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116439190612bdd565b826060018181525050806001600160a01b031663fab2bf586040518163ffffffff1660e01b815260040160206040518083038186803b15801561168557600080fd5b505afa158015611699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bd9190612bdd565b826080018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ff57600080fd5b505afa158015611713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117379190612bdd565b8260c0018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190612bdd565b8260e0018181525050806001600160a01b031663d756985b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f357600080fd5b505afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190612bdd565b82610120018181525050806001600160a01b031663a04a6ac86040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190612bdd565b82610140018181525050806001600160a01b0316630a212ee26040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190612bdd565b82610160018181525050806001600160a01b031663f243669b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196457600080fd5b505afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c9190612bdd565b82610180018181525050806001600160a01b031663e6fe34b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190612bdd565b826101a0018181525050806001600160a01b031663154895106040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5a57600080fd5b505afa158015611a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a929190612bdd565b826101c0018181525050806001600160a01b03166308a3fb4e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad557600080fd5b505afa158015611ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0d9190612bdd565b6101e083015260808201516040516348be804f60e11b815260048101919091526001600160a01b0382169063917d009e9060240160206040518083038186803b158015611b5957600080fd5b505afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b919190612bdd565b82610200018181525050806001600160a01b0316637a18c1fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd457600080fd5b505afa158015611be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0c9190612bdd565b82610260018181525050806001600160a01b031663a54cd7dc6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4f57600080fd5b505afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c879190612bdd565b82610280018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190612bdd565b826102c0018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4557600080fd5b505afa158015611d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7d9190612bdd565b6102e08301526001836002811115611d9757611d97613247565b1415611e9457836001600160a01b0316630b1019e76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd657600080fd5b505afa158015611dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0e9190612bdd565b82610220018181525050836001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190612bdd565b610240830152612111565b6002836002811115611ea857611ea8613247565b141561211157806001600160a01b03166390967a526040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f9190612bdd565b82610220018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6257600080fd5b505afa158015611f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9a9190612bdd565b82610240018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fdd57600080fd5b505afa158015611ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120159190612bdd565b8260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561205757600080fd5b505afa15801561206b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f9190612bdd565b82610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d257600080fd5b505afa1580156120e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210a9190612bdd565b6102a08301525b5092915050565b612120612ae6565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121969190612c55565b829060058111156121a9576121a9613247565b908160058111156121bc576121bc613247565b81525050806001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122319190612bdd565b826020018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190612bdd565b826040018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ed57600080fd5b505afa158015612301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123259190612bdd565b826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561236757600080fd5b505afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190612bdd565b8260a0018181525050806001600160a01b03166390967a526040518163ffffffff1660e01b815260040160206040518083038186803b1580156123e157600080fd5b505afa1580156123f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124199190612bdd565b8260e0018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245b57600080fd5b505afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124939190612bdd565b82610100018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124d657600080fd5b505afa1580156124ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250e9190612bdd565b82610140018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561255157600080fd5b505afa158015612565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125899190612bdd565b61016083015260028360028111156125a3576125a3613247565b141561211157806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125e257600080fd5b505afa1580156125f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261a9190612bdd565b826060018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265c57600080fd5b505afa158015612670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126949190612bdd565b8260c0018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e9190612bdd565b6101208301525092915050565b60606000826001600160a01b031663be62da0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561275857600080fd5b505afa15801561276c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127909190612bdd565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0385169063ca15c8739060240160206040518083038186803b1580156127d657600080fd5b505afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190612bdd565b905060008167ffffffffffffffff81111561282b5761282b613273565b604051908082528060200260200182016040528015612854578160200160208202803683370190505b50905060005b8281101561291d57604051632404341f60e21b815260048101859052602481018290526001600160a01b03871690639010d07c9060440160206040518083038186803b1580156128a957600080fd5b505afa1580156128bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e19190612b65565b8282815181106128f3576128f361325d565b6001600160a01b03909216602092830291909101909101528061291581613216565b91505061285a565b50949350505050565b6040805161010081019091526000808252602082019081526020016129816040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b815260200161298e612a30565b815260200161299b612ae6565b81526020016129cb6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016129fb6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001612a2b6040518060800160405280606081526020016000815260200160008152602001600081525090565b905290565b604080516103008101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215612b5a57600080fd5b813561142f8161329c565b600060208284031215612b7757600080fd5b815161142f8161329c565b60008060408385031215612b9557600080fd5b8235612ba08161329c565b91506020830135612bb08161329c565b809150509250929050565b600060208284031215612bcd57600080fd5b8151801515811461142f57600080fd5b600060208284031215612bef57600080fd5b5051919050565b600080600080600060a08688031215612c0e57600080fd5b8535612c19816132b1565b94506020860135612c29816132b1565b935060408601359250606086013591506080860135612c478161329c565b809150509295509295909350565b600060208284031215612c6757600080fd5b81516006811061142f57600080fd5b600060208284031215612c8857600080fd5b815167ffffffffffffffff80821115612ca057600080fd5b818401915084601f830112612cb457600080fd5b815181811115612cc657612cc6613273565b604051601f8201601f19908116603f01168101908382118183101715612cee57612cee613273565b81604052828152876020848701011115612d0757600080fd5b612d188360208301602088016131e6565b979650505050505050565b600080600080600060a08688031215612d3b57600080fd5b85519450602086015180600f0b8114612d5357600080fd5b6040870151606088015160809098015196999198509695945092505050565b612d7b81613289565b9052565b60068110612d7b57612d7b613247565b60008151808452612da78160208601602086016131e6565b601f01601f19169290920160200192915050565b6000815160e08452612dd060e0850182612d8f565b905060208301518482036020860152612de98282612d8f565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a0860152612e218282612d8f565b91505060c083015184820360c0860152612e3b8282612d8f565b95945050505050565b612e4f828251612d7f565b6020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b612ed4828251612d7f565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151908301526102e090810151910152565b80516001600160a01b0316825260006106006020830151612fef6020860182612d72565b50604083015181604086015261300782860182612dbb565b915050606083015161301c6060860182612ec9565b506080830151613030610360860182612e44565b5060a083015180516104e08601526020810151610500860152604081015161052086015260608101516105408601525060c08301518051610560860152602081015161058086015260408101516105a086015260608101516105c08601525060e08301518482036105e0860152612e3b82828051608080845281519084018190526000916020919082019060a0860190845b818110156130e75783516001600160a01b0316835292840192918401916001016130c2565b50508285015183870152604085015160408701526060850151606087015280935050505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561316657603f19888603018452613154858351612fcb565b94509285019290850190600101613138565b5092979650505050505050565b6040810161318084613289565b83825261318c83613289565b8260208301529392505050565b60208152600061142f6020830184612fcb565b6000828210156131be576131be613231565b500390565b600060ff821660ff8416808210156131dd576131dd613231565b90039392505050565b60005b838110156132015781810151838201526020016131e9565b83811115613210576000848401525b50505050565b600060001982141561322a5761322a613231565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6003811061329957613299613247565b50565b6001600160a01b038116811461329957600080fd5b6003811061329957600080fdfea26469706673582212200c741ef66a6485ea48260f77529cefa12ae0327689b2f4bb2c75e8be9376986364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806304fa66ba1461006757806321cc161114610090578063522ea9bc146100cf57806354dbc616146100f6578063a6a7b3ea1461011d578063d0b54b3b1461013e575b600080fd5b61007a610075366004612bf6565b61015e565b6040516100879190613111565b60405180910390f35b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610087565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b6100b77f000000000000000000000000000000000000000000000000000000000000000081565b61013061012b366004612b48565b610451565b604051610087929190613173565b61015161014c366004612b82565b610724565b6040516100879190613199565b6060600086600281111561017457610174613247565b14156101935760405163883ee45160e01b815260040160405180910390fd5b60008560028111156101a7576101a7613247565b14156101c6576040516305fdabfd60e41b815260040160405180910390fd5b600060018660028111156101dc576101dc613247565b14610207577f0000000000000000000000000000000000000000000000000000000000000000610229565b7f00000000000000000000000000000000000000000000000000000000000000005b90506000600188600281111561024157610241613247565b61024b91906131c3565b60ff1690506000826001600160a01b031663776f1b1c836040518263ffffffff1660e01b815260040161028091815260200190565b60206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190612bdd565b905060008187116102e157866102e3565b815b905060008189116102fd576102f889836131ac565b610300565b60005b9050606061030e82846131ac565b67ffffffffffffffff81111561032657610326613273565b60405190808252806020026020018201604052801561035f57816020015b61034c612926565b8152602001906001900390816103445790505b50905060005b8151811015610441576104116001600160a01b03881663306ec748888461038d60018a6131ac565b61039791906131ac565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190612b65565b8a610724565b8282815181106104235761042361325d565b6020026020010181905250808061043990613216565b915050610365565b509b9a5050505050505050505050565b60405163abcc761760e01b81526000600482018190526001600160a01b038381166024840152909182917f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b1580156104bf57600080fd5b505afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190612bbb565b1561050757506001928392509050565b60405163abcc761760e01b8152600060048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b15801561056f57600080fd5b505afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a79190612bbb565b156105b85750600192600292509050565b60405163abcc761760e01b8152600160048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190612bbb565b156106695750600292600192509050565b60405163abcc761760e01b8152600160048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063abcc76179060440160206040518083038186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190612bbb565b1561071957506002928392509050565b506000928392509050565b61072c612926565b60008061073885610451565b9092509050600082600281111561075157610751613247565b141561077057604051630ca92ff360e31b815260040160405180910390fd5b610778612926565b6001600160a01b03861681526020810183600281111561079a5761079a613247565b908160028111156107ad576107ad613247565b9052506107b986610857565b60408201526107c88683610bfb565b60e08201526107d78683610e32565b60a08201526107e78683876111e5565b60c082015260018160200151600281111561080457610804613247565b141561081e576108148683611436565b606082015261084c565b60028160200151600281111561083657610836613247565b141561084c576108468683612118565b60808201525b925050505b92915050565b6108976040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b816001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090c9190810190612c76565b8160000181905250816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109899190810190612c76565b8160200181905250816001600160a01b03166345c0f5336040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190612bdd565b816040018181525050816001600160a01b0316638bc35c2f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4457600080fd5b505afa158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190612bdd565b816060018181525050816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190612bdd565b816080018181525050816001600160a01b0316637035bf186040518163ffffffff1660e01b815260040160006040518083038186803b158015610b3857600080fd5b505afa158015610b4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b749190810190612c76565b8160a00181905250816001600160a01b0316636c0360eb6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bb557600080fd5b505afa158015610bc9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bf19190810190612c76565b60c0820152919050565b610c266040518060800160405280606081526020016000815260200160008152602001600081525090565b826001600160a01b0316635c7034af6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190612bdd565b60208201526001600160a01b0383163160608201526001826002811115610cc057610cc0613247565b1415610d8b5760408051600180825281830190925260009160208083019080368337019050509050836001600160a01b031663a4475ce46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190612b65565b81600081518110610d6c57610d6c61325d565b6001600160a01b03909216602092830291909101909101528152610851565b6002826002811115610d9f57610d9f613247565b141561085157610dae8361271b565b8160000181905250826001600160a01b031663c792e1676040518163ffffffff1660e01b815260040160206040518083038186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190612bdd565b604082015292915050565b610e5d6040518060800160405280600081526020016000815260200160008152602001600081525090565b6001826002811115610e7157610e71613247565b1415611066576000839050806001600160a01b0316630b5648106040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612bdd565b826000018181525050806001600160a01b031663cc0bef846040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f679190612bdd565b826040018181525050806001600160a01b031663247cd8ad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa957600080fd5b505afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190612bdd565b826060018181525050806001600160a01b031663f43191956040518163ffffffff1660e01b815260040160206040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612bdd565b602083015250610851565b600282600281111561107a5761107a613247565b141561085157604051630303a4b160e31b81526001600160a01b038481166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063181d25889060240160a06040518083038186803b1580156110ea57600080fd5b505afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190612d23565b8289526040808a0183905260608a0182905251635e1578db60e11b81526001600160a01b038c8116600483015293985091965094507f0000000000000000000000000000000000000000000000000000000000000000909116925063bc2af1b6915060240160206040518083038186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190612bdd565b602085015250505092915050565b6112106040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b0382161561142f576040516370a0823160e01b81526001600160a01b0383811660048301528516906370a082319060240160206040518083038186803b15801561126057600080fd5b505afa158015611274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112989190612bdd565b815260405163dc33e68160e01b81526001600160a01b03838116600483015285169063dc33e6819060240160206040518083038186803b1580156112db57600080fd5b505afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190612bdd565b602082015260405163a7cd52cb60e01b81526001600160a01b03838116600483015285169063a7cd52cb9060240160206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113919190612bdd565b606082015260028360028111156113aa576113aa613247565b141561142f5760405163aec3922b60e01b81526001600160a01b03838116600483015285169063aec3922b9060240160206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612bdd565b60408201525b9392505050565b61143e612a30565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b49190612c55565b829060058111156114c7576114c7613247565b908160058111156114da576114da613247565b81525050806001600160a01b031663f7df4c5a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151757600080fd5b505afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190612bdd565b826020018181525050806001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190612bdd565b826040018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116439190612bdd565b826060018181525050806001600160a01b031663fab2bf586040518163ffffffff1660e01b815260040160206040518083038186803b15801561168557600080fd5b505afa158015611699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bd9190612bdd565b826080018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ff57600080fd5b505afa158015611713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117379190612bdd565b8260c0018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190612bdd565b8260e0018181525050806001600160a01b031663d756985b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f357600080fd5b505afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190612bdd565b82610120018181525050806001600160a01b031663a04a6ac86040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190612bdd565b82610140018181525050806001600160a01b0316630a212ee26040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190612bdd565b82610160018181525050806001600160a01b031663f243669b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196457600080fd5b505afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c9190612bdd565b82610180018181525050806001600160a01b031663e6fe34b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190612bdd565b826101a0018181525050806001600160a01b031663154895106040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5a57600080fd5b505afa158015611a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a929190612bdd565b826101c0018181525050806001600160a01b03166308a3fb4e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ad557600080fd5b505afa158015611ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0d9190612bdd565b6101e083015260808201516040516348be804f60e11b815260048101919091526001600160a01b0382169063917d009e9060240160206040518083038186803b158015611b5957600080fd5b505afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b919190612bdd565b82610200018181525050806001600160a01b0316637a18c1fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd457600080fd5b505afa158015611be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0c9190612bdd565b82610260018181525050806001600160a01b031663a54cd7dc6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4f57600080fd5b505afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c879190612bdd565b82610280018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190612bdd565b826102c0018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4557600080fd5b505afa158015611d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7d9190612bdd565b6102e08301526001836002811115611d9757611d97613247565b1415611e9457836001600160a01b0316630b1019e76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd657600080fd5b505afa158015611dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0e9190612bdd565b82610220018181525050836001600160a01b0316638e8bdd0d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190612bdd565b610240830152612111565b6002836002811115611ea857611ea8613247565b141561211157806001600160a01b03166390967a526040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee757600080fd5b505afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f9190612bdd565b82610220018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6257600080fd5b505afa158015611f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9a9190612bdd565b82610240018181525050806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fdd57600080fd5b505afa158015611ff1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120159190612bdd565b8260a0018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561205757600080fd5b505afa15801561206b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f9190612bdd565b82610100018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d257600080fd5b505afa1580156120e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210a9190612bdd565b6102a08301525b5092915050565b612120612ae6565b6000839050806001600160a01b031663055ad42e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121969190612c55565b829060058111156121a9576121a9613247565b908160058111156121bc576121bc613247565b81525050806001600160a01b031663d62b63036040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122319190612bdd565b826020018181525050806001600160a01b031663fbe1aa516040518163ffffffff1660e01b815260040160206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190612bdd565b826040018181525050806001600160a01b03166359d7bc4d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ed57600080fd5b505afa158015612301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123259190612bdd565b826080018181525050806001600160a01b0316636bb7b1d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561236757600080fd5b505afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190612bdd565b8260a0018181525050806001600160a01b03166390967a526040518163ffffffff1660e01b815260040160206040518083038186803b1580156123e157600080fd5b505afa1580156123f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124199190612bdd565b8260e0018181525050806001600160a01b031663f51f96dd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245b57600080fd5b505afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124939190612bdd565b82610100018181525050806001600160a01b0316633cc4cadb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124d657600080fd5b505afa1580156124ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250e9190612bdd565b82610140018181525050806001600160a01b031663963331d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561255157600080fd5b505afa158015612565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125899190612bdd565b61016083015260028360028111156125a3576125a3613247565b141561211157806001600160a01b03166362f4fb2d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125e257600080fd5b505afa1580156125f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261a9190612bdd565b826060018181525050806001600160a01b0316631e4d185f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265c57600080fd5b505afa158015612670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126949190612bdd565b8260c0018181525050806001600160a01b0316632e8f1f506040518163ffffffff1660e01b815260040160206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e9190612bdd565b6101208301525092915050565b60606000826001600160a01b031663be62da0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561275857600080fd5b505afa15801561276c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127909190612bdd565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0385169063ca15c8739060240160206040518083038186803b1580156127d657600080fd5b505afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190612bdd565b905060008167ffffffffffffffff81111561282b5761282b613273565b604051908082528060200260200182016040528015612854578160200160208202803683370190505b50905060005b8281101561291d57604051632404341f60e21b815260048101859052602481018290526001600160a01b03871690639010d07c9060440160206040518083038186803b1580156128a957600080fd5b505afa1580156128bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e19190612b65565b8282815181106128f3576128f361325d565b6001600160a01b03909216602092830291909101909101528061291581613216565b91505061285a565b50949350505050565b6040805161010081019091526000808252602082019081526020016129816040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081525090565b815260200161298e612a30565b815260200161299b612ae6565b81526020016129cb6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016129fb6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001612a2b6040518060800160405280606081526020016000815260200160008152602001600081525090565b905290565b604080516103008101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060208284031215612b5a57600080fd5b813561142f8161329c565b600060208284031215612b7757600080fd5b815161142f8161329c565b60008060408385031215612b9557600080fd5b8235612ba08161329c565b91506020830135612bb08161329c565b809150509250929050565b600060208284031215612bcd57600080fd5b8151801515811461142f57600080fd5b600060208284031215612bef57600080fd5b5051919050565b600080600080600060a08688031215612c0e57600080fd5b8535612c19816132b1565b94506020860135612c29816132b1565b935060408601359250606086013591506080860135612c478161329c565b809150509295509295909350565b600060208284031215612c6757600080fd5b81516006811061142f57600080fd5b600060208284031215612c8857600080fd5b815167ffffffffffffffff80821115612ca057600080fd5b818401915084601f830112612cb457600080fd5b815181811115612cc657612cc6613273565b604051601f8201601f19908116603f01168101908382118183101715612cee57612cee613273565b81604052828152876020848701011115612d0757600080fd5b612d188360208301602088016131e6565b979650505050505050565b600080600080600060a08688031215612d3b57600080fd5b85519450602086015180600f0b8114612d5357600080fd5b6040870151606088015160809098015196999198509695945092505050565b612d7b81613289565b9052565b60068110612d7b57612d7b613247565b60008151808452612da78160208601602086016131e6565b601f01601f19169290920160200192915050565b6000815160e08452612dd060e0850182612d8f565b905060208301518482036020860152612de98282612d8f565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a0860152612e218282612d8f565b91505060c083015184820360c0860152612e3b8282612d8f565b95945050505050565b612e4f828251612d7f565b6020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b612ed4828251612d7f565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151908301526102e090810151910152565b80516001600160a01b0316825260006106006020830151612fef6020860182612d72565b50604083015181604086015261300782860182612dbb565b915050606083015161301c6060860182612ec9565b506080830151613030610360860182612e44565b5060a083015180516104e08601526020810151610500860152604081015161052086015260608101516105408601525060c08301518051610560860152602081015161058086015260408101516105a086015260608101516105c08601525060e08301518482036105e0860152612e3b82828051608080845281519084018190526000916020919082019060a0860190845b818110156130e75783516001600160a01b0316835292840192918401916001016130c2565b50508285015183870152604085015160408701526060850151606087015280935050505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561316657603f19888603018452613154858351612fcb565b94509285019290850190600101613138565b5092979650505050505050565b6040810161318084613289565b83825261318c83613289565b8260208301529392505050565b60208152600061142f6020830184612fcb565b6000828210156131be576131be613231565b500390565b600060ff821660ff8416808210156131dd576131dd613231565b90039392505050565b60005b838110156132015781810151838201526020016131e9565b83811115613210576000848401525b50505050565b600060001982141561322a5761322a613231565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6003811061329957613299613247565b50565b6001600160a01b038116811461329957600080fd5b6003811061329957600080fdfea26469706673582212200c741ef66a6485ea48260f77529cefa12ae0327689b2f4bb2c75e8be9376986364736f6c63430008060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "LaunchpegLens constructor",
        "params": {
          "_batchReveal": "BatchReveal address",
          "_launchpegFactoryV1": "LaunchpegFactory V1",
          "_launchpegFactoryV2": "LaunchpegFactory V2"
        }
      },
      "getLaunchpegData(address,address)": {
        "params": {
          "_launchpeg": "Contract address to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations"
        },
        "returns": {
          "_0": "LensData Contract data"
        }
      },
      "getLaunchpegType(address)": {
        "params": {
          "_contract": "Contract address to consider"
        },
        "returns": {
          "_0": "LaunchpegType Type of Launchpeg implementation (Dutch Auction / Flat / Unknown)"
        }
      },
      "getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)": {
        "params": {
          "_limit": "Last Launchpeg index to fetch",
          "_number": "Number of Launchpeg to fetch",
          "_type": "Type of Launchpeg to consider",
          "_user": "Address to consider for NFT balances and allowlist allocations",
          "_version": "Launchpeg version"
        },
        "returns": {
          "_0": "LensDataList List of contracts datas, in descending order"
        }
      }
    },
    "title": "Launchpeg Lens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchReveal()": {
        "notice": "BatchReveal address"
      },
      "getLaunchpegData(address,address)": {
        "notice": "Fetch Launchpeg data from the provided address"
      },
      "getLaunchpegType(address)": {
        "notice": "Gets the type and version of Launchpeg"
      },
      "getLaunchpegsByTypeAndVersion(uint8,uint8,uint256,uint256,address)": {
        "notice": "Fetch Launchpeg data by type and version"
      },
      "launchpegFactoryV1()": {
        "notice": "LaunchpegFactory V1"
      },
      "launchpegFactoryV2()": {
        "notice": "LaunchpegFactory V2"
      }
    },
    "notice": "Helper contract to fetch launchpegs data",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}